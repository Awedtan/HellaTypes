import * as z from 'zod';
declare const AttributesKeyFrameZod: z.ZodObject<{
    level: z.ZodNumber;
    data: z.ZodObject<{
        maxHp: z.ZodNumber;
        atk: z.ZodNumber;
        def: z.ZodNumber;
        magicResistance: z.ZodNumber;
        cost: z.ZodNumber;
        blockCnt: z.ZodNumber;
        moveSpeed: z.ZodNumber;
        attackSpeed: z.ZodNumber;
        baseAttackTime: z.ZodNumber;
        respawnTime: z.ZodNumber;
        hpRecoveryPerSec: z.ZodNumber;
        spRecoveryPerSec: z.ZodNumber;
        maxDeployCount: z.ZodNumber;
        maxDeckStackCnt: z.ZodNumber;
        tauntLevel: z.ZodNumber;
        massLevel: z.ZodNumber;
        baseForceLevel: z.ZodNumber;
        stunImmune: z.ZodBoolean;
        silenceImmune: z.ZodBoolean;
        sleepImmune: z.ZodBoolean;
        frozenImmune: z.ZodBoolean;
        levitateImmune: z.ZodBoolean;
    }, "strict", z.ZodTypeAny, {
        maxHp: number;
        atk: number;
        def: number;
        magicResistance: number;
        cost: number;
        blockCnt: number;
        moveSpeed: number;
        attackSpeed: number;
        baseAttackTime: number;
        respawnTime: number;
        hpRecoveryPerSec: number;
        spRecoveryPerSec: number;
        maxDeployCount: number;
        maxDeckStackCnt: number;
        tauntLevel: number;
        massLevel: number;
        baseForceLevel: number;
        stunImmune: boolean;
        silenceImmune: boolean;
        sleepImmune: boolean;
        frozenImmune: boolean;
        levitateImmune: boolean;
    }, {
        maxHp: number;
        atk: number;
        def: number;
        magicResistance: number;
        cost: number;
        blockCnt: number;
        moveSpeed: number;
        attackSpeed: number;
        baseAttackTime: number;
        respawnTime: number;
        hpRecoveryPerSec: number;
        spRecoveryPerSec: number;
        maxDeployCount: number;
        maxDeckStackCnt: number;
        tauntLevel: number;
        massLevel: number;
        baseForceLevel: number;
        stunImmune: boolean;
        silenceImmune: boolean;
        sleepImmune: boolean;
        frozenImmune: boolean;
        levitateImmune: boolean;
    }>;
}, "strict", z.ZodTypeAny, {
    data: {
        maxHp: number;
        atk: number;
        def: number;
        magicResistance: number;
        cost: number;
        blockCnt: number;
        moveSpeed: number;
        attackSpeed: number;
        baseAttackTime: number;
        respawnTime: number;
        hpRecoveryPerSec: number;
        spRecoveryPerSec: number;
        maxDeployCount: number;
        maxDeckStackCnt: number;
        tauntLevel: number;
        massLevel: number;
        baseForceLevel: number;
        stunImmune: boolean;
        silenceImmune: boolean;
        sleepImmune: boolean;
        frozenImmune: boolean;
        levitateImmune: boolean;
    };
    level: number;
}, {
    data: {
        maxHp: number;
        atk: number;
        def: number;
        magicResistance: number;
        cost: number;
        blockCnt: number;
        moveSpeed: number;
        attackSpeed: number;
        baseAttackTime: number;
        respawnTime: number;
        hpRecoveryPerSec: number;
        spRecoveryPerSec: number;
        maxDeployCount: number;
        maxDeckStackCnt: number;
        tauntLevel: number;
        massLevel: number;
        baseForceLevel: number;
        stunImmune: boolean;
        silenceImmune: boolean;
        sleepImmune: boolean;
        frozenImmune: boolean;
        levitateImmune: boolean;
    };
    level: number;
}>;
declare const BlackboardZod: z.ZodObject<{
    key: z.ZodString;
    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
}, "strict", z.ZodTypeAny, {
    key: string;
    value: number | null;
    valueStr?: string | null | undefined;
}, {
    key: string;
    value: number | null;
    valueStr?: string | null | undefined;
}>;
declare const EnemyAttributesZod: z.ZodObject<{
    maxHp: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: number | null;
    }, {
        m_defined: boolean;
        m_value: number | null;
    }>;
    atk: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: number | null;
    }, {
        m_defined: boolean;
        m_value: number | null;
    }>;
    def: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: number | null;
    }, {
        m_defined: boolean;
        m_value: number | null;
    }>;
    magicResistance: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: number | null;
    }, {
        m_defined: boolean;
        m_value: number | null;
    }>;
    cost: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: number | null;
    }, {
        m_defined: boolean;
        m_value: number | null;
    }>;
    blockCnt: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: number | null;
    }, {
        m_defined: boolean;
        m_value: number | null;
    }>;
    moveSpeed: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: number | null;
    }, {
        m_defined: boolean;
        m_value: number | null;
    }>;
    attackSpeed: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: number | null;
    }, {
        m_defined: boolean;
        m_value: number | null;
    }>;
    baseAttackTime: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: number | null;
    }, {
        m_defined: boolean;
        m_value: number | null;
    }>;
    respawnTime: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: number | null;
    }, {
        m_defined: boolean;
        m_value: number | null;
    }>;
    hpRecoveryPerSec: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: number | null;
    }, {
        m_defined: boolean;
        m_value: number | null;
    }>;
    spRecoveryPerSec: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: number | null;
    }, {
        m_defined: boolean;
        m_value: number | null;
    }>;
    maxDeployCount: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: number | null;
    }, {
        m_defined: boolean;
        m_value: number | null;
    }>;
    massLevel: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: number | null;
    }, {
        m_defined: boolean;
        m_value: number | null;
    }>;
    baseForceLevel: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: number | null;
    }, {
        m_defined: boolean;
        m_value: number | null;
    }>;
    tauntLevel: z.ZodUnion<[z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: number | null;
    }, {
        m_defined: boolean;
        m_value: number | null;
    }>, z.ZodUndefined]>;
    epDamageResistance: z.ZodUnion<[z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: number | null;
    }, {
        m_defined: boolean;
        m_value: number | null;
    }>, z.ZodUndefined]>;
    epResistance: z.ZodUnion<[z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: number | null;
    }, {
        m_defined: boolean;
        m_value: number | null;
    }>, z.ZodUndefined]>;
    stunImmune: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodBoolean;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: boolean;
    }, {
        m_defined: boolean;
        m_value: boolean;
    }>;
    silenceImmune: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodBoolean;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: boolean;
    }, {
        m_defined: boolean;
        m_value: boolean;
    }>;
    sleepImmune: z.ZodUnion<[z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodBoolean;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: boolean;
    }, {
        m_defined: boolean;
        m_value: boolean;
    }>, z.ZodUndefined]>;
    frozenImmune: z.ZodUnion<[z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodBoolean;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: boolean;
    }, {
        m_defined: boolean;
        m_value: boolean;
    }>, z.ZodUndefined]>;
    levitateImmune: z.ZodUnion<[z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodBoolean;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: boolean;
    }, {
        m_defined: boolean;
        m_value: boolean;
    }>, z.ZodUndefined]>;
}, "strict", z.ZodTypeAny, {
    maxHp: {
        m_defined: boolean;
        m_value: number | null;
    };
    atk: {
        m_defined: boolean;
        m_value: number | null;
    };
    def: {
        m_defined: boolean;
        m_value: number | null;
    };
    magicResistance: {
        m_defined: boolean;
        m_value: number | null;
    };
    cost: {
        m_defined: boolean;
        m_value: number | null;
    };
    blockCnt: {
        m_defined: boolean;
        m_value: number | null;
    };
    moveSpeed: {
        m_defined: boolean;
        m_value: number | null;
    };
    attackSpeed: {
        m_defined: boolean;
        m_value: number | null;
    };
    baseAttackTime: {
        m_defined: boolean;
        m_value: number | null;
    };
    respawnTime: {
        m_defined: boolean;
        m_value: number | null;
    };
    hpRecoveryPerSec: {
        m_defined: boolean;
        m_value: number | null;
    };
    spRecoveryPerSec: {
        m_defined: boolean;
        m_value: number | null;
    };
    maxDeployCount: {
        m_defined: boolean;
        m_value: number | null;
    };
    massLevel: {
        m_defined: boolean;
        m_value: number | null;
    };
    baseForceLevel: {
        m_defined: boolean;
        m_value: number | null;
    };
    stunImmune: {
        m_defined: boolean;
        m_value: boolean;
    };
    silenceImmune: {
        m_defined: boolean;
        m_value: boolean;
    };
    tauntLevel?: {
        m_defined: boolean;
        m_value: number | null;
    } | undefined;
    epDamageResistance?: {
        m_defined: boolean;
        m_value: number | null;
    } | undefined;
    epResistance?: {
        m_defined: boolean;
        m_value: number | null;
    } | undefined;
    sleepImmune?: {
        m_defined: boolean;
        m_value: boolean;
    } | undefined;
    frozenImmune?: {
        m_defined: boolean;
        m_value: boolean;
    } | undefined;
    levitateImmune?: {
        m_defined: boolean;
        m_value: boolean;
    } | undefined;
}, {
    maxHp: {
        m_defined: boolean;
        m_value: number | null;
    };
    atk: {
        m_defined: boolean;
        m_value: number | null;
    };
    def: {
        m_defined: boolean;
        m_value: number | null;
    };
    magicResistance: {
        m_defined: boolean;
        m_value: number | null;
    };
    cost: {
        m_defined: boolean;
        m_value: number | null;
    };
    blockCnt: {
        m_defined: boolean;
        m_value: number | null;
    };
    moveSpeed: {
        m_defined: boolean;
        m_value: number | null;
    };
    attackSpeed: {
        m_defined: boolean;
        m_value: number | null;
    };
    baseAttackTime: {
        m_defined: boolean;
        m_value: number | null;
    };
    respawnTime: {
        m_defined: boolean;
        m_value: number | null;
    };
    hpRecoveryPerSec: {
        m_defined: boolean;
        m_value: number | null;
    };
    spRecoveryPerSec: {
        m_defined: boolean;
        m_value: number | null;
    };
    maxDeployCount: {
        m_defined: boolean;
        m_value: number | null;
    };
    massLevel: {
        m_defined: boolean;
        m_value: number | null;
    };
    baseForceLevel: {
        m_defined: boolean;
        m_value: number | null;
    };
    stunImmune: {
        m_defined: boolean;
        m_value: boolean;
    };
    silenceImmune: {
        m_defined: boolean;
        m_value: boolean;
    };
    tauntLevel?: {
        m_defined: boolean;
        m_value: number | null;
    } | undefined;
    epDamageResistance?: {
        m_defined: boolean;
        m_value: number | null;
    } | undefined;
    epResistance?: {
        m_defined: boolean;
        m_value: number | null;
    } | undefined;
    sleepImmune?: {
        m_defined: boolean;
        m_value: boolean;
    } | undefined;
    frozenImmune?: {
        m_defined: boolean;
        m_value: boolean;
    } | undefined;
    levitateImmune?: {
        m_defined: boolean;
        m_value: boolean;
    } | undefined;
}>;
declare const EnemySkillsZod: z.ZodObject<{
    prefabKey: z.ZodString;
    priority: z.ZodNumber;
    cooldown: z.ZodNumber;
    initCooldown: z.ZodNumber;
    spCost: z.ZodNumber;
    blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
        key: z.ZodString;
        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
    }, "strict", z.ZodTypeAny, {
        key: string;
        value: number | null;
        valueStr?: string | null | undefined;
    }, {
        key: string;
        value: number | null;
        valueStr?: string | null | undefined;
    }>, "many">, z.ZodNull]>;
}, "strict", z.ZodTypeAny, {
    priority: number;
    prefabKey: string;
    cooldown: number;
    initCooldown: number;
    spCost: number;
    blackboard: {
        key: string;
        value: number | null;
        valueStr?: string | null | undefined;
    }[] | null;
}, {
    priority: number;
    prefabKey: string;
    cooldown: number;
    initCooldown: number;
    spCost: number;
    blackboard: {
        key: string;
        value: number | null;
        valueStr?: string | null | undefined;
    }[] | null;
}>;
declare const EnemySpDataZod: z.ZodObject<{
    spType: z.ZodString;
    maxSp: z.ZodNumber;
    initSp: z.ZodNumber;
    increment: z.ZodNumber;
}, "strict", z.ZodTypeAny, {
    spType: string;
    maxSp: number;
    initSp: number;
    increment: number;
}, {
    spType: string;
    maxSp: number;
    initSp: number;
    increment: number;
}>;
declare const EnemyDataZod: z.ZodObject<{
    name: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: string | null;
    }, {
        m_defined: boolean;
        m_value: string | null;
    }>;
    description: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: string | null;
    }, {
        m_defined: boolean;
        m_value: string | null;
    }>;
    prefabKey: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: string | null;
    }, {
        m_defined: boolean;
        m_value: string | null;
    }>;
    attributes: z.ZodObject<{
        maxHp: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined: boolean;
            m_value: number | null;
        }, {
            m_defined: boolean;
            m_value: number | null;
        }>;
        atk: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined: boolean;
            m_value: number | null;
        }, {
            m_defined: boolean;
            m_value: number | null;
        }>;
        def: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined: boolean;
            m_value: number | null;
        }, {
            m_defined: boolean;
            m_value: number | null;
        }>;
        magicResistance: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined: boolean;
            m_value: number | null;
        }, {
            m_defined: boolean;
            m_value: number | null;
        }>;
        cost: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined: boolean;
            m_value: number | null;
        }, {
            m_defined: boolean;
            m_value: number | null;
        }>;
        blockCnt: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined: boolean;
            m_value: number | null;
        }, {
            m_defined: boolean;
            m_value: number | null;
        }>;
        moveSpeed: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined: boolean;
            m_value: number | null;
        }, {
            m_defined: boolean;
            m_value: number | null;
        }>;
        attackSpeed: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined: boolean;
            m_value: number | null;
        }, {
            m_defined: boolean;
            m_value: number | null;
        }>;
        baseAttackTime: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined: boolean;
            m_value: number | null;
        }, {
            m_defined: boolean;
            m_value: number | null;
        }>;
        respawnTime: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined: boolean;
            m_value: number | null;
        }, {
            m_defined: boolean;
            m_value: number | null;
        }>;
        hpRecoveryPerSec: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined: boolean;
            m_value: number | null;
        }, {
            m_defined: boolean;
            m_value: number | null;
        }>;
        spRecoveryPerSec: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined: boolean;
            m_value: number | null;
        }, {
            m_defined: boolean;
            m_value: number | null;
        }>;
        maxDeployCount: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined: boolean;
            m_value: number | null;
        }, {
            m_defined: boolean;
            m_value: number | null;
        }>;
        massLevel: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined: boolean;
            m_value: number | null;
        }, {
            m_defined: boolean;
            m_value: number | null;
        }>;
        baseForceLevel: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined: boolean;
            m_value: number | null;
        }, {
            m_defined: boolean;
            m_value: number | null;
        }>;
        tauntLevel: z.ZodUnion<[z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined: boolean;
            m_value: number | null;
        }, {
            m_defined: boolean;
            m_value: number | null;
        }>, z.ZodUndefined]>;
        epDamageResistance: z.ZodUnion<[z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined: boolean;
            m_value: number | null;
        }, {
            m_defined: boolean;
            m_value: number | null;
        }>, z.ZodUndefined]>;
        epResistance: z.ZodUnion<[z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined: boolean;
            m_value: number | null;
        }, {
            m_defined: boolean;
            m_value: number | null;
        }>, z.ZodUndefined]>;
        stunImmune: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodBoolean;
        }, "strict", z.ZodTypeAny, {
            m_defined: boolean;
            m_value: boolean;
        }, {
            m_defined: boolean;
            m_value: boolean;
        }>;
        silenceImmune: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodBoolean;
        }, "strict", z.ZodTypeAny, {
            m_defined: boolean;
            m_value: boolean;
        }, {
            m_defined: boolean;
            m_value: boolean;
        }>;
        sleepImmune: z.ZodUnion<[z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodBoolean;
        }, "strict", z.ZodTypeAny, {
            m_defined: boolean;
            m_value: boolean;
        }, {
            m_defined: boolean;
            m_value: boolean;
        }>, z.ZodUndefined]>;
        frozenImmune: z.ZodUnion<[z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodBoolean;
        }, "strict", z.ZodTypeAny, {
            m_defined: boolean;
            m_value: boolean;
        }, {
            m_defined: boolean;
            m_value: boolean;
        }>, z.ZodUndefined]>;
        levitateImmune: z.ZodUnion<[z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodBoolean;
        }, "strict", z.ZodTypeAny, {
            m_defined: boolean;
            m_value: boolean;
        }, {
            m_defined: boolean;
            m_value: boolean;
        }>, z.ZodUndefined]>;
    }, "strict", z.ZodTypeAny, {
        maxHp: {
            m_defined: boolean;
            m_value: number | null;
        };
        atk: {
            m_defined: boolean;
            m_value: number | null;
        };
        def: {
            m_defined: boolean;
            m_value: number | null;
        };
        magicResistance: {
            m_defined: boolean;
            m_value: number | null;
        };
        cost: {
            m_defined: boolean;
            m_value: number | null;
        };
        blockCnt: {
            m_defined: boolean;
            m_value: number | null;
        };
        moveSpeed: {
            m_defined: boolean;
            m_value: number | null;
        };
        attackSpeed: {
            m_defined: boolean;
            m_value: number | null;
        };
        baseAttackTime: {
            m_defined: boolean;
            m_value: number | null;
        };
        respawnTime: {
            m_defined: boolean;
            m_value: number | null;
        };
        hpRecoveryPerSec: {
            m_defined: boolean;
            m_value: number | null;
        };
        spRecoveryPerSec: {
            m_defined: boolean;
            m_value: number | null;
        };
        maxDeployCount: {
            m_defined: boolean;
            m_value: number | null;
        };
        massLevel: {
            m_defined: boolean;
            m_value: number | null;
        };
        baseForceLevel: {
            m_defined: boolean;
            m_value: number | null;
        };
        stunImmune: {
            m_defined: boolean;
            m_value: boolean;
        };
        silenceImmune: {
            m_defined: boolean;
            m_value: boolean;
        };
        tauntLevel?: {
            m_defined: boolean;
            m_value: number | null;
        } | undefined;
        epDamageResistance?: {
            m_defined: boolean;
            m_value: number | null;
        } | undefined;
        epResistance?: {
            m_defined: boolean;
            m_value: number | null;
        } | undefined;
        sleepImmune?: {
            m_defined: boolean;
            m_value: boolean;
        } | undefined;
        frozenImmune?: {
            m_defined: boolean;
            m_value: boolean;
        } | undefined;
        levitateImmune?: {
            m_defined: boolean;
            m_value: boolean;
        } | undefined;
    }, {
        maxHp: {
            m_defined: boolean;
            m_value: number | null;
        };
        atk: {
            m_defined: boolean;
            m_value: number | null;
        };
        def: {
            m_defined: boolean;
            m_value: number | null;
        };
        magicResistance: {
            m_defined: boolean;
            m_value: number | null;
        };
        cost: {
            m_defined: boolean;
            m_value: number | null;
        };
        blockCnt: {
            m_defined: boolean;
            m_value: number | null;
        };
        moveSpeed: {
            m_defined: boolean;
            m_value: number | null;
        };
        attackSpeed: {
            m_defined: boolean;
            m_value: number | null;
        };
        baseAttackTime: {
            m_defined: boolean;
            m_value: number | null;
        };
        respawnTime: {
            m_defined: boolean;
            m_value: number | null;
        };
        hpRecoveryPerSec: {
            m_defined: boolean;
            m_value: number | null;
        };
        spRecoveryPerSec: {
            m_defined: boolean;
            m_value: number | null;
        };
        maxDeployCount: {
            m_defined: boolean;
            m_value: number | null;
        };
        massLevel: {
            m_defined: boolean;
            m_value: number | null;
        };
        baseForceLevel: {
            m_defined: boolean;
            m_value: number | null;
        };
        stunImmune: {
            m_defined: boolean;
            m_value: boolean;
        };
        silenceImmune: {
            m_defined: boolean;
            m_value: boolean;
        };
        tauntLevel?: {
            m_defined: boolean;
            m_value: number | null;
        } | undefined;
        epDamageResistance?: {
            m_defined: boolean;
            m_value: number | null;
        } | undefined;
        epResistance?: {
            m_defined: boolean;
            m_value: number | null;
        } | undefined;
        sleepImmune?: {
            m_defined: boolean;
            m_value: boolean;
        } | undefined;
        frozenImmune?: {
            m_defined: boolean;
            m_value: boolean;
        } | undefined;
        levitateImmune?: {
            m_defined: boolean;
            m_value: boolean;
        } | undefined;
    }>;
    applyWay: z.ZodUnion<[z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: string | null;
    }, {
        m_defined: boolean;
        m_value: string | null;
    }>, z.ZodUndefined]>;
    motion: z.ZodUnion<[z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: string | null;
    }, {
        m_defined: boolean;
        m_value: string | null;
    }>, z.ZodUndefined]>;
    enemyTags: z.ZodUnion<[z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: string[] | null;
    }, {
        m_defined: boolean;
        m_value: string[] | null;
    }>, z.ZodUndefined]>;
    lifePointReduce: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: number | null;
    }, {
        m_defined: boolean;
        m_value: number | null;
    }>;
    levelType: z.ZodUnion<[z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: string | null;
    }, {
        m_defined: boolean;
        m_value: string | null;
    }>, z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: number | null;
    }, {
        m_defined: boolean;
        m_value: number | null;
    }>, z.ZodUndefined]>;
    rangeRadius: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: number | null;
    }, {
        m_defined: boolean;
        m_value: number | null;
    }>;
    numOfExtraDrops: z.ZodUnion<[z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: number | null;
    }, {
        m_defined: boolean;
        m_value: number | null;
    }>, z.ZodUndefined]>;
    viewRadius: z.ZodUnion<[z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: number | null;
    }, {
        m_defined: boolean;
        m_value: number | null;
    }>, z.ZodUndefined]>;
    notCountInTotal: z.ZodUnion<[z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodBoolean;
    }, "strict", z.ZodTypeAny, {
        m_defined: boolean;
        m_value: boolean;
    }, {
        m_defined: boolean;
        m_value: boolean;
    }>, z.ZodUndefined]>;
    talentBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
        key: z.ZodString;
        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
    }, "strict", z.ZodTypeAny, {
        key: string;
        value: number | null;
        valueStr?: string | null | undefined;
    }, {
        key: string;
        value: number | null;
        valueStr?: string | null | undefined;
    }>, "many">, z.ZodNull]>;
    skills: z.ZodUnion<[z.ZodArray<z.ZodObject<{
        prefabKey: z.ZodString;
        priority: z.ZodNumber;
        cooldown: z.ZodNumber;
        initCooldown: z.ZodNumber;
        spCost: z.ZodNumber;
        blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
            valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }, {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }>, "many">, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        priority: number;
        prefabKey: string;
        cooldown: number;
        initCooldown: number;
        spCost: number;
        blackboard: {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }[] | null;
    }, {
        priority: number;
        prefabKey: string;
        cooldown: number;
        initCooldown: number;
        spCost: number;
        blackboard: {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }[] | null;
    }>, "many">, z.ZodNull]>;
    spData: z.ZodUnion<[z.ZodObject<{
        spType: z.ZodString;
        maxSp: z.ZodNumber;
        initSp: z.ZodNumber;
        increment: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        spType: string;
        maxSp: number;
        initSp: number;
        increment: number;
    }, {
        spType: string;
        maxSp: number;
        initSp: number;
        increment: number;
    }>, z.ZodNull]>;
}, "strict", z.ZodTypeAny, {
    name: {
        m_defined: boolean;
        m_value: string | null;
    };
    attributes: {
        maxHp: {
            m_defined: boolean;
            m_value: number | null;
        };
        atk: {
            m_defined: boolean;
            m_value: number | null;
        };
        def: {
            m_defined: boolean;
            m_value: number | null;
        };
        magicResistance: {
            m_defined: boolean;
            m_value: number | null;
        };
        cost: {
            m_defined: boolean;
            m_value: number | null;
        };
        blockCnt: {
            m_defined: boolean;
            m_value: number | null;
        };
        moveSpeed: {
            m_defined: boolean;
            m_value: number | null;
        };
        attackSpeed: {
            m_defined: boolean;
            m_value: number | null;
        };
        baseAttackTime: {
            m_defined: boolean;
            m_value: number | null;
        };
        respawnTime: {
            m_defined: boolean;
            m_value: number | null;
        };
        hpRecoveryPerSec: {
            m_defined: boolean;
            m_value: number | null;
        };
        spRecoveryPerSec: {
            m_defined: boolean;
            m_value: number | null;
        };
        maxDeployCount: {
            m_defined: boolean;
            m_value: number | null;
        };
        massLevel: {
            m_defined: boolean;
            m_value: number | null;
        };
        baseForceLevel: {
            m_defined: boolean;
            m_value: number | null;
        };
        stunImmune: {
            m_defined: boolean;
            m_value: boolean;
        };
        silenceImmune: {
            m_defined: boolean;
            m_value: boolean;
        };
        tauntLevel?: {
            m_defined: boolean;
            m_value: number | null;
        } | undefined;
        epDamageResistance?: {
            m_defined: boolean;
            m_value: number | null;
        } | undefined;
        epResistance?: {
            m_defined: boolean;
            m_value: number | null;
        } | undefined;
        sleepImmune?: {
            m_defined: boolean;
            m_value: boolean;
        } | undefined;
        frozenImmune?: {
            m_defined: boolean;
            m_value: boolean;
        } | undefined;
        levitateImmune?: {
            m_defined: boolean;
            m_value: boolean;
        } | undefined;
    };
    description: {
        m_defined: boolean;
        m_value: string | null;
    };
    prefabKey: {
        m_defined: boolean;
        m_value: string | null;
    };
    lifePointReduce: {
        m_defined: boolean;
        m_value: number | null;
    };
    rangeRadius: {
        m_defined: boolean;
        m_value: number | null;
    };
    talentBlackboard: {
        key: string;
        value: number | null;
        valueStr?: string | null | undefined;
    }[] | null;
    skills: {
        priority: number;
        prefabKey: string;
        cooldown: number;
        initCooldown: number;
        spCost: number;
        blackboard: {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }[] | null;
    }[] | null;
    spData: {
        spType: string;
        maxSp: number;
        initSp: number;
        increment: number;
    } | null;
    applyWay?: {
        m_defined: boolean;
        m_value: string | null;
    } | undefined;
    motion?: {
        m_defined: boolean;
        m_value: string | null;
    } | undefined;
    enemyTags?: {
        m_defined: boolean;
        m_value: string[] | null;
    } | undefined;
    levelType?: {
        m_defined: boolean;
        m_value: string | null;
    } | {
        m_defined: boolean;
        m_value: number | null;
    } | undefined;
    numOfExtraDrops?: {
        m_defined: boolean;
        m_value: number | null;
    } | undefined;
    viewRadius?: {
        m_defined: boolean;
        m_value: number | null;
    } | undefined;
    notCountInTotal?: {
        m_defined: boolean;
        m_value: boolean;
    } | undefined;
}, {
    name: {
        m_defined: boolean;
        m_value: string | null;
    };
    attributes: {
        maxHp: {
            m_defined: boolean;
            m_value: number | null;
        };
        atk: {
            m_defined: boolean;
            m_value: number | null;
        };
        def: {
            m_defined: boolean;
            m_value: number | null;
        };
        magicResistance: {
            m_defined: boolean;
            m_value: number | null;
        };
        cost: {
            m_defined: boolean;
            m_value: number | null;
        };
        blockCnt: {
            m_defined: boolean;
            m_value: number | null;
        };
        moveSpeed: {
            m_defined: boolean;
            m_value: number | null;
        };
        attackSpeed: {
            m_defined: boolean;
            m_value: number | null;
        };
        baseAttackTime: {
            m_defined: boolean;
            m_value: number | null;
        };
        respawnTime: {
            m_defined: boolean;
            m_value: number | null;
        };
        hpRecoveryPerSec: {
            m_defined: boolean;
            m_value: number | null;
        };
        spRecoveryPerSec: {
            m_defined: boolean;
            m_value: number | null;
        };
        maxDeployCount: {
            m_defined: boolean;
            m_value: number | null;
        };
        massLevel: {
            m_defined: boolean;
            m_value: number | null;
        };
        baseForceLevel: {
            m_defined: boolean;
            m_value: number | null;
        };
        stunImmune: {
            m_defined: boolean;
            m_value: boolean;
        };
        silenceImmune: {
            m_defined: boolean;
            m_value: boolean;
        };
        tauntLevel?: {
            m_defined: boolean;
            m_value: number | null;
        } | undefined;
        epDamageResistance?: {
            m_defined: boolean;
            m_value: number | null;
        } | undefined;
        epResistance?: {
            m_defined: boolean;
            m_value: number | null;
        } | undefined;
        sleepImmune?: {
            m_defined: boolean;
            m_value: boolean;
        } | undefined;
        frozenImmune?: {
            m_defined: boolean;
            m_value: boolean;
        } | undefined;
        levitateImmune?: {
            m_defined: boolean;
            m_value: boolean;
        } | undefined;
    };
    description: {
        m_defined: boolean;
        m_value: string | null;
    };
    prefabKey: {
        m_defined: boolean;
        m_value: string | null;
    };
    lifePointReduce: {
        m_defined: boolean;
        m_value: number | null;
    };
    rangeRadius: {
        m_defined: boolean;
        m_value: number | null;
    };
    talentBlackboard: {
        key: string;
        value: number | null;
        valueStr?: string | null | undefined;
    }[] | null;
    skills: {
        priority: number;
        prefabKey: string;
        cooldown: number;
        initCooldown: number;
        spCost: number;
        blackboard: {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }[] | null;
    }[] | null;
    spData: {
        spType: string;
        maxSp: number;
        initSp: number;
        increment: number;
    } | null;
    applyWay?: {
        m_defined: boolean;
        m_value: string | null;
    } | undefined;
    motion?: {
        m_defined: boolean;
        m_value: string | null;
    } | undefined;
    enemyTags?: {
        m_defined: boolean;
        m_value: string[] | null;
    } | undefined;
    levelType?: {
        m_defined: boolean;
        m_value: string | null;
    } | {
        m_defined: boolean;
        m_value: number | null;
    } | undefined;
    numOfExtraDrops?: {
        m_defined: boolean;
        m_value: number | null;
    } | undefined;
    viewRadius?: {
        m_defined: boolean;
        m_value: number | null;
    } | undefined;
    notCountInTotal?: {
        m_defined: boolean;
        m_value: boolean;
    } | undefined;
}>;
declare const LevelUpCostZod: z.ZodObject<{
    id: z.ZodString;
    count: z.ZodNumber;
    type: z.ZodString;
}, "strict", z.ZodTypeAny, {
    type: string;
    id: string;
    count: number;
}, {
    type: string;
    id: string;
    count: number;
}>;
declare const ManufactFormulaZod: z.ZodObject<{
    formulaId: z.ZodString;
    itemId: z.ZodString;
    count: z.ZodNumber;
    weight: z.ZodNumber;
    costPoint: z.ZodNumber;
    formulaType: z.ZodString;
    buffType: z.ZodString;
    costs: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        count: z.ZodNumber;
        type: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        type: string;
        id: string;
        count: number;
    }, {
        type: string;
        id: string;
        count: number;
    }>, "many">;
    requireRooms: z.ZodArray<z.ZodObject<{
        roomId: z.ZodString;
        roomLevel: z.ZodNumber;
        roomCount: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        roomId: string;
        roomLevel: number;
        roomCount: number;
    }, {
        roomId: string;
        roomLevel: number;
        roomCount: number;
    }>, "many">;
    requireStages: z.ZodArray<z.ZodObject<{
        stageId: z.ZodString;
        rank: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        stageId: string;
        rank: number;
    }, {
        stageId: string;
        rank: number;
    }>, "many">;
}, "strict", z.ZodTypeAny, {
    count: number;
    formulaId: string;
    itemId: string;
    weight: number;
    costPoint: number;
    formulaType: string;
    buffType: string;
    costs: {
        type: string;
        id: string;
        count: number;
    }[];
    requireRooms: {
        roomId: string;
        roomLevel: number;
        roomCount: number;
    }[];
    requireStages: {
        stageId: string;
        rank: number;
    }[];
}, {
    count: number;
    formulaId: string;
    itemId: string;
    weight: number;
    costPoint: number;
    formulaType: string;
    buffType: string;
    costs: {
        type: string;
        id: string;
        count: number;
    }[];
    requireRooms: {
        roomId: string;
        roomLevel: number;
        roomCount: number;
    }[];
    requireStages: {
        stageId: string;
        rank: number;
    }[];
}>;
declare const WorkshopFormulaZod: z.ZodObject<{
    sortId: z.ZodNumber;
    formulaId: z.ZodString;
    rarity: z.ZodNumber;
    itemId: z.ZodString;
    count: z.ZodNumber;
    goldCost: z.ZodNumber;
    apCost: z.ZodNumber;
    formulaType: z.ZodString;
    buffType: z.ZodString;
    extraOutcomeRate: z.ZodNumber;
    extraOutcomeGroup: z.ZodArray<z.ZodObject<{
        weight: z.ZodNumber;
        itemId: z.ZodString;
        itemCount: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        itemId: string;
        weight: number;
        itemCount: number;
    }, {
        itemId: string;
        weight: number;
        itemCount: number;
    }>, "many">;
    costs: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        count: z.ZodNumber;
        type: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        type: string;
        id: string;
        count: number;
    }, {
        type: string;
        id: string;
        count: number;
    }>, "many">;
    requireRooms: z.ZodArray<z.ZodObject<{
        roomId: z.ZodString;
        roomLevel: z.ZodNumber;
        roomCount: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        roomId: string;
        roomLevel: number;
        roomCount: number;
    }, {
        roomId: string;
        roomLevel: number;
        roomCount: number;
    }>, "many">;
    requireStages: z.ZodArray<z.ZodObject<{
        stageId: z.ZodString;
        rank: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        stageId: string;
        rank: number;
    }, {
        stageId: string;
        rank: number;
    }>, "many">;
}, "strict", z.ZodTypeAny, {
    count: number;
    formulaId: string;
    itemId: string;
    formulaType: string;
    buffType: string;
    costs: {
        type: string;
        id: string;
        count: number;
    }[];
    requireRooms: {
        roomId: string;
        roomLevel: number;
        roomCount: number;
    }[];
    requireStages: {
        stageId: string;
        rank: number;
    }[];
    sortId: number;
    rarity: number;
    goldCost: number;
    apCost: number;
    extraOutcomeRate: number;
    extraOutcomeGroup: {
        itemId: string;
        weight: number;
        itemCount: number;
    }[];
}, {
    count: number;
    formulaId: string;
    itemId: string;
    formulaType: string;
    buffType: string;
    costs: {
        type: string;
        id: string;
        count: number;
    }[];
    requireRooms: {
        roomId: string;
        roomLevel: number;
        roomCount: number;
    }[];
    requireStages: {
        stageId: string;
        rank: number;
    }[];
    sortId: number;
    rarity: number;
    goldCost: number;
    apCost: number;
    extraOutcomeRate: number;
    extraOutcomeGroup: {
        itemId: string;
        weight: number;
        itemCount: number;
    }[];
}>;
declare const OperatorUnlockCondZod: z.ZodObject<{
    phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
    level: z.ZodNumber;
}, "strict", z.ZodTypeAny, {
    level: number;
    phase: string | number;
}, {
    level: number;
    phase: string | number;
}>;
declare const LevelUpCostCondZod: z.ZodObject<{
    unlockCond: z.ZodObject<{
        phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
        level: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        level: number;
        phase: string | number;
    }, {
        level: number;
        phase: string | number;
    }>;
    lvlUpTime: z.ZodNumber;
    levelUpCost: z.ZodUnion<[z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        count: z.ZodNumber;
        type: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        type: string;
        id: string;
        count: number;
    }, {
        type: string;
        id: string;
        count: number;
    }>, "many">, z.ZodNull]>;
}, "strict", z.ZodTypeAny, {
    unlockCond: {
        level: number;
        phase: string | number;
    };
    lvlUpTime: number;
    levelUpCost: {
        type: string;
        id: string;
        count: number;
    }[] | null;
}, {
    unlockCond: {
        level: number;
        phase: string | number;
    };
    lvlUpTime: number;
    levelUpCost: {
        type: string;
        id: string;
        count: number;
    }[] | null;
}>;
declare const StageDefinesZod: z.ZodObject<{
    characterInsts: z.ZodArray<z.ZodAny, "many">;
    tokenInsts: z.ZodArray<z.ZodObject<{
        position: z.ZodObject<{
            row: z.ZodNumber;
            col: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            col: number;
            row: number;
        }, {
            col: number;
            row: number;
        }>;
        direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
        hidden: z.ZodBoolean;
        alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            level: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            key: string;
            level: number;
        }, {
            key: string;
            level: number;
        }>, "many">, z.ZodNull, z.ZodUndefined]>;
        inst: z.ZodObject<{
            characterKey: z.ZodString;
            level: z.ZodNumber;
            phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            favorPoint: z.ZodNumber;
            potentialRank: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            level: number;
            phase: string | number;
            characterKey: string;
            favorPoint: number;
            potentialRank: number;
        }, {
            level: number;
            phase: string | number;
            characterKey: string;
            favorPoint: number;
            potentialRank: number;
        }>;
        skillIndex: z.ZodNumber;
        mainSkillLvl: z.ZodNumber;
        skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
            valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }, {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }>, "many">, z.ZodNull, z.ZodUndefined]>;
    }, "strict", z.ZodTypeAny, {
        direction: string | number;
        position: {
            col: number;
            row: number;
        };
        hidden: boolean;
        alias: string | null;
        inst: {
            level: number;
            phase: string | number;
            characterKey: string;
            favorPoint: number;
            potentialRank: number;
        };
        skillIndex: number;
        mainSkillLvl: number;
        skinId: string | null;
        uniEquipIds?: {
            key: string;
            level: number;
        }[] | null | undefined;
        tmplId?: string | null | undefined;
        overrideSkillBlackboard?: {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }[] | null | undefined;
    }, {
        direction: string | number;
        position: {
            col: number;
            row: number;
        };
        hidden: boolean;
        alias: string | null;
        inst: {
            level: number;
            phase: string | number;
            characterKey: string;
            favorPoint: number;
            potentialRank: number;
        };
        skillIndex: number;
        mainSkillLvl: number;
        skinId: string | null;
        uniEquipIds?: {
            key: string;
            level: number;
        }[] | null | undefined;
        tmplId?: string | null | undefined;
        overrideSkillBlackboard?: {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }[] | null | undefined;
    }>, "many">;
    characterCards: z.ZodArray<z.ZodAny, "many">;
    tokenCards: z.ZodArray<z.ZodAny, "many">;
}, "strict", z.ZodTypeAny, {
    characterInsts: any[];
    tokenInsts: {
        direction: string | number;
        position: {
            col: number;
            row: number;
        };
        hidden: boolean;
        alias: string | null;
        inst: {
            level: number;
            phase: string | number;
            characterKey: string;
            favorPoint: number;
            potentialRank: number;
        };
        skillIndex: number;
        mainSkillLvl: number;
        skinId: string | null;
        uniEquipIds?: {
            key: string;
            level: number;
        }[] | null | undefined;
        tmplId?: string | null | undefined;
        overrideSkillBlackboard?: {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }[] | null | undefined;
    }[];
    characterCards: any[];
    tokenCards: any[];
}, {
    characterInsts: any[];
    tokenInsts: {
        direction: string | number;
        position: {
            col: number;
            row: number;
        };
        hidden: boolean;
        alias: string | null;
        inst: {
            level: number;
            phase: string | number;
            characterKey: string;
            favorPoint: number;
            potentialRank: number;
        };
        skillIndex: number;
        mainSkillLvl: number;
        skinId: string | null;
        uniEquipIds?: {
            key: string;
            level: number;
        }[] | null | undefined;
        tmplId?: string | null | undefined;
        overrideSkillBlackboard?: {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }[] | null | undefined;
    }[];
    characterCards: any[];
    tokenCards: any[];
}>;
declare const StageEffectZod: z.ZodObject<{
    key: z.ZodString;
    offset: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        z: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: number;
        y: number;
        z: number;
    }>;
    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
}, "strict", z.ZodTypeAny, {
    offset: {
        x: number;
        y: number;
        z: number;
    };
    key: string;
    direction: string | number;
}, {
    offset: {
        x: number;
        y: number;
        z: number;
    };
    key: string;
    direction: string | number;
}>;
declare const StageDataZod: z.ZodObject<{
    options: z.ZodObject<{
        characterLimit: z.ZodNumber;
        maxLifePoint: z.ZodNumber;
        initialCost: z.ZodNumber;
        maxCost: z.ZodNumber;
        costIncreaseTime: z.ZodNumber;
        moveMultiplier: z.ZodNumber;
        steeringEnabled: z.ZodBoolean;
        isTrainingLevel: z.ZodBoolean;
        isHardTrainingLevel: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
        isPredefinedCardsSelectable: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
        maxPlayTime: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
        functionDisableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
        configBlackBoard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
            valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }, {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }>, "many">, z.ZodNull, z.ZodUndefined]>;
    }, "strict", z.ZodTypeAny, {
        characterLimit: number;
        maxLifePoint: number;
        initialCost: number;
        maxCost: number;
        costIncreaseTime: number;
        moveMultiplier: number;
        steeringEnabled: boolean;
        isTrainingLevel: boolean;
        functionDisableMask: string | number;
        isHardTrainingLevel?: boolean | undefined;
        isPredefinedCardsSelectable?: boolean | undefined;
        maxPlayTime?: number | undefined;
        configBlackBoard?: {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }[] | null | undefined;
    }, {
        characterLimit: number;
        maxLifePoint: number;
        initialCost: number;
        maxCost: number;
        costIncreaseTime: number;
        moveMultiplier: number;
        steeringEnabled: boolean;
        isTrainingLevel: boolean;
        functionDisableMask: string | number;
        isHardTrainingLevel?: boolean | undefined;
        isPredefinedCardsSelectable?: boolean | undefined;
        maxPlayTime?: number | undefined;
        configBlackBoard?: {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }[] | null | undefined;
    }>;
    levelId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    mapId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    bgmEvent: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    environmentSe: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    mapData: z.ZodObject<{
        map: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
        tiles: z.ZodArray<z.ZodObject<{
            tileKey: z.ZodString;
            heightType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            buildableType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            passableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            playerSideMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
            blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }>, "many">, z.ZodNull]>;
            effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                offset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                    z: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: number;
                    y: number;
                    z: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            }, "strict", z.ZodTypeAny, {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }, {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }>, "many">, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            tileKey: string;
            heightType: string | number;
            buildableType: string | number;
            passableMask: string | number;
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            playerSideMask?: string | number | undefined;
        }, {
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            tileKey: string;
            heightType: string | number;
            buildableType: string | number;
            passableMask: string | number;
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            playerSideMask?: string | number | undefined;
        }>, "many">;
        blockEdges: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodNull]>;
        tags: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
        effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            offset: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
                z: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                x: number;
                y: number;
                z: number;
            }, {
                x: number;
                y: number;
                z: number;
            }>;
            direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
        }, "strict", z.ZodTypeAny, {
            offset: {
                x: number;
                y: number;
                z: number;
            };
            key: string;
            direction: string | number;
        }, {
            offset: {
                x: number;
                y: number;
                z: number;
            };
            key: string;
            direction: string | number;
        }>, "many">, z.ZodNull]>;
        layerRects: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
        width: z.ZodOptional<z.ZodNumber>;
        height: z.ZodOptional<z.ZodNumber>;
    }, "strict", z.ZodTypeAny, {
        map: number[][];
        tiles: {
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            tileKey: string;
            heightType: string | number;
            buildableType: string | number;
            passableMask: string | number;
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            playerSideMask?: string | number | undefined;
        }[];
        effects: {
            offset: {
                x: number;
                y: number;
                z: number;
            };
            key: string;
            direction: string | number;
        }[] | null;
        blockEdges: any[] | null;
        tags: string[] | null;
        layerRects?: null | undefined;
        width?: number | undefined;
        height?: number | undefined;
    }, {
        map: number[][];
        tiles: {
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            tileKey: string;
            heightType: string | number;
            buildableType: string | number;
            passableMask: string | number;
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            playerSideMask?: string | number | undefined;
        }[];
        effects: {
            offset: {
                x: number;
                y: number;
                z: number;
            };
            key: string;
            direction: string | number;
        }[] | null;
        blockEdges: any[] | null;
        tags: string[] | null;
        layerRects?: null | undefined;
        width?: number | undefined;
        height?: number | undefined;
    }>;
    tilesDisallowToLocate: z.ZodArray<z.ZodAny, "many">;
    runes: z.ZodUnion<[z.ZodArray<z.ZodObject<{
        difficultyMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
        key: z.ZodString;
        professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
        buildableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
        blackboard: z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
            valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }, {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }>, "many">;
    }, "strict", z.ZodTypeAny, {
        key: string;
        blackboard: {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }[];
        difficultyMask: string | number;
        buildableMask: string | number;
        professionMask?: string | number | undefined;
    }, {
        key: string;
        blackboard: {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }[];
        difficultyMask: string | number;
        buildableMask: string | number;
        professionMask?: string | number | undefined;
    }>, "many">, z.ZodNull]>;
    globalBuffs: z.ZodUnion<[z.ZodArray<z.ZodObject<{
        prefabKey: z.ZodString;
        blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
            valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }, {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }>, "many">, z.ZodNull]>;
        overrideCameraEffect: z.ZodNull;
        passProfessionMaskFlag: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
        professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
        useExtraData: z.ZodOptional<z.ZodBoolean>;
    }, "strict", z.ZodTypeAny, {
        prefabKey: string;
        blackboard: {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }[] | null;
        overrideCameraEffect: null;
        passProfessionMaskFlag?: boolean | undefined;
        professionMask?: string | number | undefined;
        useExtraData?: boolean | undefined;
    }, {
        prefabKey: string;
        blackboard: {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }[] | null;
        overrideCameraEffect: null;
        passProfessionMaskFlag?: boolean | undefined;
        professionMask?: string | number | undefined;
        useExtraData?: boolean | undefined;
    }>, "many">, z.ZodNull]>;
    routes: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        motionMode: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
        startPosition: z.ZodObject<{
            row: z.ZodNumber;
            col: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            col: number;
            row: number;
        }, {
            col: number;
            row: number;
        }>;
        endPosition: z.ZodObject<{
            row: z.ZodNumber;
            col: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            col: number;
            row: number;
        }, {
            col: number;
            row: number;
        }>;
        spawnRandomRange: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: number;
            y: number;
        }>;
        spawnOffset: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: number;
            y: number;
        }>;
        checkpoints: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            type: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            time: z.ZodNumber;
            position: z.ZodObject<{
                row: z.ZodNumber;
                col: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                col: number;
                row: number;
            }, {
                col: number;
                row: number;
            }>;
            reachOffset: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: number;
                y: number;
            }>;
            randomizeReachOffset: z.ZodBoolean;
            reachDistance: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            type: string | number;
            time: number;
            position: {
                col: number;
                row: number;
            };
            reachOffset: {
                x: number;
                y: number;
            };
            randomizeReachOffset: boolean;
            reachDistance: number;
        }, {
            type: string | number;
            time: number;
            position: {
                col: number;
                row: number;
            };
            reachOffset: {
                x: number;
                y: number;
            };
            randomizeReachOffset: boolean;
            reachDistance: number;
        }>, "many">, z.ZodNull]>;
        allowDiagonalMove: z.ZodBoolean;
        visitEveryTileCenter: z.ZodBoolean;
        visitEveryNodeCenter: z.ZodBoolean;
        visitEveryCheckPoint: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
    }, "strict", z.ZodTypeAny, {
        motionMode: string | number;
        startPosition: {
            col: number;
            row: number;
        };
        endPosition: {
            col: number;
            row: number;
        };
        spawnRandomRange: {
            x: number;
            y: number;
        };
        spawnOffset: {
            x: number;
            y: number;
        };
        checkpoints: {
            type: string | number;
            time: number;
            position: {
                col: number;
                row: number;
            };
            reachOffset: {
                x: number;
                y: number;
            };
            randomizeReachOffset: boolean;
            reachDistance: number;
        }[] | null;
        allowDiagonalMove: boolean;
        visitEveryTileCenter: boolean;
        visitEveryNodeCenter: boolean;
        visitEveryCheckPoint?: boolean | undefined;
    }, {
        motionMode: string | number;
        startPosition: {
            col: number;
            row: number;
        };
        endPosition: {
            col: number;
            row: number;
        };
        spawnRandomRange: {
            x: number;
            y: number;
        };
        spawnOffset: {
            x: number;
            y: number;
        };
        checkpoints: {
            type: string | number;
            time: number;
            position: {
                col: number;
                row: number;
            };
            reachOffset: {
                x: number;
                y: number;
            };
            randomizeReachOffset: boolean;
            reachDistance: number;
        }[] | null;
        allowDiagonalMove: boolean;
        visitEveryTileCenter: boolean;
        visitEveryNodeCenter: boolean;
        visitEveryCheckPoint?: boolean | undefined;
    }>, z.ZodNull]>, "many">;
    extraRoutes: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodUndefined]>;
    enemies: z.ZodArray<z.ZodAny, "many">;
    enemyDbRefs: z.ZodArray<z.ZodObject<{
        useDb: z.ZodBoolean;
        id: z.ZodString;
        level: z.ZodNumber;
        overwrittenData: z.ZodUnion<[z.ZodObject<{
            name: z.ZodObject<{
                m_defined: z.ZodBoolean;
                m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                m_defined: boolean;
                m_value: string | null;
            }, {
                m_defined: boolean;
                m_value: string | null;
            }>;
            description: z.ZodObject<{
                m_defined: z.ZodBoolean;
                m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                m_defined: boolean;
                m_value: string | null;
            }, {
                m_defined: boolean;
                m_value: string | null;
            }>;
            prefabKey: z.ZodObject<{
                m_defined: z.ZodBoolean;
                m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                m_defined: boolean;
                m_value: string | null;
            }, {
                m_defined: boolean;
                m_value: string | null;
            }>;
            attributes: z.ZodObject<{
                maxHp: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>;
                atk: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>;
                def: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>;
                magicResistance: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>;
                cost: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>;
                blockCnt: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>;
                moveSpeed: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>;
                attackSpeed: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>;
                baseAttackTime: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>;
                respawnTime: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>;
                hpRecoveryPerSec: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>;
                spRecoveryPerSec: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>;
                maxDeployCount: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>;
                massLevel: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>;
                baseForceLevel: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>;
                tauntLevel: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>, z.ZodUndefined]>;
                epDamageResistance: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>, z.ZodUndefined]>;
                epResistance: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>, z.ZodUndefined]>;
                stunImmune: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodBoolean;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: boolean;
                }, {
                    m_defined: boolean;
                    m_value: boolean;
                }>;
                silenceImmune: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodBoolean;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: boolean;
                }, {
                    m_defined: boolean;
                    m_value: boolean;
                }>;
                sleepImmune: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodBoolean;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: boolean;
                }, {
                    m_defined: boolean;
                    m_value: boolean;
                }>, z.ZodUndefined]>;
                frozenImmune: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodBoolean;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: boolean;
                }, {
                    m_defined: boolean;
                    m_value: boolean;
                }>, z.ZodUndefined]>;
                levitateImmune: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodBoolean;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: boolean;
                }, {
                    m_defined: boolean;
                    m_value: boolean;
                }>, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                maxHp: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                atk: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                def: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                magicResistance: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                cost: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                blockCnt: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                moveSpeed: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                attackSpeed: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                baseAttackTime: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                respawnTime: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                hpRecoveryPerSec: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                spRecoveryPerSec: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                maxDeployCount: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                massLevel: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                baseForceLevel: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                stunImmune: {
                    m_defined: boolean;
                    m_value: boolean;
                };
                silenceImmune: {
                    m_defined: boolean;
                    m_value: boolean;
                };
                tauntLevel?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                epDamageResistance?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                epResistance?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                sleepImmune?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
                frozenImmune?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
                levitateImmune?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            }, {
                maxHp: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                atk: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                def: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                magicResistance: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                cost: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                blockCnt: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                moveSpeed: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                attackSpeed: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                baseAttackTime: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                respawnTime: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                hpRecoveryPerSec: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                spRecoveryPerSec: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                maxDeployCount: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                massLevel: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                baseForceLevel: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                stunImmune: {
                    m_defined: boolean;
                    m_value: boolean;
                };
                silenceImmune: {
                    m_defined: boolean;
                    m_value: boolean;
                };
                tauntLevel?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                epDamageResistance?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                epResistance?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                sleepImmune?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
                frozenImmune?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
                levitateImmune?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            }>;
            applyWay: z.ZodUnion<[z.ZodObject<{
                m_defined: z.ZodBoolean;
                m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                m_defined: boolean;
                m_value: string | null;
            }, {
                m_defined: boolean;
                m_value: string | null;
            }>, z.ZodUndefined]>;
            motion: z.ZodUnion<[z.ZodObject<{
                m_defined: z.ZodBoolean;
                m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                m_defined: boolean;
                m_value: string | null;
            }, {
                m_defined: boolean;
                m_value: string | null;
            }>, z.ZodUndefined]>;
            enemyTags: z.ZodUnion<[z.ZodObject<{
                m_defined: z.ZodBoolean;
                m_value: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                m_defined: boolean;
                m_value: string[] | null;
            }, {
                m_defined: boolean;
                m_value: string[] | null;
            }>, z.ZodUndefined]>;
            lifePointReduce: z.ZodObject<{
                m_defined: z.ZodBoolean;
                m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                m_defined: boolean;
                m_value: number | null;
            }, {
                m_defined: boolean;
                m_value: number | null;
            }>;
            levelType: z.ZodUnion<[z.ZodObject<{
                m_defined: z.ZodBoolean;
                m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                m_defined: boolean;
                m_value: string | null;
            }, {
                m_defined: boolean;
                m_value: string | null;
            }>, z.ZodObject<{
                m_defined: z.ZodBoolean;
                m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                m_defined: boolean;
                m_value: number | null;
            }, {
                m_defined: boolean;
                m_value: number | null;
            }>, z.ZodUndefined]>;
            rangeRadius: z.ZodObject<{
                m_defined: z.ZodBoolean;
                m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                m_defined: boolean;
                m_value: number | null;
            }, {
                m_defined: boolean;
                m_value: number | null;
            }>;
            numOfExtraDrops: z.ZodUnion<[z.ZodObject<{
                m_defined: z.ZodBoolean;
                m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                m_defined: boolean;
                m_value: number | null;
            }, {
                m_defined: boolean;
                m_value: number | null;
            }>, z.ZodUndefined]>;
            viewRadius: z.ZodUnion<[z.ZodObject<{
                m_defined: z.ZodBoolean;
                m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                m_defined: boolean;
                m_value: number | null;
            }, {
                m_defined: boolean;
                m_value: number | null;
            }>, z.ZodUndefined]>;
            notCountInTotal: z.ZodUnion<[z.ZodObject<{
                m_defined: z.ZodBoolean;
                m_value: z.ZodBoolean;
            }, "strict", z.ZodTypeAny, {
                m_defined: boolean;
                m_value: boolean;
            }, {
                m_defined: boolean;
                m_value: boolean;
            }>, z.ZodUndefined]>;
            talentBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }>, "many">, z.ZodNull]>;
            skills: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                prefabKey: z.ZodString;
                priority: z.ZodNumber;
                cooldown: z.ZodNumber;
                initCooldown: z.ZodNumber;
                spCost: z.ZodNumber;
                blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                priority: number;
                prefabKey: string;
                cooldown: number;
                initCooldown: number;
                spCost: number;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
            }, {
                priority: number;
                prefabKey: string;
                cooldown: number;
                initCooldown: number;
                spCost: number;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
            }>, "many">, z.ZodNull]>;
            spData: z.ZodUnion<[z.ZodObject<{
                spType: z.ZodString;
                maxSp: z.ZodNumber;
                initSp: z.ZodNumber;
                increment: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                spType: string;
                maxSp: number;
                initSp: number;
                increment: number;
            }, {
                spType: string;
                maxSp: number;
                initSp: number;
                increment: number;
            }>, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            name: {
                m_defined: boolean;
                m_value: string | null;
            };
            attributes: {
                maxHp: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                atk: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                def: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                magicResistance: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                cost: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                blockCnt: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                moveSpeed: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                attackSpeed: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                baseAttackTime: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                respawnTime: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                hpRecoveryPerSec: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                spRecoveryPerSec: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                maxDeployCount: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                massLevel: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                baseForceLevel: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                stunImmune: {
                    m_defined: boolean;
                    m_value: boolean;
                };
                silenceImmune: {
                    m_defined: boolean;
                    m_value: boolean;
                };
                tauntLevel?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                epDamageResistance?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                epResistance?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                sleepImmune?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
                frozenImmune?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
                levitateImmune?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            };
            description: {
                m_defined: boolean;
                m_value: string | null;
            };
            prefabKey: {
                m_defined: boolean;
                m_value: string | null;
            };
            lifePointReduce: {
                m_defined: boolean;
                m_value: number | null;
            };
            rangeRadius: {
                m_defined: boolean;
                m_value: number | null;
            };
            talentBlackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            skills: {
                priority: number;
                prefabKey: string;
                cooldown: number;
                initCooldown: number;
                spCost: number;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
            }[] | null;
            spData: {
                spType: string;
                maxSp: number;
                initSp: number;
                increment: number;
            } | null;
            applyWay?: {
                m_defined: boolean;
                m_value: string | null;
            } | undefined;
            motion?: {
                m_defined: boolean;
                m_value: string | null;
            } | undefined;
            enemyTags?: {
                m_defined: boolean;
                m_value: string[] | null;
            } | undefined;
            levelType?: {
                m_defined: boolean;
                m_value: string | null;
            } | {
                m_defined: boolean;
                m_value: number | null;
            } | undefined;
            numOfExtraDrops?: {
                m_defined: boolean;
                m_value: number | null;
            } | undefined;
            viewRadius?: {
                m_defined: boolean;
                m_value: number | null;
            } | undefined;
            notCountInTotal?: {
                m_defined: boolean;
                m_value: boolean;
            } | undefined;
        }, {
            name: {
                m_defined: boolean;
                m_value: string | null;
            };
            attributes: {
                maxHp: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                atk: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                def: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                magicResistance: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                cost: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                blockCnt: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                moveSpeed: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                attackSpeed: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                baseAttackTime: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                respawnTime: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                hpRecoveryPerSec: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                spRecoveryPerSec: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                maxDeployCount: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                massLevel: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                baseForceLevel: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                stunImmune: {
                    m_defined: boolean;
                    m_value: boolean;
                };
                silenceImmune: {
                    m_defined: boolean;
                    m_value: boolean;
                };
                tauntLevel?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                epDamageResistance?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                epResistance?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                sleepImmune?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
                frozenImmune?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
                levitateImmune?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            };
            description: {
                m_defined: boolean;
                m_value: string | null;
            };
            prefabKey: {
                m_defined: boolean;
                m_value: string | null;
            };
            lifePointReduce: {
                m_defined: boolean;
                m_value: number | null;
            };
            rangeRadius: {
                m_defined: boolean;
                m_value: number | null;
            };
            talentBlackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            skills: {
                priority: number;
                prefabKey: string;
                cooldown: number;
                initCooldown: number;
                spCost: number;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
            }[] | null;
            spData: {
                spType: string;
                maxSp: number;
                initSp: number;
                increment: number;
            } | null;
            applyWay?: {
                m_defined: boolean;
                m_value: string | null;
            } | undefined;
            motion?: {
                m_defined: boolean;
                m_value: string | null;
            } | undefined;
            enemyTags?: {
                m_defined: boolean;
                m_value: string[] | null;
            } | undefined;
            levelType?: {
                m_defined: boolean;
                m_value: string | null;
            } | {
                m_defined: boolean;
                m_value: number | null;
            } | undefined;
            numOfExtraDrops?: {
                m_defined: boolean;
                m_value: number | null;
            } | undefined;
            viewRadius?: {
                m_defined: boolean;
                m_value: number | null;
            } | undefined;
            notCountInTotal?: {
                m_defined: boolean;
                m_value: boolean;
            } | undefined;
        }>, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        id: string;
        level: number;
        useDb: boolean;
        overwrittenData: {
            name: {
                m_defined: boolean;
                m_value: string | null;
            };
            attributes: {
                maxHp: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                atk: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                def: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                magicResistance: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                cost: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                blockCnt: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                moveSpeed: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                attackSpeed: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                baseAttackTime: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                respawnTime: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                hpRecoveryPerSec: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                spRecoveryPerSec: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                maxDeployCount: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                massLevel: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                baseForceLevel: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                stunImmune: {
                    m_defined: boolean;
                    m_value: boolean;
                };
                silenceImmune: {
                    m_defined: boolean;
                    m_value: boolean;
                };
                tauntLevel?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                epDamageResistance?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                epResistance?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                sleepImmune?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
                frozenImmune?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
                levitateImmune?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            };
            description: {
                m_defined: boolean;
                m_value: string | null;
            };
            prefabKey: {
                m_defined: boolean;
                m_value: string | null;
            };
            lifePointReduce: {
                m_defined: boolean;
                m_value: number | null;
            };
            rangeRadius: {
                m_defined: boolean;
                m_value: number | null;
            };
            talentBlackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            skills: {
                priority: number;
                prefabKey: string;
                cooldown: number;
                initCooldown: number;
                spCost: number;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
            }[] | null;
            spData: {
                spType: string;
                maxSp: number;
                initSp: number;
                increment: number;
            } | null;
            applyWay?: {
                m_defined: boolean;
                m_value: string | null;
            } | undefined;
            motion?: {
                m_defined: boolean;
                m_value: string | null;
            } | undefined;
            enemyTags?: {
                m_defined: boolean;
                m_value: string[] | null;
            } | undefined;
            levelType?: {
                m_defined: boolean;
                m_value: string | null;
            } | {
                m_defined: boolean;
                m_value: number | null;
            } | undefined;
            numOfExtraDrops?: {
                m_defined: boolean;
                m_value: number | null;
            } | undefined;
            viewRadius?: {
                m_defined: boolean;
                m_value: number | null;
            } | undefined;
            notCountInTotal?: {
                m_defined: boolean;
                m_value: boolean;
            } | undefined;
        } | null;
    }, {
        id: string;
        level: number;
        useDb: boolean;
        overwrittenData: {
            name: {
                m_defined: boolean;
                m_value: string | null;
            };
            attributes: {
                maxHp: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                atk: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                def: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                magicResistance: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                cost: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                blockCnt: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                moveSpeed: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                attackSpeed: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                baseAttackTime: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                respawnTime: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                hpRecoveryPerSec: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                spRecoveryPerSec: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                maxDeployCount: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                massLevel: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                baseForceLevel: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                stunImmune: {
                    m_defined: boolean;
                    m_value: boolean;
                };
                silenceImmune: {
                    m_defined: boolean;
                    m_value: boolean;
                };
                tauntLevel?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                epDamageResistance?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                epResistance?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                sleepImmune?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
                frozenImmune?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
                levitateImmune?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            };
            description: {
                m_defined: boolean;
                m_value: string | null;
            };
            prefabKey: {
                m_defined: boolean;
                m_value: string | null;
            };
            lifePointReduce: {
                m_defined: boolean;
                m_value: number | null;
            };
            rangeRadius: {
                m_defined: boolean;
                m_value: number | null;
            };
            talentBlackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            skills: {
                priority: number;
                prefabKey: string;
                cooldown: number;
                initCooldown: number;
                spCost: number;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
            }[] | null;
            spData: {
                spType: string;
                maxSp: number;
                initSp: number;
                increment: number;
            } | null;
            applyWay?: {
                m_defined: boolean;
                m_value: string | null;
            } | undefined;
            motion?: {
                m_defined: boolean;
                m_value: string | null;
            } | undefined;
            enemyTags?: {
                m_defined: boolean;
                m_value: string[] | null;
            } | undefined;
            levelType?: {
                m_defined: boolean;
                m_value: string | null;
            } | {
                m_defined: boolean;
                m_value: number | null;
            } | undefined;
            numOfExtraDrops?: {
                m_defined: boolean;
                m_value: number | null;
            } | undefined;
            viewRadius?: {
                m_defined: boolean;
                m_value: number | null;
            } | undefined;
            notCountInTotal?: {
                m_defined: boolean;
                m_value: boolean;
            } | undefined;
        } | null;
    }>, "many">;
    waves: z.ZodArray<z.ZodObject<{
        preDelay: z.ZodNumber;
        postDelay: z.ZodNumber;
        maxTimeWaitingForNextWave: z.ZodNumber;
        fragments: z.ZodArray<z.ZodObject<{
            preDelay: z.ZodNumber;
            actions: z.ZodArray<z.ZodObject<{
                actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                managedByScheduler: z.ZodBoolean;
                key: z.ZodString;
                count: z.ZodNumber;
                preDelay: z.ZodNumber;
                interval: z.ZodNumber;
                routeIndex: z.ZodNumber;
                blockFragment: z.ZodBoolean;
                autoPreviewRoute: z.ZodBoolean;
                autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                interval: number;
                key: string;
                count: number;
                actionType: string | number;
                managedByScheduler: boolean;
                preDelay: number;
                routeIndex: number;
                blockFragment: boolean;
                autoPreviewRoute: boolean;
                isUnharmfulAndAlwaysCountAsKilled: boolean;
                hiddenGroup: string | null;
                autoDisplayEnemyInfo?: boolean | undefined;
                randomSpawnGroupKey?: string | null | undefined;
                randomSpawnGroupPackKey?: string | null | undefined;
                randomType?: string | number | undefined;
                weight?: number | undefined;
                dontBlockWave?: boolean | undefined;
                isValid?: boolean | undefined;
                extraMeta?: null | undefined;
            }, {
                interval: number;
                key: string;
                count: number;
                actionType: string | number;
                managedByScheduler: boolean;
                preDelay: number;
                routeIndex: number;
                blockFragment: boolean;
                autoPreviewRoute: boolean;
                isUnharmfulAndAlwaysCountAsKilled: boolean;
                hiddenGroup: string | null;
                autoDisplayEnemyInfo?: boolean | undefined;
                randomSpawnGroupKey?: string | null | undefined;
                randomSpawnGroupPackKey?: string | null | undefined;
                randomType?: string | number | undefined;
                weight?: number | undefined;
                dontBlockWave?: boolean | undefined;
                isValid?: boolean | undefined;
                extraMeta?: null | undefined;
            }>, "many">;
            name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strict", z.ZodTypeAny, {
            preDelay: number;
            actions: {
                interval: number;
                key: string;
                count: number;
                actionType: string | number;
                managedByScheduler: boolean;
                preDelay: number;
                routeIndex: number;
                blockFragment: boolean;
                autoPreviewRoute: boolean;
                isUnharmfulAndAlwaysCountAsKilled: boolean;
                hiddenGroup: string | null;
                autoDisplayEnemyInfo?: boolean | undefined;
                randomSpawnGroupKey?: string | null | undefined;
                randomSpawnGroupPackKey?: string | null | undefined;
                randomType?: string | number | undefined;
                weight?: number | undefined;
                dontBlockWave?: boolean | undefined;
                isValid?: boolean | undefined;
                extraMeta?: null | undefined;
            }[];
            name?: string | null | undefined;
        }, {
            preDelay: number;
            actions: {
                interval: number;
                key: string;
                count: number;
                actionType: string | number;
                managedByScheduler: boolean;
                preDelay: number;
                routeIndex: number;
                blockFragment: boolean;
                autoPreviewRoute: boolean;
                isUnharmfulAndAlwaysCountAsKilled: boolean;
                hiddenGroup: string | null;
                autoDisplayEnemyInfo?: boolean | undefined;
                randomSpawnGroupKey?: string | null | undefined;
                randomSpawnGroupPackKey?: string | null | undefined;
                randomType?: string | number | undefined;
                weight?: number | undefined;
                dontBlockWave?: boolean | undefined;
                isValid?: boolean | undefined;
                extraMeta?: null | undefined;
            }[];
            name?: string | null | undefined;
        }>, "many">;
        advancedWaveTag: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strict", z.ZodTypeAny, {
        preDelay: number;
        postDelay: number;
        maxTimeWaitingForNextWave: number;
        fragments: {
            preDelay: number;
            actions: {
                interval: number;
                key: string;
                count: number;
                actionType: string | number;
                managedByScheduler: boolean;
                preDelay: number;
                routeIndex: number;
                blockFragment: boolean;
                autoPreviewRoute: boolean;
                isUnharmfulAndAlwaysCountAsKilled: boolean;
                hiddenGroup: string | null;
                autoDisplayEnemyInfo?: boolean | undefined;
                randomSpawnGroupKey?: string | null | undefined;
                randomSpawnGroupPackKey?: string | null | undefined;
                randomType?: string | number | undefined;
                weight?: number | undefined;
                dontBlockWave?: boolean | undefined;
                isValid?: boolean | undefined;
                extraMeta?: null | undefined;
            }[];
            name?: string | null | undefined;
        }[];
        advancedWaveTag?: string | null | undefined;
        name?: string | null | undefined;
    }, {
        preDelay: number;
        postDelay: number;
        maxTimeWaitingForNextWave: number;
        fragments: {
            preDelay: number;
            actions: {
                interval: number;
                key: string;
                count: number;
                actionType: string | number;
                managedByScheduler: boolean;
                preDelay: number;
                routeIndex: number;
                blockFragment: boolean;
                autoPreviewRoute: boolean;
                isUnharmfulAndAlwaysCountAsKilled: boolean;
                hiddenGroup: string | null;
                autoDisplayEnemyInfo?: boolean | undefined;
                randomSpawnGroupKey?: string | null | undefined;
                randomSpawnGroupPackKey?: string | null | undefined;
                randomType?: string | number | undefined;
                weight?: number | undefined;
                dontBlockWave?: boolean | undefined;
                isValid?: boolean | undefined;
                extraMeta?: null | undefined;
            }[];
            name?: string | null | undefined;
        }[];
        advancedWaveTag?: string | null | undefined;
        name?: string | null | undefined;
    }>, "many">;
    branches: z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodObject<{
        phases: z.ZodArray<z.ZodObject<{
            preDelay: z.ZodNumber;
            actions: z.ZodArray<z.ZodObject<{
                actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                managedByScheduler: z.ZodBoolean;
                key: z.ZodString;
                count: z.ZodNumber;
                preDelay: z.ZodNumber;
                interval: z.ZodNumber;
                routeIndex: z.ZodNumber;
                blockFragment: z.ZodBoolean;
                autoPreviewRoute: z.ZodBoolean;
                autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                interval: number;
                key: string;
                count: number;
                actionType: string | number;
                managedByScheduler: boolean;
                preDelay: number;
                routeIndex: number;
                blockFragment: boolean;
                autoPreviewRoute: boolean;
                isUnharmfulAndAlwaysCountAsKilled: boolean;
                hiddenGroup: string | null;
                autoDisplayEnemyInfo?: boolean | undefined;
                randomSpawnGroupKey?: string | null | undefined;
                randomSpawnGroupPackKey?: string | null | undefined;
                randomType?: string | number | undefined;
                weight?: number | undefined;
                dontBlockWave?: boolean | undefined;
                isValid?: boolean | undefined;
                extraMeta?: null | undefined;
            }, {
                interval: number;
                key: string;
                count: number;
                actionType: string | number;
                managedByScheduler: boolean;
                preDelay: number;
                routeIndex: number;
                blockFragment: boolean;
                autoPreviewRoute: boolean;
                isUnharmfulAndAlwaysCountAsKilled: boolean;
                hiddenGroup: string | null;
                autoDisplayEnemyInfo?: boolean | undefined;
                randomSpawnGroupKey?: string | null | undefined;
                randomSpawnGroupPackKey?: string | null | undefined;
                randomType?: string | number | undefined;
                weight?: number | undefined;
                dontBlockWave?: boolean | undefined;
                isValid?: boolean | undefined;
                extraMeta?: null | undefined;
            }>, "many">;
            m_randomActionGroups: z.ZodOptional<z.ZodNull>;
            m_actionWithRandomSpawn: z.ZodOptional<z.ZodNull>;
            m_validActionPackKeys: z.ZodOptional<z.ZodNull>;
        }, "strict", z.ZodTypeAny, {
            preDelay: number;
            actions: {
                interval: number;
                key: string;
                count: number;
                actionType: string | number;
                managedByScheduler: boolean;
                preDelay: number;
                routeIndex: number;
                blockFragment: boolean;
                autoPreviewRoute: boolean;
                isUnharmfulAndAlwaysCountAsKilled: boolean;
                hiddenGroup: string | null;
                autoDisplayEnemyInfo?: boolean | undefined;
                randomSpawnGroupKey?: string | null | undefined;
                randomSpawnGroupPackKey?: string | null | undefined;
                randomType?: string | number | undefined;
                weight?: number | undefined;
                dontBlockWave?: boolean | undefined;
                isValid?: boolean | undefined;
                extraMeta?: null | undefined;
            }[];
            m_randomActionGroups?: null | undefined;
            m_actionWithRandomSpawn?: null | undefined;
            m_validActionPackKeys?: null | undefined;
        }, {
            preDelay: number;
            actions: {
                interval: number;
                key: string;
                count: number;
                actionType: string | number;
                managedByScheduler: boolean;
                preDelay: number;
                routeIndex: number;
                blockFragment: boolean;
                autoPreviewRoute: boolean;
                isUnharmfulAndAlwaysCountAsKilled: boolean;
                hiddenGroup: string | null;
                autoDisplayEnemyInfo?: boolean | undefined;
                randomSpawnGroupKey?: string | null | undefined;
                randomSpawnGroupPackKey?: string | null | undefined;
                randomType?: string | number | undefined;
                weight?: number | undefined;
                dontBlockWave?: boolean | undefined;
                isValid?: boolean | undefined;
                extraMeta?: null | undefined;
            }[];
            m_randomActionGroups?: null | undefined;
            m_actionWithRandomSpawn?: null | undefined;
            m_validActionPackKeys?: null | undefined;
        }>, "many">;
    }, "strict", z.ZodTypeAny, {
        phases: {
            preDelay: number;
            actions: {
                interval: number;
                key: string;
                count: number;
                actionType: string | number;
                managedByScheduler: boolean;
                preDelay: number;
                routeIndex: number;
                blockFragment: boolean;
                autoPreviewRoute: boolean;
                isUnharmfulAndAlwaysCountAsKilled: boolean;
                hiddenGroup: string | null;
                autoDisplayEnemyInfo?: boolean | undefined;
                randomSpawnGroupKey?: string | null | undefined;
                randomSpawnGroupPackKey?: string | null | undefined;
                randomType?: string | number | undefined;
                weight?: number | undefined;
                dontBlockWave?: boolean | undefined;
                isValid?: boolean | undefined;
                extraMeta?: null | undefined;
            }[];
            m_randomActionGroups?: null | undefined;
            m_actionWithRandomSpawn?: null | undefined;
            m_validActionPackKeys?: null | undefined;
        }[];
    }, {
        phases: {
            preDelay: number;
            actions: {
                interval: number;
                key: string;
                count: number;
                actionType: string | number;
                managedByScheduler: boolean;
                preDelay: number;
                routeIndex: number;
                blockFragment: boolean;
                autoPreviewRoute: boolean;
                isUnharmfulAndAlwaysCountAsKilled: boolean;
                hiddenGroup: string | null;
                autoDisplayEnemyInfo?: boolean | undefined;
                randomSpawnGroupKey?: string | null | undefined;
                randomSpawnGroupPackKey?: string | null | undefined;
                randomType?: string | number | undefined;
                weight?: number | undefined;
                dontBlockWave?: boolean | undefined;
                isValid?: boolean | undefined;
                extraMeta?: null | undefined;
            }[];
            m_randomActionGroups?: null | undefined;
            m_actionWithRandomSpawn?: null | undefined;
            m_validActionPackKeys?: null | undefined;
        }[];
    }>>, z.ZodNull]>;
    predefines: z.ZodUnion<[z.ZodObject<{
        characterInsts: z.ZodArray<z.ZodAny, "many">;
        tokenInsts: z.ZodArray<z.ZodObject<{
            position: z.ZodObject<{
                row: z.ZodNumber;
                col: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                col: number;
                row: number;
            }, {
                col: number;
                row: number;
            }>;
            direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            hidden: z.ZodBoolean;
            alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                level: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                key: string;
                level: number;
            }, {
                key: string;
                level: number;
            }>, "many">, z.ZodNull, z.ZodUndefined]>;
            inst: z.ZodObject<{
                characterKey: z.ZodString;
                level: z.ZodNumber;
                phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                favorPoint: z.ZodNumber;
                potentialRank: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                level: number;
                phase: string | number;
                characterKey: string;
                favorPoint: number;
                potentialRank: number;
            }, {
                level: number;
                phase: string | number;
                characterKey: string;
                favorPoint: number;
                potentialRank: number;
            }>;
            skillIndex: z.ZodNumber;
            mainSkillLvl: z.ZodNumber;
            skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }>, "many">, z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            direction: string | number;
            position: {
                col: number;
                row: number;
            };
            hidden: boolean;
            alias: string | null;
            inst: {
                level: number;
                phase: string | number;
                characterKey: string;
                favorPoint: number;
                potentialRank: number;
            };
            skillIndex: number;
            mainSkillLvl: number;
            skinId: string | null;
            uniEquipIds?: {
                key: string;
                level: number;
            }[] | null | undefined;
            tmplId?: string | null | undefined;
            overrideSkillBlackboard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        }, {
            direction: string | number;
            position: {
                col: number;
                row: number;
            };
            hidden: boolean;
            alias: string | null;
            inst: {
                level: number;
                phase: string | number;
                characterKey: string;
                favorPoint: number;
                potentialRank: number;
            };
            skillIndex: number;
            mainSkillLvl: number;
            skinId: string | null;
            uniEquipIds?: {
                key: string;
                level: number;
            }[] | null | undefined;
            tmplId?: string | null | undefined;
            overrideSkillBlackboard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        }>, "many">;
        characterCards: z.ZodArray<z.ZodAny, "many">;
        tokenCards: z.ZodArray<z.ZodAny, "many">;
    }, "strict", z.ZodTypeAny, {
        characterInsts: any[];
        tokenInsts: {
            direction: string | number;
            position: {
                col: number;
                row: number;
            };
            hidden: boolean;
            alias: string | null;
            inst: {
                level: number;
                phase: string | number;
                characterKey: string;
                favorPoint: number;
                potentialRank: number;
            };
            skillIndex: number;
            mainSkillLvl: number;
            skinId: string | null;
            uniEquipIds?: {
                key: string;
                level: number;
            }[] | null | undefined;
            tmplId?: string | null | undefined;
            overrideSkillBlackboard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        }[];
        characterCards: any[];
        tokenCards: any[];
    }, {
        characterInsts: any[];
        tokenInsts: {
            direction: string | number;
            position: {
                col: number;
                row: number;
            };
            hidden: boolean;
            alias: string | null;
            inst: {
                level: number;
                phase: string | number;
                characterKey: string;
                favorPoint: number;
                potentialRank: number;
            };
            skillIndex: number;
            mainSkillLvl: number;
            skinId: string | null;
            uniEquipIds?: {
                key: string;
                level: number;
            }[] | null | undefined;
            tmplId?: string | null | undefined;
            overrideSkillBlackboard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        }[];
        characterCards: any[];
        tokenCards: any[];
    }>, z.ZodNull]>;
    hardPredefines: z.ZodUnion<[z.ZodObject<{
        characterInsts: z.ZodArray<z.ZodAny, "many">;
        tokenInsts: z.ZodArray<z.ZodObject<{
            position: z.ZodObject<{
                row: z.ZodNumber;
                col: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                col: number;
                row: number;
            }, {
                col: number;
                row: number;
            }>;
            direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            hidden: z.ZodBoolean;
            alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                level: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                key: string;
                level: number;
            }, {
                key: string;
                level: number;
            }>, "many">, z.ZodNull, z.ZodUndefined]>;
            inst: z.ZodObject<{
                characterKey: z.ZodString;
                level: z.ZodNumber;
                phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                favorPoint: z.ZodNumber;
                potentialRank: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                level: number;
                phase: string | number;
                characterKey: string;
                favorPoint: number;
                potentialRank: number;
            }, {
                level: number;
                phase: string | number;
                characterKey: string;
                favorPoint: number;
                potentialRank: number;
            }>;
            skillIndex: z.ZodNumber;
            mainSkillLvl: z.ZodNumber;
            skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }>, "many">, z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            direction: string | number;
            position: {
                col: number;
                row: number;
            };
            hidden: boolean;
            alias: string | null;
            inst: {
                level: number;
                phase: string | number;
                characterKey: string;
                favorPoint: number;
                potentialRank: number;
            };
            skillIndex: number;
            mainSkillLvl: number;
            skinId: string | null;
            uniEquipIds?: {
                key: string;
                level: number;
            }[] | null | undefined;
            tmplId?: string | null | undefined;
            overrideSkillBlackboard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        }, {
            direction: string | number;
            position: {
                col: number;
                row: number;
            };
            hidden: boolean;
            alias: string | null;
            inst: {
                level: number;
                phase: string | number;
                characterKey: string;
                favorPoint: number;
                potentialRank: number;
            };
            skillIndex: number;
            mainSkillLvl: number;
            skinId: string | null;
            uniEquipIds?: {
                key: string;
                level: number;
            }[] | null | undefined;
            tmplId?: string | null | undefined;
            overrideSkillBlackboard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        }>, "many">;
        characterCards: z.ZodArray<z.ZodAny, "many">;
        tokenCards: z.ZodArray<z.ZodAny, "many">;
    }, "strict", z.ZodTypeAny, {
        characterInsts: any[];
        tokenInsts: {
            direction: string | number;
            position: {
                col: number;
                row: number;
            };
            hidden: boolean;
            alias: string | null;
            inst: {
                level: number;
                phase: string | number;
                characterKey: string;
                favorPoint: number;
                potentialRank: number;
            };
            skillIndex: number;
            mainSkillLvl: number;
            skinId: string | null;
            uniEquipIds?: {
                key: string;
                level: number;
            }[] | null | undefined;
            tmplId?: string | null | undefined;
            overrideSkillBlackboard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        }[];
        characterCards: any[];
        tokenCards: any[];
    }, {
        characterInsts: any[];
        tokenInsts: {
            direction: string | number;
            position: {
                col: number;
                row: number;
            };
            hidden: boolean;
            alias: string | null;
            inst: {
                level: number;
                phase: string | number;
                characterKey: string;
                favorPoint: number;
                potentialRank: number;
            };
            skillIndex: number;
            mainSkillLvl: number;
            skinId: string | null;
            uniEquipIds?: {
                key: string;
                level: number;
            }[] | null | undefined;
            tmplId?: string | null | undefined;
            overrideSkillBlackboard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        }[];
        characterCards: any[];
        tokenCards: any[];
    }>, z.ZodNull, z.ZodUndefined]>;
    excludeCharIdList: z.ZodNull;
    randomSeed: z.ZodNumber;
    operaConfig: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
    runtimeData: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
}, "strict", z.ZodTypeAny, {
    options: {
        characterLimit: number;
        maxLifePoint: number;
        initialCost: number;
        maxCost: number;
        costIncreaseTime: number;
        moveMultiplier: number;
        steeringEnabled: boolean;
        isTrainingLevel: boolean;
        functionDisableMask: string | number;
        isHardTrainingLevel?: boolean | undefined;
        isPredefinedCardsSelectable?: boolean | undefined;
        maxPlayTime?: number | undefined;
        configBlackBoard?: {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }[] | null | undefined;
    };
    levelId: string | null;
    mapId: string | null;
    bgmEvent: string | null;
    environmentSe: string | null;
    mapData: {
        map: number[][];
        tiles: {
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            tileKey: string;
            heightType: string | number;
            buildableType: string | number;
            passableMask: string | number;
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            playerSideMask?: string | number | undefined;
        }[];
        effects: {
            offset: {
                x: number;
                y: number;
                z: number;
            };
            key: string;
            direction: string | number;
        }[] | null;
        blockEdges: any[] | null;
        tags: string[] | null;
        layerRects?: null | undefined;
        width?: number | undefined;
        height?: number | undefined;
    };
    tilesDisallowToLocate: any[];
    runes: {
        key: string;
        blackboard: {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }[];
        difficultyMask: string | number;
        buildableMask: string | number;
        professionMask?: string | number | undefined;
    }[] | null;
    globalBuffs: {
        prefabKey: string;
        blackboard: {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }[] | null;
        overrideCameraEffect: null;
        passProfessionMaskFlag?: boolean | undefined;
        professionMask?: string | number | undefined;
        useExtraData?: boolean | undefined;
    }[] | null;
    routes: ({
        motionMode: string | number;
        startPosition: {
            col: number;
            row: number;
        };
        endPosition: {
            col: number;
            row: number;
        };
        spawnRandomRange: {
            x: number;
            y: number;
        };
        spawnOffset: {
            x: number;
            y: number;
        };
        checkpoints: {
            type: string | number;
            time: number;
            position: {
                col: number;
                row: number;
            };
            reachOffset: {
                x: number;
                y: number;
            };
            randomizeReachOffset: boolean;
            reachDistance: number;
        }[] | null;
        allowDiagonalMove: boolean;
        visitEveryTileCenter: boolean;
        visitEveryNodeCenter: boolean;
        visitEveryCheckPoint?: boolean | undefined;
    } | null)[];
    enemies: any[];
    enemyDbRefs: {
        id: string;
        level: number;
        useDb: boolean;
        overwrittenData: {
            name: {
                m_defined: boolean;
                m_value: string | null;
            };
            attributes: {
                maxHp: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                atk: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                def: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                magicResistance: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                cost: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                blockCnt: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                moveSpeed: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                attackSpeed: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                baseAttackTime: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                respawnTime: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                hpRecoveryPerSec: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                spRecoveryPerSec: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                maxDeployCount: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                massLevel: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                baseForceLevel: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                stunImmune: {
                    m_defined: boolean;
                    m_value: boolean;
                };
                silenceImmune: {
                    m_defined: boolean;
                    m_value: boolean;
                };
                tauntLevel?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                epDamageResistance?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                epResistance?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                sleepImmune?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
                frozenImmune?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
                levitateImmune?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            };
            description: {
                m_defined: boolean;
                m_value: string | null;
            };
            prefabKey: {
                m_defined: boolean;
                m_value: string | null;
            };
            lifePointReduce: {
                m_defined: boolean;
                m_value: number | null;
            };
            rangeRadius: {
                m_defined: boolean;
                m_value: number | null;
            };
            talentBlackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            skills: {
                priority: number;
                prefabKey: string;
                cooldown: number;
                initCooldown: number;
                spCost: number;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
            }[] | null;
            spData: {
                spType: string;
                maxSp: number;
                initSp: number;
                increment: number;
            } | null;
            applyWay?: {
                m_defined: boolean;
                m_value: string | null;
            } | undefined;
            motion?: {
                m_defined: boolean;
                m_value: string | null;
            } | undefined;
            enemyTags?: {
                m_defined: boolean;
                m_value: string[] | null;
            } | undefined;
            levelType?: {
                m_defined: boolean;
                m_value: string | null;
            } | {
                m_defined: boolean;
                m_value: number | null;
            } | undefined;
            numOfExtraDrops?: {
                m_defined: boolean;
                m_value: number | null;
            } | undefined;
            viewRadius?: {
                m_defined: boolean;
                m_value: number | null;
            } | undefined;
            notCountInTotal?: {
                m_defined: boolean;
                m_value: boolean;
            } | undefined;
        } | null;
    }[];
    waves: {
        preDelay: number;
        postDelay: number;
        maxTimeWaitingForNextWave: number;
        fragments: {
            preDelay: number;
            actions: {
                interval: number;
                key: string;
                count: number;
                actionType: string | number;
                managedByScheduler: boolean;
                preDelay: number;
                routeIndex: number;
                blockFragment: boolean;
                autoPreviewRoute: boolean;
                isUnharmfulAndAlwaysCountAsKilled: boolean;
                hiddenGroup: string | null;
                autoDisplayEnemyInfo?: boolean | undefined;
                randomSpawnGroupKey?: string | null | undefined;
                randomSpawnGroupPackKey?: string | null | undefined;
                randomType?: string | number | undefined;
                weight?: number | undefined;
                dontBlockWave?: boolean | undefined;
                isValid?: boolean | undefined;
                extraMeta?: null | undefined;
            }[];
            name?: string | null | undefined;
        }[];
        advancedWaveTag?: string | null | undefined;
        name?: string | null | undefined;
    }[];
    branches: Record<string, {
        phases: {
            preDelay: number;
            actions: {
                interval: number;
                key: string;
                count: number;
                actionType: string | number;
                managedByScheduler: boolean;
                preDelay: number;
                routeIndex: number;
                blockFragment: boolean;
                autoPreviewRoute: boolean;
                isUnharmfulAndAlwaysCountAsKilled: boolean;
                hiddenGroup: string | null;
                autoDisplayEnemyInfo?: boolean | undefined;
                randomSpawnGroupKey?: string | null | undefined;
                randomSpawnGroupPackKey?: string | null | undefined;
                randomType?: string | number | undefined;
                weight?: number | undefined;
                dontBlockWave?: boolean | undefined;
                isValid?: boolean | undefined;
                extraMeta?: null | undefined;
            }[];
            m_randomActionGroups?: null | undefined;
            m_actionWithRandomSpawn?: null | undefined;
            m_validActionPackKeys?: null | undefined;
        }[];
    }> | null;
    predefines: {
        characterInsts: any[];
        tokenInsts: {
            direction: string | number;
            position: {
                col: number;
                row: number;
            };
            hidden: boolean;
            alias: string | null;
            inst: {
                level: number;
                phase: string | number;
                characterKey: string;
                favorPoint: number;
                potentialRank: number;
            };
            skillIndex: number;
            mainSkillLvl: number;
            skinId: string | null;
            uniEquipIds?: {
                key: string;
                level: number;
            }[] | null | undefined;
            tmplId?: string | null | undefined;
            overrideSkillBlackboard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        }[];
        characterCards: any[];
        tokenCards: any[];
    } | null;
    excludeCharIdList: null;
    randomSeed: number;
    extraRoutes?: any[] | undefined;
    hardPredefines?: {
        characterInsts: any[];
        tokenInsts: {
            direction: string | number;
            position: {
                col: number;
                row: number;
            };
            hidden: boolean;
            alias: string | null;
            inst: {
                level: number;
                phase: string | number;
                characterKey: string;
                favorPoint: number;
                potentialRank: number;
            };
            skillIndex: number;
            mainSkillLvl: number;
            skinId: string | null;
            uniEquipIds?: {
                key: string;
                level: number;
            }[] | null | undefined;
            tmplId?: string | null | undefined;
            overrideSkillBlackboard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        }[];
        characterCards: any[];
        tokenCards: any[];
    } | null | undefined;
    operaConfig?: string | null | undefined;
    runtimeData?: null | undefined;
}, {
    options: {
        characterLimit: number;
        maxLifePoint: number;
        initialCost: number;
        maxCost: number;
        costIncreaseTime: number;
        moveMultiplier: number;
        steeringEnabled: boolean;
        isTrainingLevel: boolean;
        functionDisableMask: string | number;
        isHardTrainingLevel?: boolean | undefined;
        isPredefinedCardsSelectable?: boolean | undefined;
        maxPlayTime?: number | undefined;
        configBlackBoard?: {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }[] | null | undefined;
    };
    levelId: string | null;
    mapId: string | null;
    bgmEvent: string | null;
    environmentSe: string | null;
    mapData: {
        map: number[][];
        tiles: {
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            tileKey: string;
            heightType: string | number;
            buildableType: string | number;
            passableMask: string | number;
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            playerSideMask?: string | number | undefined;
        }[];
        effects: {
            offset: {
                x: number;
                y: number;
                z: number;
            };
            key: string;
            direction: string | number;
        }[] | null;
        blockEdges: any[] | null;
        tags: string[] | null;
        layerRects?: null | undefined;
        width?: number | undefined;
        height?: number | undefined;
    };
    tilesDisallowToLocate: any[];
    runes: {
        key: string;
        blackboard: {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }[];
        difficultyMask: string | number;
        buildableMask: string | number;
        professionMask?: string | number | undefined;
    }[] | null;
    globalBuffs: {
        prefabKey: string;
        blackboard: {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }[] | null;
        overrideCameraEffect: null;
        passProfessionMaskFlag?: boolean | undefined;
        professionMask?: string | number | undefined;
        useExtraData?: boolean | undefined;
    }[] | null;
    routes: ({
        motionMode: string | number;
        startPosition: {
            col: number;
            row: number;
        };
        endPosition: {
            col: number;
            row: number;
        };
        spawnRandomRange: {
            x: number;
            y: number;
        };
        spawnOffset: {
            x: number;
            y: number;
        };
        checkpoints: {
            type: string | number;
            time: number;
            position: {
                col: number;
                row: number;
            };
            reachOffset: {
                x: number;
                y: number;
            };
            randomizeReachOffset: boolean;
            reachDistance: number;
        }[] | null;
        allowDiagonalMove: boolean;
        visitEveryTileCenter: boolean;
        visitEveryNodeCenter: boolean;
        visitEveryCheckPoint?: boolean | undefined;
    } | null)[];
    enemies: any[];
    enemyDbRefs: {
        id: string;
        level: number;
        useDb: boolean;
        overwrittenData: {
            name: {
                m_defined: boolean;
                m_value: string | null;
            };
            attributes: {
                maxHp: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                atk: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                def: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                magicResistance: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                cost: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                blockCnt: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                moveSpeed: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                attackSpeed: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                baseAttackTime: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                respawnTime: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                hpRecoveryPerSec: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                spRecoveryPerSec: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                maxDeployCount: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                massLevel: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                baseForceLevel: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                stunImmune: {
                    m_defined: boolean;
                    m_value: boolean;
                };
                silenceImmune: {
                    m_defined: boolean;
                    m_value: boolean;
                };
                tauntLevel?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                epDamageResistance?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                epResistance?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                sleepImmune?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
                frozenImmune?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
                levitateImmune?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            };
            description: {
                m_defined: boolean;
                m_value: string | null;
            };
            prefabKey: {
                m_defined: boolean;
                m_value: string | null;
            };
            lifePointReduce: {
                m_defined: boolean;
                m_value: number | null;
            };
            rangeRadius: {
                m_defined: boolean;
                m_value: number | null;
            };
            talentBlackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            skills: {
                priority: number;
                prefabKey: string;
                cooldown: number;
                initCooldown: number;
                spCost: number;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
            }[] | null;
            spData: {
                spType: string;
                maxSp: number;
                initSp: number;
                increment: number;
            } | null;
            applyWay?: {
                m_defined: boolean;
                m_value: string | null;
            } | undefined;
            motion?: {
                m_defined: boolean;
                m_value: string | null;
            } | undefined;
            enemyTags?: {
                m_defined: boolean;
                m_value: string[] | null;
            } | undefined;
            levelType?: {
                m_defined: boolean;
                m_value: string | null;
            } | {
                m_defined: boolean;
                m_value: number | null;
            } | undefined;
            numOfExtraDrops?: {
                m_defined: boolean;
                m_value: number | null;
            } | undefined;
            viewRadius?: {
                m_defined: boolean;
                m_value: number | null;
            } | undefined;
            notCountInTotal?: {
                m_defined: boolean;
                m_value: boolean;
            } | undefined;
        } | null;
    }[];
    waves: {
        preDelay: number;
        postDelay: number;
        maxTimeWaitingForNextWave: number;
        fragments: {
            preDelay: number;
            actions: {
                interval: number;
                key: string;
                count: number;
                actionType: string | number;
                managedByScheduler: boolean;
                preDelay: number;
                routeIndex: number;
                blockFragment: boolean;
                autoPreviewRoute: boolean;
                isUnharmfulAndAlwaysCountAsKilled: boolean;
                hiddenGroup: string | null;
                autoDisplayEnemyInfo?: boolean | undefined;
                randomSpawnGroupKey?: string | null | undefined;
                randomSpawnGroupPackKey?: string | null | undefined;
                randomType?: string | number | undefined;
                weight?: number | undefined;
                dontBlockWave?: boolean | undefined;
                isValid?: boolean | undefined;
                extraMeta?: null | undefined;
            }[];
            name?: string | null | undefined;
        }[];
        advancedWaveTag?: string | null | undefined;
        name?: string | null | undefined;
    }[];
    branches: Record<string, {
        phases: {
            preDelay: number;
            actions: {
                interval: number;
                key: string;
                count: number;
                actionType: string | number;
                managedByScheduler: boolean;
                preDelay: number;
                routeIndex: number;
                blockFragment: boolean;
                autoPreviewRoute: boolean;
                isUnharmfulAndAlwaysCountAsKilled: boolean;
                hiddenGroup: string | null;
                autoDisplayEnemyInfo?: boolean | undefined;
                randomSpawnGroupKey?: string | null | undefined;
                randomSpawnGroupPackKey?: string | null | undefined;
                randomType?: string | number | undefined;
                weight?: number | undefined;
                dontBlockWave?: boolean | undefined;
                isValid?: boolean | undefined;
                extraMeta?: null | undefined;
            }[];
            m_randomActionGroups?: null | undefined;
            m_actionWithRandomSpawn?: null | undefined;
            m_validActionPackKeys?: null | undefined;
        }[];
    }> | null;
    predefines: {
        characterInsts: any[];
        tokenInsts: {
            direction: string | number;
            position: {
                col: number;
                row: number;
            };
            hidden: boolean;
            alias: string | null;
            inst: {
                level: number;
                phase: string | number;
                characterKey: string;
                favorPoint: number;
                potentialRank: number;
            };
            skillIndex: number;
            mainSkillLvl: number;
            skinId: string | null;
            uniEquipIds?: {
                key: string;
                level: number;
            }[] | null | undefined;
            tmplId?: string | null | undefined;
            overrideSkillBlackboard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        }[];
        characterCards: any[];
        tokenCards: any[];
    } | null;
    excludeCharIdList: null;
    randomSeed: number;
    extraRoutes?: any[] | undefined;
    hardPredefines?: {
        characterInsts: any[];
        tokenInsts: {
            direction: string | number;
            position: {
                col: number;
                row: number;
            };
            hidden: boolean;
            alias: string | null;
            inst: {
                level: number;
                phase: string | number;
                characterKey: string;
                favorPoint: number;
                potentialRank: number;
            };
            skillIndex: number;
            mainSkillLvl: number;
            skinId: string | null;
            uniEquipIds?: {
                key: string;
                level: number;
            }[] | null | undefined;
            tmplId?: string | null | undefined;
            overrideSkillBlackboard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        }[];
        characterCards: any[];
        tokenCards: any[];
    } | null | undefined;
    operaConfig?: string | null | undefined;
    runtimeData?: null | undefined;
}>;
declare const RogueRelicZod: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    description: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    usage: z.ZodString;
    obtainApproach: z.ZodString;
    iconId: z.ZodString;
    type: z.ZodString;
    subType: z.ZodString;
    rarity: z.ZodString;
    value: z.ZodNumber;
    sortId: z.ZodNumber;
    canSacrifice: z.ZodBoolean;
    unlockCondDesc: z.ZodUnion<[z.ZodString, z.ZodNull]>;
}, "strict", z.ZodTypeAny, {
    type: string;
    id: string;
    name: string;
    value: number;
    description: string | null;
    sortId: number;
    rarity: string;
    usage: string;
    obtainApproach: string;
    iconId: string;
    subType: string;
    canSacrifice: boolean;
    unlockCondDesc: string | null;
}, {
    type: string;
    id: string;
    name: string;
    value: number;
    description: string | null;
    sortId: number;
    rarity: string;
    usage: string;
    obtainApproach: string;
    iconId: string;
    subType: string;
    canSacrifice: boolean;
    unlockCondDesc: string | null;
}>;
declare const RogueStageZod: z.ZodObject<{
    excel: z.ZodObject<{
        id: z.ZodString;
        linkedStageId: z.ZodString;
        levelId: z.ZodString;
        code: z.ZodString;
        name: z.ZodString;
        loadingPicId: z.ZodString;
        description: z.ZodString;
        eliteDesc: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        isBoss: z.ZodNumber;
        isElite: z.ZodNumber;
        difficulty: z.ZodString;
        capsulePool: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        capsuleProb: z.ZodNumber;
        vutresProb: z.ZodArray<z.ZodNumber, "many">;
        boxProb: z.ZodArray<z.ZodNumber, "many">;
        specialNodeId: z.ZodNullable<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        code: string;
        id: string;
        name: string;
        description: string;
        levelId: string;
        linkedStageId: string;
        loadingPicId: string;
        eliteDesc: string | null;
        isBoss: number;
        isElite: number;
        difficulty: string;
        capsulePool: string | null;
        capsuleProb: number;
        vutresProb: number[];
        boxProb: number[];
        specialNodeId: string | null;
    }, {
        code: string;
        id: string;
        name: string;
        description: string;
        levelId: string;
        linkedStageId: string;
        loadingPicId: string;
        eliteDesc: string | null;
        isBoss: number;
        isElite: number;
        difficulty: string;
        capsulePool: string | null;
        capsuleProb: number;
        vutresProb: number[];
        boxProb: number[];
        specialNodeId: string | null;
    }>;
    levels: z.ZodObject<{
        options: z.ZodObject<{
            characterLimit: z.ZodNumber;
            maxLifePoint: z.ZodNumber;
            initialCost: z.ZodNumber;
            maxCost: z.ZodNumber;
            costIncreaseTime: z.ZodNumber;
            moveMultiplier: z.ZodNumber;
            steeringEnabled: z.ZodBoolean;
            isTrainingLevel: z.ZodBoolean;
            isHardTrainingLevel: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            isPredefinedCardsSelectable: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            maxPlayTime: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
            functionDisableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            configBlackBoard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }>, "many">, z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        }, {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        }>;
        levelId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        mapId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        bgmEvent: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        environmentSe: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        mapData: z.ZodObject<{
            map: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
            tiles: z.ZodArray<z.ZodObject<{
                tileKey: z.ZodString;
                heightType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                buildableType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                passableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                playerSideMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull]>;
                effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    offset: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                        z: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        x: number;
                        y: number;
                        z: number;
                    }, {
                        x: number;
                        y: number;
                        z: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                }, "strict", z.ZodTypeAny, {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }, {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }>, "many">, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }, {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }>, "many">;
            blockEdges: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodNull]>;
            tags: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
            effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                offset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                    z: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: number;
                    y: number;
                    z: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            }, "strict", z.ZodTypeAny, {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }, {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }>, "many">, z.ZodNull]>;
            layerRects: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
            width: z.ZodOptional<z.ZodNumber>;
            height: z.ZodOptional<z.ZodNumber>;
        }, "strict", z.ZodTypeAny, {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        }, {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        }>;
        tilesDisallowToLocate: z.ZodArray<z.ZodAny, "many">;
        runes: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            difficultyMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            key: z.ZodString;
            professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
            buildableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            blackboard: z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }, {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }>, "many">, z.ZodNull]>;
        globalBuffs: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            prefabKey: z.ZodString;
            blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }>, "many">, z.ZodNull]>;
            overrideCameraEffect: z.ZodNull;
            passProfessionMaskFlag: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
            useExtraData: z.ZodOptional<z.ZodBoolean>;
        }, "strict", z.ZodTypeAny, {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }, {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }>, "many">, z.ZodNull]>;
        routes: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            motionMode: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            startPosition: z.ZodObject<{
                row: z.ZodNumber;
                col: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                col: number;
                row: number;
            }, {
                col: number;
                row: number;
            }>;
            endPosition: z.ZodObject<{
                row: z.ZodNumber;
                col: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                col: number;
                row: number;
            }, {
                col: number;
                row: number;
            }>;
            spawnRandomRange: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: number;
                y: number;
            }>;
            spawnOffset: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: number;
                y: number;
            }>;
            checkpoints: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                type: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                time: z.ZodNumber;
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    col: number;
                    row: number;
                }, {
                    col: number;
                    row: number;
                }>;
                reachOffset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x: number;
                    y: number;
                }, {
                    x: number;
                    y: number;
                }>;
                randomizeReachOffset: z.ZodBoolean;
                reachDistance: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }, {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }>, "many">, z.ZodNull]>;
            allowDiagonalMove: z.ZodBoolean;
            visitEveryTileCenter: z.ZodBoolean;
            visitEveryNodeCenter: z.ZodBoolean;
            visitEveryCheckPoint: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        }, {
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        }>, z.ZodNull]>, "many">;
        extraRoutes: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodUndefined]>;
        enemies: z.ZodArray<z.ZodAny, "many">;
        enemyDbRefs: z.ZodArray<z.ZodObject<{
            useDb: z.ZodBoolean;
            id: z.ZodString;
            level: z.ZodNumber;
            overwrittenData: z.ZodUnion<[z.ZodObject<{
                name: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>;
                description: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>;
                prefabKey: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>;
                attributes: z.ZodObject<{
                    maxHp: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    atk: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    def: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    magicResistance: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    cost: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    blockCnt: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    moveSpeed: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    attackSpeed: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    baseAttackTime: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    respawnTime: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    hpRecoveryPerSec: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    spRecoveryPerSec: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    maxDeployCount: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    massLevel: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    baseForceLevel: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    tauntLevel: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    epDamageResistance: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    epResistance: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    stunImmune: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>;
                    silenceImmune: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>;
                    sleepImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>, z.ZodUndefined]>;
                    frozenImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>, z.ZodUndefined]>;
                    levitateImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                }, {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                }>;
                applyWay: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>, z.ZodUndefined]>;
                motion: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>, z.ZodUndefined]>;
                enemyTags: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string[] | null;
                }, {
                    m_defined: boolean;
                    m_value: string[] | null;
                }>, z.ZodUndefined]>;
                lifePointReduce: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>;
                levelType: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>, z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>, z.ZodUndefined]>;
                rangeRadius: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>;
                numOfExtraDrops: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>, z.ZodUndefined]>;
                viewRadius: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>, z.ZodUndefined]>;
                notCountInTotal: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodBoolean;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: boolean;
                }, {
                    m_defined: boolean;
                    m_value: boolean;
                }>, z.ZodUndefined]>;
                talentBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull]>;
                skills: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    prefabKey: z.ZodString;
                    priority: z.ZodNumber;
                    cooldown: z.ZodNumber;
                    initCooldown: z.ZodNumber;
                    spCost: z.ZodNumber;
                    blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }>, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }, {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }>, "many">, z.ZodNull]>;
                spData: z.ZodUnion<[z.ZodObject<{
                    spType: z.ZodString;
                    maxSp: z.ZodNumber;
                    initSp: z.ZodNumber;
                    increment: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                }, {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                }>, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            }, {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            }>, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }, {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }>, "many">;
        waves: z.ZodArray<z.ZodObject<{
            preDelay: z.ZodNumber;
            postDelay: z.ZodNumber;
            maxTimeWaitingForNextWave: z.ZodNumber;
            fragments: z.ZodArray<z.ZodObject<{
                preDelay: z.ZodNumber;
                actions: z.ZodArray<z.ZodObject<{
                    actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    managedByScheduler: z.ZodBoolean;
                    key: z.ZodString;
                    count: z.ZodNumber;
                    preDelay: z.ZodNumber;
                    interval: z.ZodNumber;
                    routeIndex: z.ZodNumber;
                    blockFragment: z.ZodBoolean;
                    autoPreviewRoute: z.ZodBoolean;
                    autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                    hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                    weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                    dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }, {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }>, "many">;
                name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strict", z.ZodTypeAny, {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }, {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }>, "many">;
            advancedWaveTag: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strict", z.ZodTypeAny, {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }, {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }>, "many">;
        branches: z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodObject<{
            phases: z.ZodArray<z.ZodObject<{
                preDelay: z.ZodNumber;
                actions: z.ZodArray<z.ZodObject<{
                    actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    managedByScheduler: z.ZodBoolean;
                    key: z.ZodString;
                    count: z.ZodNumber;
                    preDelay: z.ZodNumber;
                    interval: z.ZodNumber;
                    routeIndex: z.ZodNumber;
                    blockFragment: z.ZodBoolean;
                    autoPreviewRoute: z.ZodBoolean;
                    autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                    hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                    weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                    dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }, {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }>, "many">;
                m_randomActionGroups: z.ZodOptional<z.ZodNull>;
                m_actionWithRandomSpawn: z.ZodOptional<z.ZodNull>;
                m_validActionPackKeys: z.ZodOptional<z.ZodNull>;
            }, "strict", z.ZodTypeAny, {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }, {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }>>, z.ZodNull]>;
        predefines: z.ZodUnion<[z.ZodObject<{
            characterInsts: z.ZodArray<z.ZodAny, "many">;
            tokenInsts: z.ZodArray<z.ZodObject<{
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    col: number;
                    row: number;
                }, {
                    col: number;
                    row: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                hidden: z.ZodBoolean;
                alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    level: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    level: number;
                }, {
                    key: string;
                    level: number;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
                inst: z.ZodObject<{
                    characterKey: z.ZodString;
                    level: z.ZodNumber;
                    phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    favorPoint: z.ZodNumber;
                    potentialRank: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                }, {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                }>;
                skillIndex: z.ZodNumber;
                mainSkillLvl: z.ZodNumber;
                skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }, {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }>, "many">;
            characterCards: z.ZodArray<z.ZodAny, "many">;
            tokenCards: z.ZodArray<z.ZodAny, "many">;
        }, "strict", z.ZodTypeAny, {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        }, {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        }>, z.ZodNull]>;
        hardPredefines: z.ZodUnion<[z.ZodObject<{
            characterInsts: z.ZodArray<z.ZodAny, "many">;
            tokenInsts: z.ZodArray<z.ZodObject<{
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    col: number;
                    row: number;
                }, {
                    col: number;
                    row: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                hidden: z.ZodBoolean;
                alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    level: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    level: number;
                }, {
                    key: string;
                    level: number;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
                inst: z.ZodObject<{
                    characterKey: z.ZodString;
                    level: z.ZodNumber;
                    phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    favorPoint: z.ZodNumber;
                    potentialRank: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                }, {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                }>;
                skillIndex: z.ZodNumber;
                mainSkillLvl: z.ZodNumber;
                skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }, {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }>, "many">;
            characterCards: z.ZodArray<z.ZodAny, "many">;
            tokenCards: z.ZodArray<z.ZodAny, "many">;
        }, "strict", z.ZodTypeAny, {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        }, {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        }>, z.ZodNull, z.ZodUndefined]>;
        excludeCharIdList: z.ZodNull;
        randomSeed: z.ZodNumber;
        operaConfig: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        runtimeData: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
    }, "strict", z.ZodTypeAny, {
        options: {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        };
        levelId: string | null;
        mapId: string | null;
        bgmEvent: string | null;
        environmentSe: string | null;
        mapData: {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        };
        tilesDisallowToLocate: any[];
        runes: {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }[] | null;
        globalBuffs: {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }[] | null;
        routes: ({
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        } | null)[];
        enemies: any[];
        enemyDbRefs: {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }[];
        waves: {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }[];
        branches: Record<string, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }> | null;
        predefines: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null;
        excludeCharIdList: null;
        randomSeed: number;
        extraRoutes?: any[] | undefined;
        hardPredefines?: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null | undefined;
        operaConfig?: string | null | undefined;
        runtimeData?: null | undefined;
    }, {
        options: {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        };
        levelId: string | null;
        mapId: string | null;
        bgmEvent: string | null;
        environmentSe: string | null;
        mapData: {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        };
        tilesDisallowToLocate: any[];
        runes: {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }[] | null;
        globalBuffs: {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }[] | null;
        routes: ({
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        } | null)[];
        enemies: any[];
        enemyDbRefs: {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }[];
        waves: {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }[];
        branches: Record<string, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }> | null;
        predefines: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null;
        excludeCharIdList: null;
        randomSeed: number;
        extraRoutes?: any[] | undefined;
        hardPredefines?: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null | undefined;
        operaConfig?: string | null | undefined;
        runtimeData?: null | undefined;
    }>;
}, "strict", z.ZodTypeAny, {
    excel: {
        code: string;
        id: string;
        name: string;
        description: string;
        levelId: string;
        linkedStageId: string;
        loadingPicId: string;
        eliteDesc: string | null;
        isBoss: number;
        isElite: number;
        difficulty: string;
        capsulePool: string | null;
        capsuleProb: number;
        vutresProb: number[];
        boxProb: number[];
        specialNodeId: string | null;
    };
    levels: {
        options: {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        };
        levelId: string | null;
        mapId: string | null;
        bgmEvent: string | null;
        environmentSe: string | null;
        mapData: {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        };
        tilesDisallowToLocate: any[];
        runes: {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }[] | null;
        globalBuffs: {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }[] | null;
        routes: ({
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        } | null)[];
        enemies: any[];
        enemyDbRefs: {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }[];
        waves: {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }[];
        branches: Record<string, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }> | null;
        predefines: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null;
        excludeCharIdList: null;
        randomSeed: number;
        extraRoutes?: any[] | undefined;
        hardPredefines?: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null | undefined;
        operaConfig?: string | null | undefined;
        runtimeData?: null | undefined;
    };
}, {
    excel: {
        code: string;
        id: string;
        name: string;
        description: string;
        levelId: string;
        linkedStageId: string;
        loadingPicId: string;
        eliteDesc: string | null;
        isBoss: number;
        isElite: number;
        difficulty: string;
        capsulePool: string | null;
        capsuleProb: number;
        vutresProb: number[];
        boxProb: number[];
        specialNodeId: string | null;
    };
    levels: {
        options: {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        };
        levelId: string | null;
        mapId: string | null;
        bgmEvent: string | null;
        environmentSe: string | null;
        mapData: {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        };
        tilesDisallowToLocate: any[];
        runes: {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }[] | null;
        globalBuffs: {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }[] | null;
        routes: ({
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        } | null)[];
        enemies: any[];
        enemyDbRefs: {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }[];
        waves: {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }[];
        branches: Record<string, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }> | null;
        predefines: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null;
        excludeCharIdList: null;
        randomSeed: number;
        extraRoutes?: any[] | undefined;
        hardPredefines?: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null | undefined;
        operaConfig?: string | null | undefined;
        runtimeData?: null | undefined;
    };
}>;
declare const RogueVariationZod: z.ZodObject<{
    id: z.ZodString;
    type: z.ZodString;
    outerName: z.ZodString;
    innerName: z.ZodString;
    functionDesc: z.ZodString;
    desc: z.ZodString;
    iconId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    sound: z.ZodUnion<[z.ZodString, z.ZodNull]>;
}, "strict", z.ZodTypeAny, {
    type: string;
    id: string;
    desc: string;
    iconId: string | null;
    outerName: string;
    innerName: string;
    functionDesc: string;
    sound: string | null;
}, {
    type: string;
    id: string;
    desc: string;
    iconId: string | null;
    outerName: string;
    innerName: string;
    functionDesc: string;
    sound: string | null;
}>;
declare const SandboxStageZod: z.ZodObject<{
    excel: z.ZodObject<{
        stageId: z.ZodString;
        levelId: z.ZodString;
        code: z.ZodString;
        name: z.ZodString;
        loadingPicId: z.ZodString;
        description: z.ZodString;
        actionCost: z.ZodNumber;
        powerCost: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        code: string;
        name: string;
        description: string;
        stageId: string;
        levelId: string;
        loadingPicId: string;
        actionCost: number;
        powerCost: number;
    }, {
        code: string;
        name: string;
        description: string;
        stageId: string;
        levelId: string;
        loadingPicId: string;
        actionCost: number;
        powerCost: number;
    }>;
    levels: z.ZodObject<{
        options: z.ZodObject<{
            characterLimit: z.ZodNumber;
            maxLifePoint: z.ZodNumber;
            initialCost: z.ZodNumber;
            maxCost: z.ZodNumber;
            costIncreaseTime: z.ZodNumber;
            moveMultiplier: z.ZodNumber;
            steeringEnabled: z.ZodBoolean;
            isTrainingLevel: z.ZodBoolean;
            isHardTrainingLevel: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            isPredefinedCardsSelectable: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            maxPlayTime: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
            functionDisableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            configBlackBoard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }>, "many">, z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        }, {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        }>;
        levelId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        mapId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        bgmEvent: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        environmentSe: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        mapData: z.ZodObject<{
            map: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
            tiles: z.ZodArray<z.ZodObject<{
                tileKey: z.ZodString;
                heightType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                buildableType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                passableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                playerSideMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull]>;
                effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    offset: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                        z: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        x: number;
                        y: number;
                        z: number;
                    }, {
                        x: number;
                        y: number;
                        z: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                }, "strict", z.ZodTypeAny, {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }, {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }>, "many">, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }, {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }>, "many">;
            blockEdges: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodNull]>;
            tags: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
            effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                offset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                    z: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: number;
                    y: number;
                    z: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            }, "strict", z.ZodTypeAny, {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }, {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }>, "many">, z.ZodNull]>;
            layerRects: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
            width: z.ZodOptional<z.ZodNumber>;
            height: z.ZodOptional<z.ZodNumber>;
        }, "strict", z.ZodTypeAny, {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        }, {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        }>;
        tilesDisallowToLocate: z.ZodArray<z.ZodAny, "many">;
        runes: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            difficultyMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            key: z.ZodString;
            professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
            buildableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            blackboard: z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }, {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }>, "many">, z.ZodNull]>;
        globalBuffs: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            prefabKey: z.ZodString;
            blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }>, "many">, z.ZodNull]>;
            overrideCameraEffect: z.ZodNull;
            passProfessionMaskFlag: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
            useExtraData: z.ZodOptional<z.ZodBoolean>;
        }, "strict", z.ZodTypeAny, {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }, {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }>, "many">, z.ZodNull]>;
        routes: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            motionMode: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            startPosition: z.ZodObject<{
                row: z.ZodNumber;
                col: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                col: number;
                row: number;
            }, {
                col: number;
                row: number;
            }>;
            endPosition: z.ZodObject<{
                row: z.ZodNumber;
                col: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                col: number;
                row: number;
            }, {
                col: number;
                row: number;
            }>;
            spawnRandomRange: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: number;
                y: number;
            }>;
            spawnOffset: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: number;
                y: number;
            }>;
            checkpoints: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                type: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                time: z.ZodNumber;
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    col: number;
                    row: number;
                }, {
                    col: number;
                    row: number;
                }>;
                reachOffset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x: number;
                    y: number;
                }, {
                    x: number;
                    y: number;
                }>;
                randomizeReachOffset: z.ZodBoolean;
                reachDistance: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }, {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }>, "many">, z.ZodNull]>;
            allowDiagonalMove: z.ZodBoolean;
            visitEveryTileCenter: z.ZodBoolean;
            visitEveryNodeCenter: z.ZodBoolean;
            visitEveryCheckPoint: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        }, {
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        }>, z.ZodNull]>, "many">;
        extraRoutes: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodUndefined]>;
        enemies: z.ZodArray<z.ZodAny, "many">;
        enemyDbRefs: z.ZodArray<z.ZodObject<{
            useDb: z.ZodBoolean;
            id: z.ZodString;
            level: z.ZodNumber;
            overwrittenData: z.ZodUnion<[z.ZodObject<{
                name: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>;
                description: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>;
                prefabKey: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>;
                attributes: z.ZodObject<{
                    maxHp: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    atk: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    def: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    magicResistance: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    cost: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    blockCnt: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    moveSpeed: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    attackSpeed: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    baseAttackTime: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    respawnTime: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    hpRecoveryPerSec: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    spRecoveryPerSec: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    maxDeployCount: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    massLevel: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    baseForceLevel: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    tauntLevel: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    epDamageResistance: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    epResistance: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    stunImmune: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>;
                    silenceImmune: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>;
                    sleepImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>, z.ZodUndefined]>;
                    frozenImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>, z.ZodUndefined]>;
                    levitateImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                }, {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                }>;
                applyWay: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>, z.ZodUndefined]>;
                motion: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>, z.ZodUndefined]>;
                enemyTags: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string[] | null;
                }, {
                    m_defined: boolean;
                    m_value: string[] | null;
                }>, z.ZodUndefined]>;
                lifePointReduce: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>;
                levelType: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>, z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>, z.ZodUndefined]>;
                rangeRadius: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>;
                numOfExtraDrops: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>, z.ZodUndefined]>;
                viewRadius: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>, z.ZodUndefined]>;
                notCountInTotal: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodBoolean;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: boolean;
                }, {
                    m_defined: boolean;
                    m_value: boolean;
                }>, z.ZodUndefined]>;
                talentBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull]>;
                skills: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    prefabKey: z.ZodString;
                    priority: z.ZodNumber;
                    cooldown: z.ZodNumber;
                    initCooldown: z.ZodNumber;
                    spCost: z.ZodNumber;
                    blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }>, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }, {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }>, "many">, z.ZodNull]>;
                spData: z.ZodUnion<[z.ZodObject<{
                    spType: z.ZodString;
                    maxSp: z.ZodNumber;
                    initSp: z.ZodNumber;
                    increment: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                }, {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                }>, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            }, {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            }>, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }, {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }>, "many">;
        waves: z.ZodArray<z.ZodObject<{
            preDelay: z.ZodNumber;
            postDelay: z.ZodNumber;
            maxTimeWaitingForNextWave: z.ZodNumber;
            fragments: z.ZodArray<z.ZodObject<{
                preDelay: z.ZodNumber;
                actions: z.ZodArray<z.ZodObject<{
                    actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    managedByScheduler: z.ZodBoolean;
                    key: z.ZodString;
                    count: z.ZodNumber;
                    preDelay: z.ZodNumber;
                    interval: z.ZodNumber;
                    routeIndex: z.ZodNumber;
                    blockFragment: z.ZodBoolean;
                    autoPreviewRoute: z.ZodBoolean;
                    autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                    hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                    weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                    dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }, {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }>, "many">;
                name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strict", z.ZodTypeAny, {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }, {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }>, "many">;
            advancedWaveTag: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strict", z.ZodTypeAny, {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }, {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }>, "many">;
        branches: z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodObject<{
            phases: z.ZodArray<z.ZodObject<{
                preDelay: z.ZodNumber;
                actions: z.ZodArray<z.ZodObject<{
                    actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    managedByScheduler: z.ZodBoolean;
                    key: z.ZodString;
                    count: z.ZodNumber;
                    preDelay: z.ZodNumber;
                    interval: z.ZodNumber;
                    routeIndex: z.ZodNumber;
                    blockFragment: z.ZodBoolean;
                    autoPreviewRoute: z.ZodBoolean;
                    autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                    hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                    weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                    dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }, {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }>, "many">;
                m_randomActionGroups: z.ZodOptional<z.ZodNull>;
                m_actionWithRandomSpawn: z.ZodOptional<z.ZodNull>;
                m_validActionPackKeys: z.ZodOptional<z.ZodNull>;
            }, "strict", z.ZodTypeAny, {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }, {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }>>, z.ZodNull]>;
        predefines: z.ZodUnion<[z.ZodObject<{
            characterInsts: z.ZodArray<z.ZodAny, "many">;
            tokenInsts: z.ZodArray<z.ZodObject<{
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    col: number;
                    row: number;
                }, {
                    col: number;
                    row: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                hidden: z.ZodBoolean;
                alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    level: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    level: number;
                }, {
                    key: string;
                    level: number;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
                inst: z.ZodObject<{
                    characterKey: z.ZodString;
                    level: z.ZodNumber;
                    phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    favorPoint: z.ZodNumber;
                    potentialRank: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                }, {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                }>;
                skillIndex: z.ZodNumber;
                mainSkillLvl: z.ZodNumber;
                skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }, {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }>, "many">;
            characterCards: z.ZodArray<z.ZodAny, "many">;
            tokenCards: z.ZodArray<z.ZodAny, "many">;
        }, "strict", z.ZodTypeAny, {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        }, {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        }>, z.ZodNull]>;
        hardPredefines: z.ZodUnion<[z.ZodObject<{
            characterInsts: z.ZodArray<z.ZodAny, "many">;
            tokenInsts: z.ZodArray<z.ZodObject<{
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    col: number;
                    row: number;
                }, {
                    col: number;
                    row: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                hidden: z.ZodBoolean;
                alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    level: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    level: number;
                }, {
                    key: string;
                    level: number;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
                inst: z.ZodObject<{
                    characterKey: z.ZodString;
                    level: z.ZodNumber;
                    phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    favorPoint: z.ZodNumber;
                    potentialRank: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                }, {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                }>;
                skillIndex: z.ZodNumber;
                mainSkillLvl: z.ZodNumber;
                skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }, {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }>, "many">;
            characterCards: z.ZodArray<z.ZodAny, "many">;
            tokenCards: z.ZodArray<z.ZodAny, "many">;
        }, "strict", z.ZodTypeAny, {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        }, {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        }>, z.ZodNull, z.ZodUndefined]>;
        excludeCharIdList: z.ZodNull;
        randomSeed: z.ZodNumber;
        operaConfig: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        runtimeData: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
    }, "strict", z.ZodTypeAny, {
        options: {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        };
        levelId: string | null;
        mapId: string | null;
        bgmEvent: string | null;
        environmentSe: string | null;
        mapData: {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        };
        tilesDisallowToLocate: any[];
        runes: {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }[] | null;
        globalBuffs: {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }[] | null;
        routes: ({
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        } | null)[];
        enemies: any[];
        enemyDbRefs: {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }[];
        waves: {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }[];
        branches: Record<string, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }> | null;
        predefines: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null;
        excludeCharIdList: null;
        randomSeed: number;
        extraRoutes?: any[] | undefined;
        hardPredefines?: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null | undefined;
        operaConfig?: string | null | undefined;
        runtimeData?: null | undefined;
    }, {
        options: {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        };
        levelId: string | null;
        mapId: string | null;
        bgmEvent: string | null;
        environmentSe: string | null;
        mapData: {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        };
        tilesDisallowToLocate: any[];
        runes: {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }[] | null;
        globalBuffs: {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }[] | null;
        routes: ({
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        } | null)[];
        enemies: any[];
        enemyDbRefs: {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }[];
        waves: {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }[];
        branches: Record<string, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }> | null;
        predefines: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null;
        excludeCharIdList: null;
        randomSeed: number;
        extraRoutes?: any[] | undefined;
        hardPredefines?: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null | undefined;
        operaConfig?: string | null | undefined;
        runtimeData?: null | undefined;
    }>;
}, "strict", z.ZodTypeAny, {
    excel: {
        code: string;
        name: string;
        description: string;
        stageId: string;
        levelId: string;
        loadingPicId: string;
        actionCost: number;
        powerCost: number;
    };
    levels: {
        options: {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        };
        levelId: string | null;
        mapId: string | null;
        bgmEvent: string | null;
        environmentSe: string | null;
        mapData: {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        };
        tilesDisallowToLocate: any[];
        runes: {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }[] | null;
        globalBuffs: {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }[] | null;
        routes: ({
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        } | null)[];
        enemies: any[];
        enemyDbRefs: {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }[];
        waves: {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }[];
        branches: Record<string, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }> | null;
        predefines: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null;
        excludeCharIdList: null;
        randomSeed: number;
        extraRoutes?: any[] | undefined;
        hardPredefines?: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null | undefined;
        operaConfig?: string | null | undefined;
        runtimeData?: null | undefined;
    };
}, {
    excel: {
        code: string;
        name: string;
        description: string;
        stageId: string;
        levelId: string;
        loadingPicId: string;
        actionCost: number;
        powerCost: number;
    };
    levels: {
        options: {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        };
        levelId: string | null;
        mapId: string | null;
        bgmEvent: string | null;
        environmentSe: string | null;
        mapData: {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        };
        tilesDisallowToLocate: any[];
        runes: {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }[] | null;
        globalBuffs: {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }[] | null;
        routes: ({
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        } | null)[];
        enemies: any[];
        enemyDbRefs: {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }[];
        waves: {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }[];
        branches: Record<string, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }> | null;
        predefines: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null;
        excludeCharIdList: null;
        randomSeed: number;
        extraRoutes?: any[] | undefined;
        hardPredefines?: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null | undefined;
        operaConfig?: string | null | undefined;
        runtimeData?: null | undefined;
    };
}>;
export declare const BaseZod: z.ZodObject<{
    buffId: z.ZodString;
    buffName: z.ZodString;
    buffIcon: z.ZodString;
    skillIcon: z.ZodString;
    sortId: z.ZodNumber;
    buffColor: z.ZodString;
    textColor: z.ZodString;
    buffCategory: z.ZodString;
    roomType: z.ZodString;
    description: z.ZodString;
}, "strict", z.ZodTypeAny, {
    description: string;
    sortId: number;
    buffId: string;
    buffName: string;
    buffIcon: string;
    skillIcon: string;
    buffColor: string;
    textColor: string;
    buffCategory: string;
    roomType: string;
}, {
    description: string;
    sortId: number;
    buffId: string;
    buffName: string;
    buffIcon: string;
    skillIcon: string;
    buffColor: string;
    textColor: string;
    buffCategory: string;
    roomType: string;
}>;
export declare const CCStageZod: z.ZodObject<{
    const: z.ZodObject<{
        levelId: z.ZodString;
        location: z.ZodString;
        name: z.ZodString;
        description: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        location: string;
        name: string;
        description: string;
        levelId: string;
    }, {
        location: string;
        name: string;
        description: string;
        levelId: string;
    }>;
    levels: z.ZodObject<{
        options: z.ZodObject<{
            characterLimit: z.ZodNumber;
            maxLifePoint: z.ZodNumber;
            initialCost: z.ZodNumber;
            maxCost: z.ZodNumber;
            costIncreaseTime: z.ZodNumber;
            moveMultiplier: z.ZodNumber;
            steeringEnabled: z.ZodBoolean;
            isTrainingLevel: z.ZodBoolean;
            isHardTrainingLevel: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            isPredefinedCardsSelectable: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            maxPlayTime: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
            functionDisableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            configBlackBoard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }>, "many">, z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        }, {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        }>;
        levelId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        mapId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        bgmEvent: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        environmentSe: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        mapData: z.ZodObject<{
            map: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
            tiles: z.ZodArray<z.ZodObject<{
                tileKey: z.ZodString;
                heightType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                buildableType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                passableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                playerSideMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull]>;
                effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    offset: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                        z: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        x: number;
                        y: number;
                        z: number;
                    }, {
                        x: number;
                        y: number;
                        z: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                }, "strict", z.ZodTypeAny, {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }, {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }>, "many">, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }, {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }>, "many">;
            blockEdges: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodNull]>;
            tags: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
            effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                offset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                    z: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: number;
                    y: number;
                    z: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            }, "strict", z.ZodTypeAny, {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }, {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }>, "many">, z.ZodNull]>;
            layerRects: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
            width: z.ZodOptional<z.ZodNumber>;
            height: z.ZodOptional<z.ZodNumber>;
        }, "strict", z.ZodTypeAny, {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        }, {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        }>;
        tilesDisallowToLocate: z.ZodArray<z.ZodAny, "many">;
        runes: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            difficultyMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            key: z.ZodString;
            professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
            buildableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            blackboard: z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }, {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }>, "many">, z.ZodNull]>;
        globalBuffs: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            prefabKey: z.ZodString;
            blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }>, "many">, z.ZodNull]>;
            overrideCameraEffect: z.ZodNull;
            passProfessionMaskFlag: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
            useExtraData: z.ZodOptional<z.ZodBoolean>;
        }, "strict", z.ZodTypeAny, {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }, {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }>, "many">, z.ZodNull]>;
        routes: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            motionMode: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            startPosition: z.ZodObject<{
                row: z.ZodNumber;
                col: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                col: number;
                row: number;
            }, {
                col: number;
                row: number;
            }>;
            endPosition: z.ZodObject<{
                row: z.ZodNumber;
                col: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                col: number;
                row: number;
            }, {
                col: number;
                row: number;
            }>;
            spawnRandomRange: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: number;
                y: number;
            }>;
            spawnOffset: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: number;
                y: number;
            }>;
            checkpoints: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                type: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                time: z.ZodNumber;
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    col: number;
                    row: number;
                }, {
                    col: number;
                    row: number;
                }>;
                reachOffset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x: number;
                    y: number;
                }, {
                    x: number;
                    y: number;
                }>;
                randomizeReachOffset: z.ZodBoolean;
                reachDistance: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }, {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }>, "many">, z.ZodNull]>;
            allowDiagonalMove: z.ZodBoolean;
            visitEveryTileCenter: z.ZodBoolean;
            visitEveryNodeCenter: z.ZodBoolean;
            visitEveryCheckPoint: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        }, {
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        }>, z.ZodNull]>, "many">;
        extraRoutes: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodUndefined]>;
        enemies: z.ZodArray<z.ZodAny, "many">;
        enemyDbRefs: z.ZodArray<z.ZodObject<{
            useDb: z.ZodBoolean;
            id: z.ZodString;
            level: z.ZodNumber;
            overwrittenData: z.ZodUnion<[z.ZodObject<{
                name: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>;
                description: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>;
                prefabKey: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>;
                attributes: z.ZodObject<{
                    maxHp: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    atk: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    def: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    magicResistance: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    cost: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    blockCnt: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    moveSpeed: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    attackSpeed: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    baseAttackTime: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    respawnTime: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    hpRecoveryPerSec: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    spRecoveryPerSec: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    maxDeployCount: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    massLevel: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    baseForceLevel: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    tauntLevel: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    epDamageResistance: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    epResistance: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    stunImmune: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>;
                    silenceImmune: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>;
                    sleepImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>, z.ZodUndefined]>;
                    frozenImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>, z.ZodUndefined]>;
                    levitateImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                }, {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                }>;
                applyWay: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>, z.ZodUndefined]>;
                motion: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>, z.ZodUndefined]>;
                enemyTags: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string[] | null;
                }, {
                    m_defined: boolean;
                    m_value: string[] | null;
                }>, z.ZodUndefined]>;
                lifePointReduce: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>;
                levelType: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>, z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>, z.ZodUndefined]>;
                rangeRadius: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>;
                numOfExtraDrops: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>, z.ZodUndefined]>;
                viewRadius: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>, z.ZodUndefined]>;
                notCountInTotal: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodBoolean;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: boolean;
                }, {
                    m_defined: boolean;
                    m_value: boolean;
                }>, z.ZodUndefined]>;
                talentBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull]>;
                skills: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    prefabKey: z.ZodString;
                    priority: z.ZodNumber;
                    cooldown: z.ZodNumber;
                    initCooldown: z.ZodNumber;
                    spCost: z.ZodNumber;
                    blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }>, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }, {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }>, "many">, z.ZodNull]>;
                spData: z.ZodUnion<[z.ZodObject<{
                    spType: z.ZodString;
                    maxSp: z.ZodNumber;
                    initSp: z.ZodNumber;
                    increment: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                }, {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                }>, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            }, {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            }>, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }, {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }>, "many">;
        waves: z.ZodArray<z.ZodObject<{
            preDelay: z.ZodNumber;
            postDelay: z.ZodNumber;
            maxTimeWaitingForNextWave: z.ZodNumber;
            fragments: z.ZodArray<z.ZodObject<{
                preDelay: z.ZodNumber;
                actions: z.ZodArray<z.ZodObject<{
                    actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    managedByScheduler: z.ZodBoolean;
                    key: z.ZodString;
                    count: z.ZodNumber;
                    preDelay: z.ZodNumber;
                    interval: z.ZodNumber;
                    routeIndex: z.ZodNumber;
                    blockFragment: z.ZodBoolean;
                    autoPreviewRoute: z.ZodBoolean;
                    autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                    hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                    weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                    dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }, {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }>, "many">;
                name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strict", z.ZodTypeAny, {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }, {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }>, "many">;
            advancedWaveTag: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strict", z.ZodTypeAny, {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }, {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }>, "many">;
        branches: z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodObject<{
            phases: z.ZodArray<z.ZodObject<{
                preDelay: z.ZodNumber;
                actions: z.ZodArray<z.ZodObject<{
                    actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    managedByScheduler: z.ZodBoolean;
                    key: z.ZodString;
                    count: z.ZodNumber;
                    preDelay: z.ZodNumber;
                    interval: z.ZodNumber;
                    routeIndex: z.ZodNumber;
                    blockFragment: z.ZodBoolean;
                    autoPreviewRoute: z.ZodBoolean;
                    autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                    hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                    weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                    dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }, {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }>, "many">;
                m_randomActionGroups: z.ZodOptional<z.ZodNull>;
                m_actionWithRandomSpawn: z.ZodOptional<z.ZodNull>;
                m_validActionPackKeys: z.ZodOptional<z.ZodNull>;
            }, "strict", z.ZodTypeAny, {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }, {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }>>, z.ZodNull]>;
        predefines: z.ZodUnion<[z.ZodObject<{
            characterInsts: z.ZodArray<z.ZodAny, "many">;
            tokenInsts: z.ZodArray<z.ZodObject<{
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    col: number;
                    row: number;
                }, {
                    col: number;
                    row: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                hidden: z.ZodBoolean;
                alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    level: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    level: number;
                }, {
                    key: string;
                    level: number;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
                inst: z.ZodObject<{
                    characterKey: z.ZodString;
                    level: z.ZodNumber;
                    phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    favorPoint: z.ZodNumber;
                    potentialRank: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                }, {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                }>;
                skillIndex: z.ZodNumber;
                mainSkillLvl: z.ZodNumber;
                skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }, {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }>, "many">;
            characterCards: z.ZodArray<z.ZodAny, "many">;
            tokenCards: z.ZodArray<z.ZodAny, "many">;
        }, "strict", z.ZodTypeAny, {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        }, {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        }>, z.ZodNull]>;
        hardPredefines: z.ZodUnion<[z.ZodObject<{
            characterInsts: z.ZodArray<z.ZodAny, "many">;
            tokenInsts: z.ZodArray<z.ZodObject<{
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    col: number;
                    row: number;
                }, {
                    col: number;
                    row: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                hidden: z.ZodBoolean;
                alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    level: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    level: number;
                }, {
                    key: string;
                    level: number;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
                inst: z.ZodObject<{
                    characterKey: z.ZodString;
                    level: z.ZodNumber;
                    phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    favorPoint: z.ZodNumber;
                    potentialRank: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                }, {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                }>;
                skillIndex: z.ZodNumber;
                mainSkillLvl: z.ZodNumber;
                skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }, {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }>, "many">;
            characterCards: z.ZodArray<z.ZodAny, "many">;
            tokenCards: z.ZodArray<z.ZodAny, "many">;
        }, "strict", z.ZodTypeAny, {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        }, {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        }>, z.ZodNull, z.ZodUndefined]>;
        excludeCharIdList: z.ZodNull;
        randomSeed: z.ZodNumber;
        operaConfig: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        runtimeData: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
    }, "strict", z.ZodTypeAny, {
        options: {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        };
        levelId: string | null;
        mapId: string | null;
        bgmEvent: string | null;
        environmentSe: string | null;
        mapData: {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        };
        tilesDisallowToLocate: any[];
        runes: {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }[] | null;
        globalBuffs: {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }[] | null;
        routes: ({
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        } | null)[];
        enemies: any[];
        enemyDbRefs: {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }[];
        waves: {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }[];
        branches: Record<string, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }> | null;
        predefines: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null;
        excludeCharIdList: null;
        randomSeed: number;
        extraRoutes?: any[] | undefined;
        hardPredefines?: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null | undefined;
        operaConfig?: string | null | undefined;
        runtimeData?: null | undefined;
    }, {
        options: {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        };
        levelId: string | null;
        mapId: string | null;
        bgmEvent: string | null;
        environmentSe: string | null;
        mapData: {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        };
        tilesDisallowToLocate: any[];
        runes: {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }[] | null;
        globalBuffs: {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }[] | null;
        routes: ({
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        } | null)[];
        enemies: any[];
        enemyDbRefs: {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }[];
        waves: {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }[];
        branches: Record<string, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }> | null;
        predefines: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null;
        excludeCharIdList: null;
        randomSeed: number;
        extraRoutes?: any[] | undefined;
        hardPredefines?: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null | undefined;
        operaConfig?: string | null | undefined;
        runtimeData?: null | undefined;
    }>;
}, "strict", z.ZodTypeAny, {
    levels: {
        options: {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        };
        levelId: string | null;
        mapId: string | null;
        bgmEvent: string | null;
        environmentSe: string | null;
        mapData: {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        };
        tilesDisallowToLocate: any[];
        runes: {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }[] | null;
        globalBuffs: {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }[] | null;
        routes: ({
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        } | null)[];
        enemies: any[];
        enemyDbRefs: {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }[];
        waves: {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }[];
        branches: Record<string, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }> | null;
        predefines: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null;
        excludeCharIdList: null;
        randomSeed: number;
        extraRoutes?: any[] | undefined;
        hardPredefines?: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null | undefined;
        operaConfig?: string | null | undefined;
        runtimeData?: null | undefined;
    };
    const: {
        location: string;
        name: string;
        description: string;
        levelId: string;
    };
}, {
    levels: {
        options: {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        };
        levelId: string | null;
        mapId: string | null;
        bgmEvent: string | null;
        environmentSe: string | null;
        mapData: {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        };
        tilesDisallowToLocate: any[];
        runes: {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }[] | null;
        globalBuffs: {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }[] | null;
        routes: ({
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        } | null)[];
        enemies: any[];
        enemyDbRefs: {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }[];
        waves: {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }[];
        branches: Record<string, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }> | null;
        predefines: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null;
        excludeCharIdList: null;
        randomSeed: number;
        extraRoutes?: any[] | undefined;
        hardPredefines?: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null | undefined;
        operaConfig?: string | null | undefined;
        runtimeData?: null | undefined;
    };
    const: {
        location: string;
        name: string;
        description: string;
        levelId: string;
    };
}>;
export declare const DefinitionZod: z.ZodObject<{
    termId: z.ZodString;
    termName: z.ZodString;
    description: z.ZodString;
}, "strict", z.ZodTypeAny, {
    description: string;
    termId: string;
    termName: string;
}, {
    description: string;
    termId: string;
    termName: string;
}>;
export declare const EnemyZod: z.ZodObject<{
    excel: z.ZodObject<{
        enemyId: z.ZodString;
        enemyIndex: z.ZodString;
        enemyTags: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
        sortId: z.ZodNumber;
        name: z.ZodString;
        enemyLevel: z.ZodEnum<["NORMAL", "ELITE", "BOSS"]>;
        description: z.ZodString;
        attackType: z.ZodNull;
        ability: z.ZodNull;
        isInvalidKilled: z.ZodBoolean;
        overrideKillCntInfos: z.ZodRecord<z.ZodString, z.ZodAny>;
        hideInHandbook: z.ZodBoolean;
        abilityList: z.ZodArray<z.ZodObject<{
            text: z.ZodString;
            textFormat: z.ZodEnum<["NORMAL", "SILENCE", "TITLE"]>;
        }, "strict", z.ZodTypeAny, {
            text: string;
            textFormat: "NORMAL" | "SILENCE" | "TITLE";
        }, {
            text: string;
            textFormat: "NORMAL" | "SILENCE" | "TITLE";
        }>, "many">;
        linkEnemies: z.ZodArray<z.ZodString, "many">;
        damageType: z.ZodArray<z.ZodEnum<["PHYSIC", "MAGIC", "NO_DAMAGE", "HEAL"]>, "many">;
        invisibleDetail: z.ZodBoolean;
    }, "strict", z.ZodTypeAny, {
        name: string;
        description: string;
        enemyTags: string[] | null;
        sortId: number;
        enemyId: string;
        enemyIndex: string;
        enemyLevel: "NORMAL" | "ELITE" | "BOSS";
        attackType: null;
        ability: null;
        isInvalidKilled: boolean;
        overrideKillCntInfos: Record<string, any>;
        hideInHandbook: boolean;
        abilityList: {
            text: string;
            textFormat: "NORMAL" | "SILENCE" | "TITLE";
        }[];
        linkEnemies: string[];
        damageType: ("PHYSIC" | "MAGIC" | "NO_DAMAGE" | "HEAL")[];
        invisibleDetail: boolean;
    }, {
        name: string;
        description: string;
        enemyTags: string[] | null;
        sortId: number;
        enemyId: string;
        enemyIndex: string;
        enemyLevel: "NORMAL" | "ELITE" | "BOSS";
        attackType: null;
        ability: null;
        isInvalidKilled: boolean;
        overrideKillCntInfos: Record<string, any>;
        hideInHandbook: boolean;
        abilityList: {
            text: string;
            textFormat: "NORMAL" | "SILENCE" | "TITLE";
        }[];
        linkEnemies: string[];
        damageType: ("PHYSIC" | "MAGIC" | "NO_DAMAGE" | "HEAL")[];
        invisibleDetail: boolean;
    }>;
    levels: z.ZodObject<{
        Key: z.ZodString;
        Value: z.ZodArray<z.ZodObject<{
            level: z.ZodNumber;
            enemyData: z.ZodObject<{
                name: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>;
                description: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>;
                prefabKey: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>;
                attributes: z.ZodObject<{
                    maxHp: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    atk: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    def: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    magicResistance: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    cost: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    blockCnt: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    moveSpeed: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    attackSpeed: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    baseAttackTime: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    respawnTime: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    hpRecoveryPerSec: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    spRecoveryPerSec: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    maxDeployCount: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    massLevel: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    baseForceLevel: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    tauntLevel: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    epDamageResistance: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    epResistance: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    stunImmune: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>;
                    silenceImmune: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>;
                    sleepImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>, z.ZodUndefined]>;
                    frozenImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>, z.ZodUndefined]>;
                    levitateImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                }, {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                }>;
                applyWay: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>, z.ZodUndefined]>;
                motion: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>, z.ZodUndefined]>;
                enemyTags: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string[] | null;
                }, {
                    m_defined: boolean;
                    m_value: string[] | null;
                }>, z.ZodUndefined]>;
                lifePointReduce: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>;
                levelType: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>, z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>, z.ZodUndefined]>;
                rangeRadius: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>;
                numOfExtraDrops: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>, z.ZodUndefined]>;
                viewRadius: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>, z.ZodUndefined]>;
                notCountInTotal: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodBoolean;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: boolean;
                }, {
                    m_defined: boolean;
                    m_value: boolean;
                }>, z.ZodUndefined]>;
                talentBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull]>;
                skills: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    prefabKey: z.ZodString;
                    priority: z.ZodNumber;
                    cooldown: z.ZodNumber;
                    initCooldown: z.ZodNumber;
                    spCost: z.ZodNumber;
                    blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }>, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }, {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }>, "many">, z.ZodNull]>;
                spData: z.ZodUnion<[z.ZodObject<{
                    spType: z.ZodString;
                    maxSp: z.ZodNumber;
                    initSp: z.ZodNumber;
                    increment: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                }, {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                }>, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            }, {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            }>;
        }, "strict", z.ZodTypeAny, {
            level: number;
            enemyData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            };
        }, {
            level: number;
            enemyData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            };
        }>, "many">;
    }, "strict", z.ZodTypeAny, {
        Key: string;
        Value: {
            level: number;
            enemyData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            };
        }[];
    }, {
        Key: string;
        Value: {
            level: number;
            enemyData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            };
        }[];
    }>;
}, "strict", z.ZodTypeAny, {
    excel: {
        name: string;
        description: string;
        enemyTags: string[] | null;
        sortId: number;
        enemyId: string;
        enemyIndex: string;
        enemyLevel: "NORMAL" | "ELITE" | "BOSS";
        attackType: null;
        ability: null;
        isInvalidKilled: boolean;
        overrideKillCntInfos: Record<string, any>;
        hideInHandbook: boolean;
        abilityList: {
            text: string;
            textFormat: "NORMAL" | "SILENCE" | "TITLE";
        }[];
        linkEnemies: string[];
        damageType: ("PHYSIC" | "MAGIC" | "NO_DAMAGE" | "HEAL")[];
        invisibleDetail: boolean;
    };
    levels: {
        Key: string;
        Value: {
            level: number;
            enemyData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            };
        }[];
    };
}, {
    excel: {
        name: string;
        description: string;
        enemyTags: string[] | null;
        sortId: number;
        enemyId: string;
        enemyIndex: string;
        enemyLevel: "NORMAL" | "ELITE" | "BOSS";
        attackType: null;
        ability: null;
        isInvalidKilled: boolean;
        overrideKillCntInfos: Record<string, any>;
        hideInHandbook: boolean;
        abilityList: {
            text: string;
            textFormat: "NORMAL" | "SILENCE" | "TITLE";
        }[];
        linkEnemies: string[];
        damageType: ("PHYSIC" | "MAGIC" | "NO_DAMAGE" | "HEAL")[];
        invisibleDetail: boolean;
    };
    levels: {
        Key: string;
        Value: {
            level: number;
            enemyData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            };
        }[];
    };
}>;
export declare const GameEventZod: z.ZodObject<{
    id: z.ZodString;
    type: z.ZodString;
    displayType: z.ZodString;
    name: z.ZodString;
    startTime: z.ZodNumber;
    endTime: z.ZodNumber;
    rewardEndTime: z.ZodNumber;
    displayOnHome: z.ZodBoolean;
    hasStage: z.ZodBoolean;
    templateShopId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    medalGroupId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    ungroupedMedalIds: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
    isReplicate: z.ZodBoolean;
    needFixedSync: z.ZodBoolean;
}, "strict", z.ZodTypeAny, {
    type: string;
    endTime: number;
    startTime: number;
    id: string;
    name: string;
    displayType: string;
    rewardEndTime: number;
    displayOnHome: boolean;
    hasStage: boolean;
    templateShopId: string | null;
    medalGroupId: string | null;
    ungroupedMedalIds: string[] | null;
    isReplicate: boolean;
    needFixedSync: boolean;
}, {
    type: string;
    endTime: number;
    startTime: number;
    id: string;
    name: string;
    displayType: string;
    rewardEndTime: number;
    displayOnHome: boolean;
    hasStage: boolean;
    templateShopId: string | null;
    medalGroupId: string | null;
    ungroupedMedalIds: string[] | null;
    isReplicate: boolean;
    needFixedSync: boolean;
}>;
export declare const GridRangeZod: z.ZodObject<{
    id: z.ZodString;
    direction: z.ZodNumber;
    grids: z.ZodArray<z.ZodObject<{
        row: z.ZodNumber;
        col: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        col: number;
        row: number;
    }, {
        col: number;
        row: number;
    }>, "many">;
}, "strict", z.ZodTypeAny, {
    id: string;
    direction: number;
    grids: {
        col: number;
        row: number;
    }[];
}, {
    id: string;
    direction: number;
    grids: {
        col: number;
        row: number;
    }[];
}>;
export declare const ItemZod: z.ZodObject<{
    data: z.ZodObject<{
        itemId: z.ZodString;
        name: z.ZodString;
        description: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        rarity: z.ZodString;
        iconId: z.ZodString;
        overrideBkg: z.ZodNull;
        stackIconId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        sortId: z.ZodNumber;
        usage: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        obtainApproach: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        hideInItemGet: z.ZodBoolean;
        classifyType: z.ZodString;
        itemType: z.ZodString;
        stageDropList: z.ZodArray<z.ZodObject<{
            stageId: z.ZodString;
            occPer: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            stageId: string;
            occPer: string;
        }, {
            stageId: string;
            occPer: string;
        }>, "many">;
        buildingProductList: z.ZodArray<z.ZodObject<{
            roomType: z.ZodString;
            formulaId: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            formulaId: string;
            roomType: string;
        }, {
            formulaId: string;
            roomType: string;
        }>, "many">;
    }, "strict", z.ZodTypeAny, {
        name: string;
        description: string | null;
        itemId: string;
        sortId: number;
        rarity: string;
        usage: string | null;
        obtainApproach: string | null;
        iconId: string;
        overrideBkg: null;
        stackIconId: string | null;
        hideInItemGet: boolean;
        classifyType: string;
        itemType: string;
        stageDropList: {
            stageId: string;
            occPer: string;
        }[];
        buildingProductList: {
            formulaId: string;
            roomType: string;
        }[];
    }, {
        name: string;
        description: string | null;
        itemId: string;
        sortId: number;
        rarity: string;
        usage: string | null;
        obtainApproach: string | null;
        iconId: string;
        overrideBkg: null;
        stackIconId: string | null;
        hideInItemGet: boolean;
        classifyType: string;
        itemType: string;
        stageDropList: {
            stageId: string;
            occPer: string;
        }[];
        buildingProductList: {
            formulaId: string;
            roomType: string;
        }[];
    }>;
    formula: z.ZodUnion<[z.ZodObject<{
        formulaId: z.ZodString;
        itemId: z.ZodString;
        count: z.ZodNumber;
        weight: z.ZodNumber;
        costPoint: z.ZodNumber;
        formulaType: z.ZodString;
        buffType: z.ZodString;
        costs: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            count: z.ZodNumber;
            type: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            type: string;
            id: string;
            count: number;
        }, {
            type: string;
            id: string;
            count: number;
        }>, "many">;
        requireRooms: z.ZodArray<z.ZodObject<{
            roomId: z.ZodString;
            roomLevel: z.ZodNumber;
            roomCount: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            roomId: string;
            roomLevel: number;
            roomCount: number;
        }, {
            roomId: string;
            roomLevel: number;
            roomCount: number;
        }>, "many">;
        requireStages: z.ZodArray<z.ZodObject<{
            stageId: z.ZodString;
            rank: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            stageId: string;
            rank: number;
        }, {
            stageId: string;
            rank: number;
        }>, "many">;
    }, "strict", z.ZodTypeAny, {
        count: number;
        formulaId: string;
        itemId: string;
        weight: number;
        costPoint: number;
        formulaType: string;
        buffType: string;
        costs: {
            type: string;
            id: string;
            count: number;
        }[];
        requireRooms: {
            roomId: string;
            roomLevel: number;
            roomCount: number;
        }[];
        requireStages: {
            stageId: string;
            rank: number;
        }[];
    }, {
        count: number;
        formulaId: string;
        itemId: string;
        weight: number;
        costPoint: number;
        formulaType: string;
        buffType: string;
        costs: {
            type: string;
            id: string;
            count: number;
        }[];
        requireRooms: {
            roomId: string;
            roomLevel: number;
            roomCount: number;
        }[];
        requireStages: {
            stageId: string;
            rank: number;
        }[];
    }>, z.ZodObject<{
        sortId: z.ZodNumber;
        formulaId: z.ZodString;
        rarity: z.ZodNumber;
        itemId: z.ZodString;
        count: z.ZodNumber;
        goldCost: z.ZodNumber;
        apCost: z.ZodNumber;
        formulaType: z.ZodString;
        buffType: z.ZodString;
        extraOutcomeRate: z.ZodNumber;
        extraOutcomeGroup: z.ZodArray<z.ZodObject<{
            weight: z.ZodNumber;
            itemId: z.ZodString;
            itemCount: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            itemId: string;
            weight: number;
            itemCount: number;
        }, {
            itemId: string;
            weight: number;
            itemCount: number;
        }>, "many">;
        costs: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            count: z.ZodNumber;
            type: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            type: string;
            id: string;
            count: number;
        }, {
            type: string;
            id: string;
            count: number;
        }>, "many">;
        requireRooms: z.ZodArray<z.ZodObject<{
            roomId: z.ZodString;
            roomLevel: z.ZodNumber;
            roomCount: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            roomId: string;
            roomLevel: number;
            roomCount: number;
        }, {
            roomId: string;
            roomLevel: number;
            roomCount: number;
        }>, "many">;
        requireStages: z.ZodArray<z.ZodObject<{
            stageId: z.ZodString;
            rank: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            stageId: string;
            rank: number;
        }, {
            stageId: string;
            rank: number;
        }>, "many">;
    }, "strict", z.ZodTypeAny, {
        count: number;
        formulaId: string;
        itemId: string;
        formulaType: string;
        buffType: string;
        costs: {
            type: string;
            id: string;
            count: number;
        }[];
        requireRooms: {
            roomId: string;
            roomLevel: number;
            roomCount: number;
        }[];
        requireStages: {
            stageId: string;
            rank: number;
        }[];
        sortId: number;
        rarity: number;
        goldCost: number;
        apCost: number;
        extraOutcomeRate: number;
        extraOutcomeGroup: {
            itemId: string;
            weight: number;
            itemCount: number;
        }[];
    }, {
        count: number;
        formulaId: string;
        itemId: string;
        formulaType: string;
        buffType: string;
        costs: {
            type: string;
            id: string;
            count: number;
        }[];
        requireRooms: {
            roomId: string;
            roomLevel: number;
            roomCount: number;
        }[];
        requireStages: {
            stageId: string;
            rank: number;
        }[];
        sortId: number;
        rarity: number;
        goldCost: number;
        apCost: number;
        extraOutcomeRate: number;
        extraOutcomeGroup: {
            itemId: string;
            weight: number;
            itemCount: number;
        }[];
    }>, z.ZodNull]>;
}, "strict", z.ZodTypeAny, {
    data: {
        name: string;
        description: string | null;
        itemId: string;
        sortId: number;
        rarity: string;
        usage: string | null;
        obtainApproach: string | null;
        iconId: string;
        overrideBkg: null;
        stackIconId: string | null;
        hideInItemGet: boolean;
        classifyType: string;
        itemType: string;
        stageDropList: {
            stageId: string;
            occPer: string;
        }[];
        buildingProductList: {
            formulaId: string;
            roomType: string;
        }[];
    };
    formula: (({
        count: number;
        formulaId: string;
        itemId: string;
        weight: number;
        costPoint: number;
        formulaType: string;
        buffType: string;
        costs: {
            type: string;
            id: string;
            count: number;
        }[];
        requireRooms: {
            roomId: string;
            roomLevel: number;
            roomCount: number;
        }[];
        requireStages: {
            stageId: string;
            rank: number;
        }[];
    } | {
        count: number;
        formulaId: string;
        itemId: string;
        formulaType: string;
        buffType: string;
        costs: {
            type: string;
            id: string;
            count: number;
        }[];
        requireRooms: {
            roomId: string;
            roomLevel: number;
            roomCount: number;
        }[];
        requireStages: {
            stageId: string;
            rank: number;
        }[];
        sortId: number;
        rarity: number;
        goldCost: number;
        apCost: number;
        extraOutcomeRate: number;
        extraOutcomeGroup: {
            itemId: string;
            weight: number;
            itemCount: number;
        }[];
    }) & ({
        count: number;
        formulaId: string;
        itemId: string;
        weight: number;
        costPoint: number;
        formulaType: string;
        buffType: string;
        costs: {
            type: string;
            id: string;
            count: number;
        }[];
        requireRooms: {
            roomId: string;
            roomLevel: number;
            roomCount: number;
        }[];
        requireStages: {
            stageId: string;
            rank: number;
        }[];
    } | {
        count: number;
        formulaId: string;
        itemId: string;
        formulaType: string;
        buffType: string;
        costs: {
            type: string;
            id: string;
            count: number;
        }[];
        requireRooms: {
            roomId: string;
            roomLevel: number;
            roomCount: number;
        }[];
        requireStages: {
            stageId: string;
            rank: number;
        }[];
        sortId: number;
        rarity: number;
        goldCost: number;
        apCost: number;
        extraOutcomeRate: number;
        extraOutcomeGroup: {
            itemId: string;
            weight: number;
            itemCount: number;
        }[];
    } | undefined)) | null;
}, {
    data: {
        name: string;
        description: string | null;
        itemId: string;
        sortId: number;
        rarity: string;
        usage: string | null;
        obtainApproach: string | null;
        iconId: string;
        overrideBkg: null;
        stackIconId: string | null;
        hideInItemGet: boolean;
        classifyType: string;
        itemType: string;
        stageDropList: {
            stageId: string;
            occPer: string;
        }[];
        buildingProductList: {
            formulaId: string;
            roomType: string;
        }[];
    };
    formula: (({
        count: number;
        formulaId: string;
        itemId: string;
        weight: number;
        costPoint: number;
        formulaType: string;
        buffType: string;
        costs: {
            type: string;
            id: string;
            count: number;
        }[];
        requireRooms: {
            roomId: string;
            roomLevel: number;
            roomCount: number;
        }[];
        requireStages: {
            stageId: string;
            rank: number;
        }[];
    } | {
        count: number;
        formulaId: string;
        itemId: string;
        formulaType: string;
        buffType: string;
        costs: {
            type: string;
            id: string;
            count: number;
        }[];
        requireRooms: {
            roomId: string;
            roomLevel: number;
            roomCount: number;
        }[];
        requireStages: {
            stageId: string;
            rank: number;
        }[];
        sortId: number;
        rarity: number;
        goldCost: number;
        apCost: number;
        extraOutcomeRate: number;
        extraOutcomeGroup: {
            itemId: string;
            weight: number;
            itemCount: number;
        }[];
    }) & ({
        count: number;
        formulaId: string;
        itemId: string;
        weight: number;
        costPoint: number;
        formulaType: string;
        buffType: string;
        costs: {
            type: string;
            id: string;
            count: number;
        }[];
        requireRooms: {
            roomId: string;
            roomLevel: number;
            roomCount: number;
        }[];
        requireStages: {
            stageId: string;
            rank: number;
        }[];
    } | {
        count: number;
        formulaId: string;
        itemId: string;
        formulaType: string;
        buffType: string;
        costs: {
            type: string;
            id: string;
            count: number;
        }[];
        requireRooms: {
            roomId: string;
            roomLevel: number;
            roomCount: number;
        }[];
        requireStages: {
            stageId: string;
            rank: number;
        }[];
        sortId: number;
        rarity: number;
        goldCost: number;
        apCost: number;
        extraOutcomeRate: number;
        extraOutcomeGroup: {
            itemId: string;
            weight: number;
            itemCount: number;
        }[];
    } | undefined)) | null;
}>;
export declare const ModuleZod: z.ZodObject<{
    info: z.ZodObject<{
        uniEquipId: z.ZodString;
        uniEquipName: z.ZodString;
        uniEquipIcon: z.ZodString;
        uniEquipDesc: z.ZodString;
        typeIcon: z.ZodString;
        typeName1: z.ZodString;
        typeName2: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        equipShiningColor: z.ZodString;
        showEvolvePhase: z.ZodString;
        unlockEvolvePhase: z.ZodString;
        charId: z.ZodString;
        tmplId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        showLevel: z.ZodNumber;
        unlockLevel: z.ZodNumber;
        unlockFavorPoint: z.ZodNumber;
        missionList: z.ZodArray<z.ZodString, "many">;
        itemCost: z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            count: z.ZodNumber;
            type: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            type: string;
            id: string;
            count: number;
        }, {
            type: string;
            id: string;
            count: number;
        }>, "many">>, z.ZodNull]>;
        type: z.ZodString;
        uniEquipGetTime: z.ZodNumber;
        charEquipOrder: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        type: string;
        tmplId: string | null;
        uniEquipId: string;
        uniEquipName: string;
        uniEquipIcon: string;
        uniEquipDesc: string;
        typeIcon: string;
        typeName1: string;
        typeName2: string | null;
        equipShiningColor: string;
        showEvolvePhase: string;
        unlockEvolvePhase: string;
        charId: string;
        showLevel: number;
        unlockLevel: number;
        unlockFavorPoint: number;
        missionList: string[];
        itemCost: Record<string, {
            type: string;
            id: string;
            count: number;
        }[]> | null;
        uniEquipGetTime: number;
        charEquipOrder: number;
    }, {
        type: string;
        tmplId: string | null;
        uniEquipId: string;
        uniEquipName: string;
        uniEquipIcon: string;
        uniEquipDesc: string;
        typeIcon: string;
        typeName1: string;
        typeName2: string | null;
        equipShiningColor: string;
        showEvolvePhase: string;
        unlockEvolvePhase: string;
        charId: string;
        showLevel: number;
        unlockLevel: number;
        unlockFavorPoint: number;
        missionList: string[];
        itemCost: Record<string, {
            type: string;
            id: string;
            count: number;
        }[]> | null;
        uniEquipGetTime: number;
        charEquipOrder: number;
    }>;
    data: z.ZodUnion<[z.ZodObject<{
        phases: z.ZodArray<z.ZodObject<{
            equipLevel: z.ZodNumber;
            parts: z.ZodArray<z.ZodObject<{
                resKey: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                target: z.ZodString;
                isToken: z.ZodBoolean;
                addOrOverrideTalentDataBundle: z.ZodObject<{
                    candidates: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        displayRangeId: z.ZodBoolean;
                        upgradeDescription: z.ZodString;
                        talentIndex: z.ZodNumber;
                        unlockCondition: z.ZodObject<{
                            phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                            level: z.ZodNumber;
                        }, "strict", z.ZodTypeAny, {
                            level: number;
                            phase: string | number;
                        }, {
                            level: number;
                            phase: string | number;
                        }>;
                        requiredPotentialRank: z.ZodNumber;
                        prefabKey: z.ZodString;
                        name: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        description: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        rangeId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        blackboard: z.ZodArray<z.ZodObject<{
                            key: z.ZodString;
                            value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                            valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        }, "strict", z.ZodTypeAny, {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }, {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }>, "many">;
                        tokenKey: z.ZodOptional<z.ZodString>;
                    }, "strict", z.ZodTypeAny, {
                        name: string | null;
                        description: string | null;
                        prefabKey: string;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[];
                        displayRangeId: boolean;
                        upgradeDescription: string;
                        talentIndex: number;
                        unlockCondition: {
                            level: number;
                            phase: string | number;
                        };
                        requiredPotentialRank: number;
                        rangeId: string | null;
                        tokenKey?: string | undefined;
                    }, {
                        name: string | null;
                        description: string | null;
                        prefabKey: string;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[];
                        displayRangeId: boolean;
                        upgradeDescription: string;
                        talentIndex: number;
                        unlockCondition: {
                            level: number;
                            phase: string | number;
                        };
                        requiredPotentialRank: number;
                        rangeId: string | null;
                        tokenKey?: string | undefined;
                    }>, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    candidates: {
                        name: string | null;
                        description: string | null;
                        prefabKey: string;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[];
                        displayRangeId: boolean;
                        upgradeDescription: string;
                        talentIndex: number;
                        unlockCondition: {
                            level: number;
                            phase: string | number;
                        };
                        requiredPotentialRank: number;
                        rangeId: string | null;
                        tokenKey?: string | undefined;
                    }[] | null;
                }, {
                    candidates: {
                        name: string | null;
                        description: string | null;
                        prefabKey: string;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[];
                        displayRangeId: boolean;
                        upgradeDescription: string;
                        talentIndex: number;
                        unlockCondition: {
                            level: number;
                            phase: string | number;
                        };
                        requiredPotentialRank: number;
                        rangeId: string | null;
                        tokenKey?: string | undefined;
                    }[] | null;
                }>;
                overrideTraitDataBundle: z.ZodObject<{
                    candidates: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        additionalDescription: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        unlockCondition: z.ZodObject<{
                            phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                            level: z.ZodNumber;
                        }, "strict", z.ZodTypeAny, {
                            level: number;
                            phase: string | number;
                        }, {
                            level: number;
                            phase: string | number;
                        }>;
                        requiredPotentialRank: z.ZodNumber;
                        blackboard: z.ZodArray<z.ZodObject<{
                            key: z.ZodString;
                            value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                            valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        }, "strict", z.ZodTypeAny, {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }, {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }>, "many">;
                        overrideDescripton: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        prefabKey: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        rangeId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        prefabKey: string | null;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[];
                        unlockCondition: {
                            level: number;
                            phase: string | number;
                        };
                        requiredPotentialRank: number;
                        rangeId: string | null;
                        additionalDescription: string | null;
                        overrideDescripton: string | null;
                    }, {
                        prefabKey: string | null;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[];
                        unlockCondition: {
                            level: number;
                            phase: string | number;
                        };
                        requiredPotentialRank: number;
                        rangeId: string | null;
                        additionalDescription: string | null;
                        overrideDescripton: string | null;
                    }>, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    candidates: {
                        prefabKey: string | null;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[];
                        unlockCondition: {
                            level: number;
                            phase: string | number;
                        };
                        requiredPotentialRank: number;
                        rangeId: string | null;
                        additionalDescription: string | null;
                        overrideDescripton: string | null;
                    }[] | null;
                }, {
                    candidates: {
                        prefabKey: string | null;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[];
                        unlockCondition: {
                            level: number;
                            phase: string | number;
                        };
                        requiredPotentialRank: number;
                        rangeId: string | null;
                        additionalDescription: string | null;
                        overrideDescripton: string | null;
                    }[] | null;
                }>;
            }, "strict", z.ZodTypeAny, {
                target: string;
                resKey: string | null;
                isToken: boolean;
                addOrOverrideTalentDataBundle: {
                    candidates: {
                        name: string | null;
                        description: string | null;
                        prefabKey: string;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[];
                        displayRangeId: boolean;
                        upgradeDescription: string;
                        talentIndex: number;
                        unlockCondition: {
                            level: number;
                            phase: string | number;
                        };
                        requiredPotentialRank: number;
                        rangeId: string | null;
                        tokenKey?: string | undefined;
                    }[] | null;
                };
                overrideTraitDataBundle: {
                    candidates: {
                        prefabKey: string | null;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[];
                        unlockCondition: {
                            level: number;
                            phase: string | number;
                        };
                        requiredPotentialRank: number;
                        rangeId: string | null;
                        additionalDescription: string | null;
                        overrideDescripton: string | null;
                    }[] | null;
                };
            }, {
                target: string;
                resKey: string | null;
                isToken: boolean;
                addOrOverrideTalentDataBundle: {
                    candidates: {
                        name: string | null;
                        description: string | null;
                        prefabKey: string;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[];
                        displayRangeId: boolean;
                        upgradeDescription: string;
                        talentIndex: number;
                        unlockCondition: {
                            level: number;
                            phase: string | number;
                        };
                        requiredPotentialRank: number;
                        rangeId: string | null;
                        tokenKey?: string | undefined;
                    }[] | null;
                };
                overrideTraitDataBundle: {
                    candidates: {
                        prefabKey: string | null;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[];
                        unlockCondition: {
                            level: number;
                            phase: string | number;
                        };
                        requiredPotentialRank: number;
                        rangeId: string | null;
                        additionalDescription: string | null;
                        overrideDescripton: string | null;
                    }[] | null;
                };
            }>, "many">;
            attributeBlackboard: z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }>, "many">;
            tokenAttributeBlackboard: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }>, "many">>;
        }, "strict", z.ZodTypeAny, {
            equipLevel: number;
            parts: {
                target: string;
                resKey: string | null;
                isToken: boolean;
                addOrOverrideTalentDataBundle: {
                    candidates: {
                        name: string | null;
                        description: string | null;
                        prefabKey: string;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[];
                        displayRangeId: boolean;
                        upgradeDescription: string;
                        talentIndex: number;
                        unlockCondition: {
                            level: number;
                            phase: string | number;
                        };
                        requiredPotentialRank: number;
                        rangeId: string | null;
                        tokenKey?: string | undefined;
                    }[] | null;
                };
                overrideTraitDataBundle: {
                    candidates: {
                        prefabKey: string | null;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[];
                        unlockCondition: {
                            level: number;
                            phase: string | number;
                        };
                        requiredPotentialRank: number;
                        rangeId: string | null;
                        additionalDescription: string | null;
                        overrideDescripton: string | null;
                    }[] | null;
                };
            }[];
            attributeBlackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            tokenAttributeBlackboard: Record<string, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[]>;
        }, {
            equipLevel: number;
            parts: {
                target: string;
                resKey: string | null;
                isToken: boolean;
                addOrOverrideTalentDataBundle: {
                    candidates: {
                        name: string | null;
                        description: string | null;
                        prefabKey: string;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[];
                        displayRangeId: boolean;
                        upgradeDescription: string;
                        talentIndex: number;
                        unlockCondition: {
                            level: number;
                            phase: string | number;
                        };
                        requiredPotentialRank: number;
                        rangeId: string | null;
                        tokenKey?: string | undefined;
                    }[] | null;
                };
                overrideTraitDataBundle: {
                    candidates: {
                        prefabKey: string | null;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[];
                        unlockCondition: {
                            level: number;
                            phase: string | number;
                        };
                        requiredPotentialRank: number;
                        rangeId: string | null;
                        additionalDescription: string | null;
                        overrideDescripton: string | null;
                    }[] | null;
                };
            }[];
            attributeBlackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            tokenAttributeBlackboard: Record<string, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[]>;
        }>, "many">;
    }, "strict", z.ZodTypeAny, {
        phases: {
            equipLevel: number;
            parts: {
                target: string;
                resKey: string | null;
                isToken: boolean;
                addOrOverrideTalentDataBundle: {
                    candidates: {
                        name: string | null;
                        description: string | null;
                        prefabKey: string;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[];
                        displayRangeId: boolean;
                        upgradeDescription: string;
                        talentIndex: number;
                        unlockCondition: {
                            level: number;
                            phase: string | number;
                        };
                        requiredPotentialRank: number;
                        rangeId: string | null;
                        tokenKey?: string | undefined;
                    }[] | null;
                };
                overrideTraitDataBundle: {
                    candidates: {
                        prefabKey: string | null;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[];
                        unlockCondition: {
                            level: number;
                            phase: string | number;
                        };
                        requiredPotentialRank: number;
                        rangeId: string | null;
                        additionalDescription: string | null;
                        overrideDescripton: string | null;
                    }[] | null;
                };
            }[];
            attributeBlackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            tokenAttributeBlackboard: Record<string, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[]>;
        }[];
    }, {
        phases: {
            equipLevel: number;
            parts: {
                target: string;
                resKey: string | null;
                isToken: boolean;
                addOrOverrideTalentDataBundle: {
                    candidates: {
                        name: string | null;
                        description: string | null;
                        prefabKey: string;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[];
                        displayRangeId: boolean;
                        upgradeDescription: string;
                        talentIndex: number;
                        unlockCondition: {
                            level: number;
                            phase: string | number;
                        };
                        requiredPotentialRank: number;
                        rangeId: string | null;
                        tokenKey?: string | undefined;
                    }[] | null;
                };
                overrideTraitDataBundle: {
                    candidates: {
                        prefabKey: string | null;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[];
                        unlockCondition: {
                            level: number;
                            phase: string | number;
                        };
                        requiredPotentialRank: number;
                        rangeId: string | null;
                        additionalDescription: string | null;
                        overrideDescripton: string | null;
                    }[] | null;
                };
            }[];
            attributeBlackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            tokenAttributeBlackboard: Record<string, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[]>;
        }[];
    }>, z.ZodNull]>;
}, "strict", z.ZodTypeAny, {
    data: {
        phases: {
            equipLevel: number;
            parts: {
                target: string;
                resKey: string | null;
                isToken: boolean;
                addOrOverrideTalentDataBundle: {
                    candidates: {
                        name: string | null;
                        description: string | null;
                        prefabKey: string;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[];
                        displayRangeId: boolean;
                        upgradeDescription: string;
                        talentIndex: number;
                        unlockCondition: {
                            level: number;
                            phase: string | number;
                        };
                        requiredPotentialRank: number;
                        rangeId: string | null;
                        tokenKey?: string | undefined;
                    }[] | null;
                };
                overrideTraitDataBundle: {
                    candidates: {
                        prefabKey: string | null;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[];
                        unlockCondition: {
                            level: number;
                            phase: string | number;
                        };
                        requiredPotentialRank: number;
                        rangeId: string | null;
                        additionalDescription: string | null;
                        overrideDescripton: string | null;
                    }[] | null;
                };
            }[];
            attributeBlackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            tokenAttributeBlackboard: Record<string, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[]>;
        }[];
    } | null;
    info: {
        type: string;
        tmplId: string | null;
        uniEquipId: string;
        uniEquipName: string;
        uniEquipIcon: string;
        uniEquipDesc: string;
        typeIcon: string;
        typeName1: string;
        typeName2: string | null;
        equipShiningColor: string;
        showEvolvePhase: string;
        unlockEvolvePhase: string;
        charId: string;
        showLevel: number;
        unlockLevel: number;
        unlockFavorPoint: number;
        missionList: string[];
        itemCost: Record<string, {
            type: string;
            id: string;
            count: number;
        }[]> | null;
        uniEquipGetTime: number;
        charEquipOrder: number;
    };
}, {
    data: {
        phases: {
            equipLevel: number;
            parts: {
                target: string;
                resKey: string | null;
                isToken: boolean;
                addOrOverrideTalentDataBundle: {
                    candidates: {
                        name: string | null;
                        description: string | null;
                        prefabKey: string;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[];
                        displayRangeId: boolean;
                        upgradeDescription: string;
                        talentIndex: number;
                        unlockCondition: {
                            level: number;
                            phase: string | number;
                        };
                        requiredPotentialRank: number;
                        rangeId: string | null;
                        tokenKey?: string | undefined;
                    }[] | null;
                };
                overrideTraitDataBundle: {
                    candidates: {
                        prefabKey: string | null;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[];
                        unlockCondition: {
                            level: number;
                            phase: string | number;
                        };
                        requiredPotentialRank: number;
                        rangeId: string | null;
                        additionalDescription: string | null;
                        overrideDescripton: string | null;
                    }[] | null;
                };
            }[];
            attributeBlackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            tokenAttributeBlackboard: Record<string, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[]>;
        }[];
    } | null;
    info: {
        type: string;
        tmplId: string | null;
        uniEquipId: string;
        uniEquipName: string;
        uniEquipIcon: string;
        uniEquipDesc: string;
        typeIcon: string;
        typeName1: string;
        typeName2: string | null;
        equipShiningColor: string;
        showEvolvePhase: string;
        unlockEvolvePhase: string;
        charId: string;
        showLevel: number;
        unlockLevel: number;
        unlockFavorPoint: number;
        missionList: string[];
        itemCost: Record<string, {
            type: string;
            id: string;
            count: number;
        }[]> | null;
        uniEquipGetTime: number;
        charEquipOrder: number;
    };
}>;
export declare const ParadoxZod: z.ZodObject<{
    excel: z.ZodObject<{
        charId: z.ZodString;
        stageId: z.ZodString;
        levelId: z.ZodString;
        zoneId: z.ZodString;
        code: z.ZodString;
        name: z.ZodString;
        loadingPicId: z.ZodString;
        description: z.ZodString;
        unlockParam: z.ZodArray<z.ZodObject<{
            unlockType: z.ZodString;
            unlockParam1: z.ZodString;
            unlockParam2: z.ZodString;
            unlockParam3: z.ZodNull;
        }, "strict", z.ZodTypeAny, {
            unlockType: string;
            unlockParam1: string;
            unlockParam2: string;
            unlockParam3: null;
        }, {
            unlockType: string;
            unlockParam1: string;
            unlockParam2: string;
            unlockParam3: null;
        }>, "many">;
        rewardItem: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            count: z.ZodNumber;
            type: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            type: string;
            id: string;
            count: number;
        }, {
            type: string;
            id: string;
            count: number;
        }>, "many">;
        stageNameForShow: z.ZodString;
        zoneNameForShow: z.ZodString;
        picId: z.ZodString;
        stageGetTime: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        code: string;
        name: string;
        description: string;
        stageId: string;
        levelId: string;
        loadingPicId: string;
        charId: string;
        zoneId: string;
        unlockParam: {
            unlockType: string;
            unlockParam1: string;
            unlockParam2: string;
            unlockParam3: null;
        }[];
        rewardItem: {
            type: string;
            id: string;
            count: number;
        }[];
        stageNameForShow: string;
        zoneNameForShow: string;
        picId: string;
        stageGetTime: number;
    }, {
        code: string;
        name: string;
        description: string;
        stageId: string;
        levelId: string;
        loadingPicId: string;
        charId: string;
        zoneId: string;
        unlockParam: {
            unlockType: string;
            unlockParam1: string;
            unlockParam2: string;
            unlockParam3: null;
        }[];
        rewardItem: {
            type: string;
            id: string;
            count: number;
        }[];
        stageNameForShow: string;
        zoneNameForShow: string;
        picId: string;
        stageGetTime: number;
    }>;
    levels: z.ZodObject<{
        options: z.ZodObject<{
            characterLimit: z.ZodNumber;
            maxLifePoint: z.ZodNumber;
            initialCost: z.ZodNumber;
            maxCost: z.ZodNumber;
            costIncreaseTime: z.ZodNumber;
            moveMultiplier: z.ZodNumber;
            steeringEnabled: z.ZodBoolean;
            isTrainingLevel: z.ZodBoolean;
            isHardTrainingLevel: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            isPredefinedCardsSelectable: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            maxPlayTime: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
            functionDisableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            configBlackBoard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }>, "many">, z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        }, {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        }>;
        levelId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        mapId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        bgmEvent: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        environmentSe: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        mapData: z.ZodObject<{
            map: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
            tiles: z.ZodArray<z.ZodObject<{
                tileKey: z.ZodString;
                heightType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                buildableType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                passableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                playerSideMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull]>;
                effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    offset: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                        z: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        x: number;
                        y: number;
                        z: number;
                    }, {
                        x: number;
                        y: number;
                        z: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                }, "strict", z.ZodTypeAny, {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }, {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }>, "many">, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }, {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }>, "many">;
            blockEdges: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodNull]>;
            tags: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
            effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                offset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                    z: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: number;
                    y: number;
                    z: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            }, "strict", z.ZodTypeAny, {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }, {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }>, "many">, z.ZodNull]>;
            layerRects: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
            width: z.ZodOptional<z.ZodNumber>;
            height: z.ZodOptional<z.ZodNumber>;
        }, "strict", z.ZodTypeAny, {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        }, {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        }>;
        tilesDisallowToLocate: z.ZodArray<z.ZodAny, "many">;
        runes: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            difficultyMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            key: z.ZodString;
            professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
            buildableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            blackboard: z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }, {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }>, "many">, z.ZodNull]>;
        globalBuffs: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            prefabKey: z.ZodString;
            blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }>, "many">, z.ZodNull]>;
            overrideCameraEffect: z.ZodNull;
            passProfessionMaskFlag: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
            useExtraData: z.ZodOptional<z.ZodBoolean>;
        }, "strict", z.ZodTypeAny, {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }, {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }>, "many">, z.ZodNull]>;
        routes: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            motionMode: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            startPosition: z.ZodObject<{
                row: z.ZodNumber;
                col: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                col: number;
                row: number;
            }, {
                col: number;
                row: number;
            }>;
            endPosition: z.ZodObject<{
                row: z.ZodNumber;
                col: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                col: number;
                row: number;
            }, {
                col: number;
                row: number;
            }>;
            spawnRandomRange: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: number;
                y: number;
            }>;
            spawnOffset: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: number;
                y: number;
            }>;
            checkpoints: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                type: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                time: z.ZodNumber;
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    col: number;
                    row: number;
                }, {
                    col: number;
                    row: number;
                }>;
                reachOffset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x: number;
                    y: number;
                }, {
                    x: number;
                    y: number;
                }>;
                randomizeReachOffset: z.ZodBoolean;
                reachDistance: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }, {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }>, "many">, z.ZodNull]>;
            allowDiagonalMove: z.ZodBoolean;
            visitEveryTileCenter: z.ZodBoolean;
            visitEveryNodeCenter: z.ZodBoolean;
            visitEveryCheckPoint: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        }, {
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        }>, z.ZodNull]>, "many">;
        extraRoutes: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodUndefined]>;
        enemies: z.ZodArray<z.ZodAny, "many">;
        enemyDbRefs: z.ZodArray<z.ZodObject<{
            useDb: z.ZodBoolean;
            id: z.ZodString;
            level: z.ZodNumber;
            overwrittenData: z.ZodUnion<[z.ZodObject<{
                name: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>;
                description: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>;
                prefabKey: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>;
                attributes: z.ZodObject<{
                    maxHp: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    atk: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    def: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    magicResistance: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    cost: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    blockCnt: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    moveSpeed: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    attackSpeed: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    baseAttackTime: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    respawnTime: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    hpRecoveryPerSec: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    spRecoveryPerSec: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    maxDeployCount: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    massLevel: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    baseForceLevel: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    tauntLevel: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    epDamageResistance: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    epResistance: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    stunImmune: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>;
                    silenceImmune: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>;
                    sleepImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>, z.ZodUndefined]>;
                    frozenImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>, z.ZodUndefined]>;
                    levitateImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                }, {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                }>;
                applyWay: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>, z.ZodUndefined]>;
                motion: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>, z.ZodUndefined]>;
                enemyTags: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string[] | null;
                }, {
                    m_defined: boolean;
                    m_value: string[] | null;
                }>, z.ZodUndefined]>;
                lifePointReduce: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>;
                levelType: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>, z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>, z.ZodUndefined]>;
                rangeRadius: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>;
                numOfExtraDrops: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>, z.ZodUndefined]>;
                viewRadius: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>, z.ZodUndefined]>;
                notCountInTotal: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodBoolean;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: boolean;
                }, {
                    m_defined: boolean;
                    m_value: boolean;
                }>, z.ZodUndefined]>;
                talentBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull]>;
                skills: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    prefabKey: z.ZodString;
                    priority: z.ZodNumber;
                    cooldown: z.ZodNumber;
                    initCooldown: z.ZodNumber;
                    spCost: z.ZodNumber;
                    blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }>, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }, {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }>, "many">, z.ZodNull]>;
                spData: z.ZodUnion<[z.ZodObject<{
                    spType: z.ZodString;
                    maxSp: z.ZodNumber;
                    initSp: z.ZodNumber;
                    increment: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                }, {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                }>, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            }, {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            }>, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }, {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }>, "many">;
        waves: z.ZodArray<z.ZodObject<{
            preDelay: z.ZodNumber;
            postDelay: z.ZodNumber;
            maxTimeWaitingForNextWave: z.ZodNumber;
            fragments: z.ZodArray<z.ZodObject<{
                preDelay: z.ZodNumber;
                actions: z.ZodArray<z.ZodObject<{
                    actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    managedByScheduler: z.ZodBoolean;
                    key: z.ZodString;
                    count: z.ZodNumber;
                    preDelay: z.ZodNumber;
                    interval: z.ZodNumber;
                    routeIndex: z.ZodNumber;
                    blockFragment: z.ZodBoolean;
                    autoPreviewRoute: z.ZodBoolean;
                    autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                    hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                    weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                    dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }, {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }>, "many">;
                name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strict", z.ZodTypeAny, {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }, {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }>, "many">;
            advancedWaveTag: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strict", z.ZodTypeAny, {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }, {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }>, "many">;
        branches: z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodObject<{
            phases: z.ZodArray<z.ZodObject<{
                preDelay: z.ZodNumber;
                actions: z.ZodArray<z.ZodObject<{
                    actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    managedByScheduler: z.ZodBoolean;
                    key: z.ZodString;
                    count: z.ZodNumber;
                    preDelay: z.ZodNumber;
                    interval: z.ZodNumber;
                    routeIndex: z.ZodNumber;
                    blockFragment: z.ZodBoolean;
                    autoPreviewRoute: z.ZodBoolean;
                    autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                    hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                    weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                    dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }, {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }>, "many">;
                m_randomActionGroups: z.ZodOptional<z.ZodNull>;
                m_actionWithRandomSpawn: z.ZodOptional<z.ZodNull>;
                m_validActionPackKeys: z.ZodOptional<z.ZodNull>;
            }, "strict", z.ZodTypeAny, {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }, {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }>>, z.ZodNull]>;
        predefines: z.ZodUnion<[z.ZodObject<{
            characterInsts: z.ZodArray<z.ZodAny, "many">;
            tokenInsts: z.ZodArray<z.ZodObject<{
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    col: number;
                    row: number;
                }, {
                    col: number;
                    row: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                hidden: z.ZodBoolean;
                alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    level: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    level: number;
                }, {
                    key: string;
                    level: number;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
                inst: z.ZodObject<{
                    characterKey: z.ZodString;
                    level: z.ZodNumber;
                    phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    favorPoint: z.ZodNumber;
                    potentialRank: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                }, {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                }>;
                skillIndex: z.ZodNumber;
                mainSkillLvl: z.ZodNumber;
                skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }, {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }>, "many">;
            characterCards: z.ZodArray<z.ZodAny, "many">;
            tokenCards: z.ZodArray<z.ZodAny, "many">;
        }, "strict", z.ZodTypeAny, {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        }, {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        }>, z.ZodNull]>;
        hardPredefines: z.ZodUnion<[z.ZodObject<{
            characterInsts: z.ZodArray<z.ZodAny, "many">;
            tokenInsts: z.ZodArray<z.ZodObject<{
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    col: number;
                    row: number;
                }, {
                    col: number;
                    row: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                hidden: z.ZodBoolean;
                alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    level: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    level: number;
                }, {
                    key: string;
                    level: number;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
                inst: z.ZodObject<{
                    characterKey: z.ZodString;
                    level: z.ZodNumber;
                    phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    favorPoint: z.ZodNumber;
                    potentialRank: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                }, {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                }>;
                skillIndex: z.ZodNumber;
                mainSkillLvl: z.ZodNumber;
                skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }, {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }>, "many">;
            characterCards: z.ZodArray<z.ZodAny, "many">;
            tokenCards: z.ZodArray<z.ZodAny, "many">;
        }, "strict", z.ZodTypeAny, {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        }, {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        }>, z.ZodNull, z.ZodUndefined]>;
        excludeCharIdList: z.ZodNull;
        randomSeed: z.ZodNumber;
        operaConfig: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        runtimeData: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
    }, "strict", z.ZodTypeAny, {
        options: {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        };
        levelId: string | null;
        mapId: string | null;
        bgmEvent: string | null;
        environmentSe: string | null;
        mapData: {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        };
        tilesDisallowToLocate: any[];
        runes: {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }[] | null;
        globalBuffs: {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }[] | null;
        routes: ({
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        } | null)[];
        enemies: any[];
        enemyDbRefs: {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }[];
        waves: {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }[];
        branches: Record<string, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }> | null;
        predefines: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null;
        excludeCharIdList: null;
        randomSeed: number;
        extraRoutes?: any[] | undefined;
        hardPredefines?: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null | undefined;
        operaConfig?: string | null | undefined;
        runtimeData?: null | undefined;
    }, {
        options: {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        };
        levelId: string | null;
        mapId: string | null;
        bgmEvent: string | null;
        environmentSe: string | null;
        mapData: {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        };
        tilesDisallowToLocate: any[];
        runes: {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }[] | null;
        globalBuffs: {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }[] | null;
        routes: ({
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        } | null)[];
        enemies: any[];
        enemyDbRefs: {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }[];
        waves: {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }[];
        branches: Record<string, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }> | null;
        predefines: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null;
        excludeCharIdList: null;
        randomSeed: number;
        extraRoutes?: any[] | undefined;
        hardPredefines?: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null | undefined;
        operaConfig?: string | null | undefined;
        runtimeData?: null | undefined;
    }>;
}, "strict", z.ZodTypeAny, {
    excel: {
        code: string;
        name: string;
        description: string;
        stageId: string;
        levelId: string;
        loadingPicId: string;
        charId: string;
        zoneId: string;
        unlockParam: {
            unlockType: string;
            unlockParam1: string;
            unlockParam2: string;
            unlockParam3: null;
        }[];
        rewardItem: {
            type: string;
            id: string;
            count: number;
        }[];
        stageNameForShow: string;
        zoneNameForShow: string;
        picId: string;
        stageGetTime: number;
    };
    levels: {
        options: {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        };
        levelId: string | null;
        mapId: string | null;
        bgmEvent: string | null;
        environmentSe: string | null;
        mapData: {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        };
        tilesDisallowToLocate: any[];
        runes: {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }[] | null;
        globalBuffs: {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }[] | null;
        routes: ({
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        } | null)[];
        enemies: any[];
        enemyDbRefs: {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }[];
        waves: {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }[];
        branches: Record<string, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }> | null;
        predefines: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null;
        excludeCharIdList: null;
        randomSeed: number;
        extraRoutes?: any[] | undefined;
        hardPredefines?: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null | undefined;
        operaConfig?: string | null | undefined;
        runtimeData?: null | undefined;
    };
}, {
    excel: {
        code: string;
        name: string;
        description: string;
        stageId: string;
        levelId: string;
        loadingPicId: string;
        charId: string;
        zoneId: string;
        unlockParam: {
            unlockType: string;
            unlockParam1: string;
            unlockParam2: string;
            unlockParam3: null;
        }[];
        rewardItem: {
            type: string;
            id: string;
            count: number;
        }[];
        stageNameForShow: string;
        zoneNameForShow: string;
        picId: string;
        stageGetTime: number;
    };
    levels: {
        options: {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        };
        levelId: string | null;
        mapId: string | null;
        bgmEvent: string | null;
        environmentSe: string | null;
        mapData: {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        };
        tilesDisallowToLocate: any[];
        runes: {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }[] | null;
        globalBuffs: {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }[] | null;
        routes: ({
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        } | null)[];
        enemies: any[];
        enemyDbRefs: {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }[];
        waves: {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }[];
        branches: Record<string, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }> | null;
        predefines: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null;
        excludeCharIdList: null;
        randomSeed: number;
        extraRoutes?: any[] | undefined;
        hardPredefines?: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null | undefined;
        operaConfig?: string | null | undefined;
        runtimeData?: null | undefined;
    };
}>;
export declare const RogueThemeZod: z.ZodObject<{
    name: z.ZodString;
    stageDict: z.ZodRecord<z.ZodString, z.ZodObject<{
        excel: z.ZodObject<{
            id: z.ZodString;
            linkedStageId: z.ZodString;
            levelId: z.ZodString;
            code: z.ZodString;
            name: z.ZodString;
            loadingPicId: z.ZodString;
            description: z.ZodString;
            eliteDesc: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            isBoss: z.ZodNumber;
            isElite: z.ZodNumber;
            difficulty: z.ZodString;
            capsulePool: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            capsuleProb: z.ZodNumber;
            vutresProb: z.ZodArray<z.ZodNumber, "many">;
            boxProb: z.ZodArray<z.ZodNumber, "many">;
            specialNodeId: z.ZodNullable<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            code: string;
            id: string;
            name: string;
            description: string;
            levelId: string;
            linkedStageId: string;
            loadingPicId: string;
            eliteDesc: string | null;
            isBoss: number;
            isElite: number;
            difficulty: string;
            capsulePool: string | null;
            capsuleProb: number;
            vutresProb: number[];
            boxProb: number[];
            specialNodeId: string | null;
        }, {
            code: string;
            id: string;
            name: string;
            description: string;
            levelId: string;
            linkedStageId: string;
            loadingPicId: string;
            eliteDesc: string | null;
            isBoss: number;
            isElite: number;
            difficulty: string;
            capsulePool: string | null;
            capsuleProb: number;
            vutresProb: number[];
            boxProb: number[];
            specialNodeId: string | null;
        }>;
        levels: z.ZodObject<{
            options: z.ZodObject<{
                characterLimit: z.ZodNumber;
                maxLifePoint: z.ZodNumber;
                initialCost: z.ZodNumber;
                maxCost: z.ZodNumber;
                costIncreaseTime: z.ZodNumber;
                moveMultiplier: z.ZodNumber;
                steeringEnabled: z.ZodBoolean;
                isTrainingLevel: z.ZodBoolean;
                isHardTrainingLevel: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                isPredefinedCardsSelectable: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                maxPlayTime: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                functionDisableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                configBlackBoard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }, {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }>;
            levelId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            mapId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            bgmEvent: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            environmentSe: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            mapData: z.ZodObject<{
                map: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
                tiles: z.ZodArray<z.ZodObject<{
                    tileKey: z.ZodString;
                    heightType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    buildableType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    passableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    playerSideMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                    blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }>, "many">, z.ZodNull]>;
                    effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        offset: z.ZodObject<{
                            x: z.ZodNumber;
                            y: z.ZodNumber;
                            z: z.ZodNumber;
                        }, "strict", z.ZodTypeAny, {
                            x: number;
                            y: number;
                            z: number;
                        }, {
                            x: number;
                            y: number;
                            z: number;
                        }>;
                        direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    }, "strict", z.ZodTypeAny, {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }, {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }>, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }, {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }>, "many">;
                blockEdges: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodNull]>;
                tags: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
                effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    offset: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                        z: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        x: number;
                        y: number;
                        z: number;
                    }, {
                        x: number;
                        y: number;
                        z: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                }, "strict", z.ZodTypeAny, {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }, {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }>, "many">, z.ZodNull]>;
                layerRects: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                width: z.ZodOptional<z.ZodNumber>;
                height: z.ZodOptional<z.ZodNumber>;
            }, "strict", z.ZodTypeAny, {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            }, {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            }>;
            tilesDisallowToLocate: z.ZodArray<z.ZodAny, "many">;
            runes: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                difficultyMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                key: z.ZodString;
                professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                buildableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                blackboard: z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">;
            }, "strict", z.ZodTypeAny, {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }, {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }>, "many">, z.ZodNull]>;
            globalBuffs: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                prefabKey: z.ZodString;
                blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull]>;
                overrideCameraEffect: z.ZodNull;
                passProfessionMaskFlag: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                useExtraData: z.ZodOptional<z.ZodBoolean>;
            }, "strict", z.ZodTypeAny, {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }, {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }>, "many">, z.ZodNull]>;
            routes: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                motionMode: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                startPosition: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    col: number;
                    row: number;
                }, {
                    col: number;
                    row: number;
                }>;
                endPosition: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    col: number;
                    row: number;
                }, {
                    col: number;
                    row: number;
                }>;
                spawnRandomRange: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x: number;
                    y: number;
                }, {
                    x: number;
                    y: number;
                }>;
                spawnOffset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x: number;
                    y: number;
                }, {
                    x: number;
                    y: number;
                }>;
                checkpoints: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    time: z.ZodNumber;
                    position: z.ZodObject<{
                        row: z.ZodNumber;
                        col: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        col: number;
                        row: number;
                    }, {
                        col: number;
                        row: number;
                    }>;
                    reachOffset: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        x: number;
                        y: number;
                    }, {
                        x: number;
                        y: number;
                    }>;
                    randomizeReachOffset: z.ZodBoolean;
                    reachDistance: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }, {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }>, "many">, z.ZodNull]>;
                allowDiagonalMove: z.ZodBoolean;
                visitEveryTileCenter: z.ZodBoolean;
                visitEveryNodeCenter: z.ZodBoolean;
                visitEveryCheckPoint: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            }, {
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            }>, z.ZodNull]>, "many">;
            extraRoutes: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodUndefined]>;
            enemies: z.ZodArray<z.ZodAny, "many">;
            enemyDbRefs: z.ZodArray<z.ZodObject<{
                useDb: z.ZodBoolean;
                id: z.ZodString;
                level: z.ZodNumber;
                overwrittenData: z.ZodUnion<[z.ZodObject<{
                    name: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: string | null;
                    }, {
                        m_defined: boolean;
                        m_value: string | null;
                    }>;
                    description: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: string | null;
                    }, {
                        m_defined: boolean;
                        m_value: string | null;
                    }>;
                    prefabKey: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: string | null;
                    }, {
                        m_defined: boolean;
                        m_value: string | null;
                    }>;
                    attributes: z.ZodObject<{
                        maxHp: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        atk: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        def: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        magicResistance: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        cost: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        blockCnt: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        moveSpeed: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        attackSpeed: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        baseAttackTime: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        respawnTime: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        hpRecoveryPerSec: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        spRecoveryPerSec: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        maxDeployCount: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        massLevel: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        baseForceLevel: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        tauntLevel: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>, z.ZodUndefined]>;
                        epDamageResistance: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>, z.ZodUndefined]>;
                        epResistance: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>, z.ZodUndefined]>;
                        stunImmune: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: boolean;
                        }, {
                            m_defined: boolean;
                            m_value: boolean;
                        }>;
                        silenceImmune: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: boolean;
                        }, {
                            m_defined: boolean;
                            m_value: boolean;
                        }>;
                        sleepImmune: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: boolean;
                        }, {
                            m_defined: boolean;
                            m_value: boolean;
                        }>, z.ZodUndefined]>;
                        frozenImmune: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: boolean;
                        }, {
                            m_defined: boolean;
                            m_value: boolean;
                        }>, z.ZodUndefined]>;
                        levitateImmune: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: boolean;
                        }, {
                            m_defined: boolean;
                            m_value: boolean;
                        }>, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    }, {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    }>;
                    applyWay: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: string | null;
                    }, {
                        m_defined: boolean;
                        m_value: string | null;
                    }>, z.ZodUndefined]>;
                    motion: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: string | null;
                    }, {
                        m_defined: boolean;
                        m_value: string | null;
                    }>, z.ZodUndefined]>;
                    enemyTags: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: string[] | null;
                    }, {
                        m_defined: boolean;
                        m_value: string[] | null;
                    }>, z.ZodUndefined]>;
                    lifePointReduce: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    levelType: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: string | null;
                    }, {
                        m_defined: boolean;
                        m_value: string | null;
                    }>, z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    rangeRadius: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    numOfExtraDrops: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    viewRadius: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    notCountInTotal: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>, z.ZodUndefined]>;
                    talentBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }>, "many">, z.ZodNull]>;
                    skills: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        prefabKey: z.ZodString;
                        priority: z.ZodNumber;
                        cooldown: z.ZodNumber;
                        initCooldown: z.ZodNumber;
                        spCost: z.ZodNumber;
                        blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                            key: z.ZodString;
                            value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                            valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        }, "strict", z.ZodTypeAny, {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }, {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }>, "many">, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }, {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }>, "many">, z.ZodNull]>;
                    spData: z.ZodUnion<[z.ZodObject<{
                        spType: z.ZodString;
                        maxSp: z.ZodNumber;
                        initSp: z.ZodNumber;
                        increment: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    }, {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    }>, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                }, {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                }>, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }, {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }>, "many">;
            waves: z.ZodArray<z.ZodObject<{
                preDelay: z.ZodNumber;
                postDelay: z.ZodNumber;
                maxTimeWaitingForNextWave: z.ZodNumber;
                fragments: z.ZodArray<z.ZodObject<{
                    preDelay: z.ZodNumber;
                    actions: z.ZodArray<z.ZodObject<{
                        actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        managedByScheduler: z.ZodBoolean;
                        key: z.ZodString;
                        count: z.ZodNumber;
                        preDelay: z.ZodNumber;
                        interval: z.ZodNumber;
                        routeIndex: z.ZodNumber;
                        blockFragment: z.ZodBoolean;
                        autoPreviewRoute: z.ZodBoolean;
                        autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                        hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                        weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                        dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }, {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }>, "many">;
                    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                }, "strict", z.ZodTypeAny, {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }, {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }>, "many">;
                advancedWaveTag: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strict", z.ZodTypeAny, {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }, {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }>, "many">;
            branches: z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodObject<{
                phases: z.ZodArray<z.ZodObject<{
                    preDelay: z.ZodNumber;
                    actions: z.ZodArray<z.ZodObject<{
                        actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        managedByScheduler: z.ZodBoolean;
                        key: z.ZodString;
                        count: z.ZodNumber;
                        preDelay: z.ZodNumber;
                        interval: z.ZodNumber;
                        routeIndex: z.ZodNumber;
                        blockFragment: z.ZodBoolean;
                        autoPreviewRoute: z.ZodBoolean;
                        autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                        hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                        weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                        dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }, {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }>, "many">;
                    m_randomActionGroups: z.ZodOptional<z.ZodNull>;
                    m_actionWithRandomSpawn: z.ZodOptional<z.ZodNull>;
                    m_validActionPackKeys: z.ZodOptional<z.ZodNull>;
                }, "strict", z.ZodTypeAny, {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }, {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }>, "many">;
            }, "strict", z.ZodTypeAny, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }>>, z.ZodNull]>;
            predefines: z.ZodUnion<[z.ZodObject<{
                characterInsts: z.ZodArray<z.ZodAny, "many">;
                tokenInsts: z.ZodArray<z.ZodObject<{
                    position: z.ZodObject<{
                        row: z.ZodNumber;
                        col: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        col: number;
                        row: number;
                    }, {
                        col: number;
                        row: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    hidden: z.ZodBoolean;
                    alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        level: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        level: number;
                    }, {
                        key: string;
                        level: number;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                    inst: z.ZodObject<{
                        characterKey: z.ZodString;
                        level: z.ZodNumber;
                        phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        favorPoint: z.ZodNumber;
                        potentialRank: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    }, {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    }>;
                    skillIndex: z.ZodNumber;
                    mainSkillLvl: z.ZodNumber;
                    skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }, {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }>, "many">;
                characterCards: z.ZodArray<z.ZodAny, "many">;
                tokenCards: z.ZodArray<z.ZodAny, "many">;
            }, "strict", z.ZodTypeAny, {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            }, {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            }>, z.ZodNull]>;
            hardPredefines: z.ZodUnion<[z.ZodObject<{
                characterInsts: z.ZodArray<z.ZodAny, "many">;
                tokenInsts: z.ZodArray<z.ZodObject<{
                    position: z.ZodObject<{
                        row: z.ZodNumber;
                        col: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        col: number;
                        row: number;
                    }, {
                        col: number;
                        row: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    hidden: z.ZodBoolean;
                    alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        level: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        level: number;
                    }, {
                        key: string;
                        level: number;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                    inst: z.ZodObject<{
                        characterKey: z.ZodString;
                        level: z.ZodNumber;
                        phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        favorPoint: z.ZodNumber;
                        potentialRank: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    }, {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    }>;
                    skillIndex: z.ZodNumber;
                    mainSkillLvl: z.ZodNumber;
                    skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }, {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }>, "many">;
                characterCards: z.ZodArray<z.ZodAny, "many">;
                tokenCards: z.ZodArray<z.ZodAny, "many">;
            }, "strict", z.ZodTypeAny, {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            }, {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            }>, z.ZodNull, z.ZodUndefined]>;
            excludeCharIdList: z.ZodNull;
            randomSeed: z.ZodNumber;
            operaConfig: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            runtimeData: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            options: {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            };
            levelId: string | null;
            mapId: string | null;
            bgmEvent: string | null;
            environmentSe: string | null;
            mapData: {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            };
            tilesDisallowToLocate: any[];
            runes: {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }[] | null;
            globalBuffs: {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }[] | null;
            routes: ({
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            } | null)[];
            enemies: any[];
            enemyDbRefs: {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }[];
            waves: {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }[];
            branches: Record<string, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }> | null;
            predefines: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null;
            excludeCharIdList: null;
            randomSeed: number;
            extraRoutes?: any[] | undefined;
            hardPredefines?: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null | undefined;
            operaConfig?: string | null | undefined;
            runtimeData?: null | undefined;
        }, {
            options: {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            };
            levelId: string | null;
            mapId: string | null;
            bgmEvent: string | null;
            environmentSe: string | null;
            mapData: {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            };
            tilesDisallowToLocate: any[];
            runes: {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }[] | null;
            globalBuffs: {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }[] | null;
            routes: ({
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            } | null)[];
            enemies: any[];
            enemyDbRefs: {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }[];
            waves: {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }[];
            branches: Record<string, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }> | null;
            predefines: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null;
            excludeCharIdList: null;
            randomSeed: number;
            extraRoutes?: any[] | undefined;
            hardPredefines?: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null | undefined;
            operaConfig?: string | null | undefined;
            runtimeData?: null | undefined;
        }>;
    }, "strict", z.ZodTypeAny, {
        excel: {
            code: string;
            id: string;
            name: string;
            description: string;
            levelId: string;
            linkedStageId: string;
            loadingPicId: string;
            eliteDesc: string | null;
            isBoss: number;
            isElite: number;
            difficulty: string;
            capsulePool: string | null;
            capsuleProb: number;
            vutresProb: number[];
            boxProb: number[];
            specialNodeId: string | null;
        };
        levels: {
            options: {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            };
            levelId: string | null;
            mapId: string | null;
            bgmEvent: string | null;
            environmentSe: string | null;
            mapData: {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            };
            tilesDisallowToLocate: any[];
            runes: {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }[] | null;
            globalBuffs: {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }[] | null;
            routes: ({
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            } | null)[];
            enemies: any[];
            enemyDbRefs: {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }[];
            waves: {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }[];
            branches: Record<string, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }> | null;
            predefines: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null;
            excludeCharIdList: null;
            randomSeed: number;
            extraRoutes?: any[] | undefined;
            hardPredefines?: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null | undefined;
            operaConfig?: string | null | undefined;
            runtimeData?: null | undefined;
        };
    }, {
        excel: {
            code: string;
            id: string;
            name: string;
            description: string;
            levelId: string;
            linkedStageId: string;
            loadingPicId: string;
            eliteDesc: string | null;
            isBoss: number;
            isElite: number;
            difficulty: string;
            capsulePool: string | null;
            capsuleProb: number;
            vutresProb: number[];
            boxProb: number[];
            specialNodeId: string | null;
        };
        levels: {
            options: {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            };
            levelId: string | null;
            mapId: string | null;
            bgmEvent: string | null;
            environmentSe: string | null;
            mapData: {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            };
            tilesDisallowToLocate: any[];
            runes: {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }[] | null;
            globalBuffs: {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }[] | null;
            routes: ({
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            } | null)[];
            enemies: any[];
            enemyDbRefs: {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }[];
            waves: {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }[];
            branches: Record<string, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }> | null;
            predefines: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null;
            excludeCharIdList: null;
            randomSeed: number;
            extraRoutes?: any[] | undefined;
            hardPredefines?: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null | undefined;
            operaConfig?: string | null | undefined;
            runtimeData?: null | undefined;
        };
    }>>;
    toughStageDict: z.ZodRecord<z.ZodString, z.ZodObject<{
        excel: z.ZodObject<{
            id: z.ZodString;
            linkedStageId: z.ZodString;
            levelId: z.ZodString;
            code: z.ZodString;
            name: z.ZodString;
            loadingPicId: z.ZodString;
            description: z.ZodString;
            eliteDesc: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            isBoss: z.ZodNumber;
            isElite: z.ZodNumber;
            difficulty: z.ZodString;
            capsulePool: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            capsuleProb: z.ZodNumber;
            vutresProb: z.ZodArray<z.ZodNumber, "many">;
            boxProb: z.ZodArray<z.ZodNumber, "many">;
            specialNodeId: z.ZodNullable<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            code: string;
            id: string;
            name: string;
            description: string;
            levelId: string;
            linkedStageId: string;
            loadingPicId: string;
            eliteDesc: string | null;
            isBoss: number;
            isElite: number;
            difficulty: string;
            capsulePool: string | null;
            capsuleProb: number;
            vutresProb: number[];
            boxProb: number[];
            specialNodeId: string | null;
        }, {
            code: string;
            id: string;
            name: string;
            description: string;
            levelId: string;
            linkedStageId: string;
            loadingPicId: string;
            eliteDesc: string | null;
            isBoss: number;
            isElite: number;
            difficulty: string;
            capsulePool: string | null;
            capsuleProb: number;
            vutresProb: number[];
            boxProb: number[];
            specialNodeId: string | null;
        }>;
        levels: z.ZodObject<{
            options: z.ZodObject<{
                characterLimit: z.ZodNumber;
                maxLifePoint: z.ZodNumber;
                initialCost: z.ZodNumber;
                maxCost: z.ZodNumber;
                costIncreaseTime: z.ZodNumber;
                moveMultiplier: z.ZodNumber;
                steeringEnabled: z.ZodBoolean;
                isTrainingLevel: z.ZodBoolean;
                isHardTrainingLevel: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                isPredefinedCardsSelectable: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                maxPlayTime: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                functionDisableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                configBlackBoard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }, {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }>;
            levelId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            mapId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            bgmEvent: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            environmentSe: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            mapData: z.ZodObject<{
                map: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
                tiles: z.ZodArray<z.ZodObject<{
                    tileKey: z.ZodString;
                    heightType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    buildableType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    passableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    playerSideMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                    blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }>, "many">, z.ZodNull]>;
                    effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        offset: z.ZodObject<{
                            x: z.ZodNumber;
                            y: z.ZodNumber;
                            z: z.ZodNumber;
                        }, "strict", z.ZodTypeAny, {
                            x: number;
                            y: number;
                            z: number;
                        }, {
                            x: number;
                            y: number;
                            z: number;
                        }>;
                        direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    }, "strict", z.ZodTypeAny, {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }, {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }>, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }, {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }>, "many">;
                blockEdges: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodNull]>;
                tags: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
                effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    offset: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                        z: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        x: number;
                        y: number;
                        z: number;
                    }, {
                        x: number;
                        y: number;
                        z: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                }, "strict", z.ZodTypeAny, {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }, {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }>, "many">, z.ZodNull]>;
                layerRects: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                width: z.ZodOptional<z.ZodNumber>;
                height: z.ZodOptional<z.ZodNumber>;
            }, "strict", z.ZodTypeAny, {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            }, {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            }>;
            tilesDisallowToLocate: z.ZodArray<z.ZodAny, "many">;
            runes: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                difficultyMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                key: z.ZodString;
                professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                buildableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                blackboard: z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">;
            }, "strict", z.ZodTypeAny, {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }, {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }>, "many">, z.ZodNull]>;
            globalBuffs: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                prefabKey: z.ZodString;
                blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull]>;
                overrideCameraEffect: z.ZodNull;
                passProfessionMaskFlag: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                useExtraData: z.ZodOptional<z.ZodBoolean>;
            }, "strict", z.ZodTypeAny, {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }, {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }>, "many">, z.ZodNull]>;
            routes: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                motionMode: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                startPosition: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    col: number;
                    row: number;
                }, {
                    col: number;
                    row: number;
                }>;
                endPosition: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    col: number;
                    row: number;
                }, {
                    col: number;
                    row: number;
                }>;
                spawnRandomRange: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x: number;
                    y: number;
                }, {
                    x: number;
                    y: number;
                }>;
                spawnOffset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x: number;
                    y: number;
                }, {
                    x: number;
                    y: number;
                }>;
                checkpoints: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    time: z.ZodNumber;
                    position: z.ZodObject<{
                        row: z.ZodNumber;
                        col: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        col: number;
                        row: number;
                    }, {
                        col: number;
                        row: number;
                    }>;
                    reachOffset: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        x: number;
                        y: number;
                    }, {
                        x: number;
                        y: number;
                    }>;
                    randomizeReachOffset: z.ZodBoolean;
                    reachDistance: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }, {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }>, "many">, z.ZodNull]>;
                allowDiagonalMove: z.ZodBoolean;
                visitEveryTileCenter: z.ZodBoolean;
                visitEveryNodeCenter: z.ZodBoolean;
                visitEveryCheckPoint: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            }, {
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            }>, z.ZodNull]>, "many">;
            extraRoutes: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodUndefined]>;
            enemies: z.ZodArray<z.ZodAny, "many">;
            enemyDbRefs: z.ZodArray<z.ZodObject<{
                useDb: z.ZodBoolean;
                id: z.ZodString;
                level: z.ZodNumber;
                overwrittenData: z.ZodUnion<[z.ZodObject<{
                    name: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: string | null;
                    }, {
                        m_defined: boolean;
                        m_value: string | null;
                    }>;
                    description: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: string | null;
                    }, {
                        m_defined: boolean;
                        m_value: string | null;
                    }>;
                    prefabKey: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: string | null;
                    }, {
                        m_defined: boolean;
                        m_value: string | null;
                    }>;
                    attributes: z.ZodObject<{
                        maxHp: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        atk: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        def: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        magicResistance: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        cost: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        blockCnt: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        moveSpeed: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        attackSpeed: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        baseAttackTime: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        respawnTime: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        hpRecoveryPerSec: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        spRecoveryPerSec: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        maxDeployCount: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        massLevel: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        baseForceLevel: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        tauntLevel: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>, z.ZodUndefined]>;
                        epDamageResistance: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>, z.ZodUndefined]>;
                        epResistance: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>, z.ZodUndefined]>;
                        stunImmune: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: boolean;
                        }, {
                            m_defined: boolean;
                            m_value: boolean;
                        }>;
                        silenceImmune: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: boolean;
                        }, {
                            m_defined: boolean;
                            m_value: boolean;
                        }>;
                        sleepImmune: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: boolean;
                        }, {
                            m_defined: boolean;
                            m_value: boolean;
                        }>, z.ZodUndefined]>;
                        frozenImmune: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: boolean;
                        }, {
                            m_defined: boolean;
                            m_value: boolean;
                        }>, z.ZodUndefined]>;
                        levitateImmune: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: boolean;
                        }, {
                            m_defined: boolean;
                            m_value: boolean;
                        }>, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    }, {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    }>;
                    applyWay: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: string | null;
                    }, {
                        m_defined: boolean;
                        m_value: string | null;
                    }>, z.ZodUndefined]>;
                    motion: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: string | null;
                    }, {
                        m_defined: boolean;
                        m_value: string | null;
                    }>, z.ZodUndefined]>;
                    enemyTags: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: string[] | null;
                    }, {
                        m_defined: boolean;
                        m_value: string[] | null;
                    }>, z.ZodUndefined]>;
                    lifePointReduce: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    levelType: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: string | null;
                    }, {
                        m_defined: boolean;
                        m_value: string | null;
                    }>, z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    rangeRadius: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    numOfExtraDrops: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    viewRadius: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    notCountInTotal: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>, z.ZodUndefined]>;
                    talentBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }>, "many">, z.ZodNull]>;
                    skills: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        prefabKey: z.ZodString;
                        priority: z.ZodNumber;
                        cooldown: z.ZodNumber;
                        initCooldown: z.ZodNumber;
                        spCost: z.ZodNumber;
                        blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                            key: z.ZodString;
                            value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                            valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        }, "strict", z.ZodTypeAny, {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }, {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }>, "many">, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }, {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }>, "many">, z.ZodNull]>;
                    spData: z.ZodUnion<[z.ZodObject<{
                        spType: z.ZodString;
                        maxSp: z.ZodNumber;
                        initSp: z.ZodNumber;
                        increment: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    }, {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    }>, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                }, {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                }>, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }, {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }>, "many">;
            waves: z.ZodArray<z.ZodObject<{
                preDelay: z.ZodNumber;
                postDelay: z.ZodNumber;
                maxTimeWaitingForNextWave: z.ZodNumber;
                fragments: z.ZodArray<z.ZodObject<{
                    preDelay: z.ZodNumber;
                    actions: z.ZodArray<z.ZodObject<{
                        actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        managedByScheduler: z.ZodBoolean;
                        key: z.ZodString;
                        count: z.ZodNumber;
                        preDelay: z.ZodNumber;
                        interval: z.ZodNumber;
                        routeIndex: z.ZodNumber;
                        blockFragment: z.ZodBoolean;
                        autoPreviewRoute: z.ZodBoolean;
                        autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                        hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                        weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                        dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }, {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }>, "many">;
                    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                }, "strict", z.ZodTypeAny, {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }, {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }>, "many">;
                advancedWaveTag: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strict", z.ZodTypeAny, {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }, {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }>, "many">;
            branches: z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodObject<{
                phases: z.ZodArray<z.ZodObject<{
                    preDelay: z.ZodNumber;
                    actions: z.ZodArray<z.ZodObject<{
                        actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        managedByScheduler: z.ZodBoolean;
                        key: z.ZodString;
                        count: z.ZodNumber;
                        preDelay: z.ZodNumber;
                        interval: z.ZodNumber;
                        routeIndex: z.ZodNumber;
                        blockFragment: z.ZodBoolean;
                        autoPreviewRoute: z.ZodBoolean;
                        autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                        hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                        weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                        dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }, {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }>, "many">;
                    m_randomActionGroups: z.ZodOptional<z.ZodNull>;
                    m_actionWithRandomSpawn: z.ZodOptional<z.ZodNull>;
                    m_validActionPackKeys: z.ZodOptional<z.ZodNull>;
                }, "strict", z.ZodTypeAny, {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }, {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }>, "many">;
            }, "strict", z.ZodTypeAny, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }>>, z.ZodNull]>;
            predefines: z.ZodUnion<[z.ZodObject<{
                characterInsts: z.ZodArray<z.ZodAny, "many">;
                tokenInsts: z.ZodArray<z.ZodObject<{
                    position: z.ZodObject<{
                        row: z.ZodNumber;
                        col: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        col: number;
                        row: number;
                    }, {
                        col: number;
                        row: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    hidden: z.ZodBoolean;
                    alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        level: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        level: number;
                    }, {
                        key: string;
                        level: number;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                    inst: z.ZodObject<{
                        characterKey: z.ZodString;
                        level: z.ZodNumber;
                        phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        favorPoint: z.ZodNumber;
                        potentialRank: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    }, {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    }>;
                    skillIndex: z.ZodNumber;
                    mainSkillLvl: z.ZodNumber;
                    skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }, {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }>, "many">;
                characterCards: z.ZodArray<z.ZodAny, "many">;
                tokenCards: z.ZodArray<z.ZodAny, "many">;
            }, "strict", z.ZodTypeAny, {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            }, {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            }>, z.ZodNull]>;
            hardPredefines: z.ZodUnion<[z.ZodObject<{
                characterInsts: z.ZodArray<z.ZodAny, "many">;
                tokenInsts: z.ZodArray<z.ZodObject<{
                    position: z.ZodObject<{
                        row: z.ZodNumber;
                        col: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        col: number;
                        row: number;
                    }, {
                        col: number;
                        row: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    hidden: z.ZodBoolean;
                    alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        level: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        level: number;
                    }, {
                        key: string;
                        level: number;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                    inst: z.ZodObject<{
                        characterKey: z.ZodString;
                        level: z.ZodNumber;
                        phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        favorPoint: z.ZodNumber;
                        potentialRank: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    }, {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    }>;
                    skillIndex: z.ZodNumber;
                    mainSkillLvl: z.ZodNumber;
                    skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }, {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }>, "many">;
                characterCards: z.ZodArray<z.ZodAny, "many">;
                tokenCards: z.ZodArray<z.ZodAny, "many">;
            }, "strict", z.ZodTypeAny, {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            }, {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            }>, z.ZodNull, z.ZodUndefined]>;
            excludeCharIdList: z.ZodNull;
            randomSeed: z.ZodNumber;
            operaConfig: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            runtimeData: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            options: {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            };
            levelId: string | null;
            mapId: string | null;
            bgmEvent: string | null;
            environmentSe: string | null;
            mapData: {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            };
            tilesDisallowToLocate: any[];
            runes: {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }[] | null;
            globalBuffs: {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }[] | null;
            routes: ({
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            } | null)[];
            enemies: any[];
            enemyDbRefs: {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }[];
            waves: {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }[];
            branches: Record<string, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }> | null;
            predefines: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null;
            excludeCharIdList: null;
            randomSeed: number;
            extraRoutes?: any[] | undefined;
            hardPredefines?: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null | undefined;
            operaConfig?: string | null | undefined;
            runtimeData?: null | undefined;
        }, {
            options: {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            };
            levelId: string | null;
            mapId: string | null;
            bgmEvent: string | null;
            environmentSe: string | null;
            mapData: {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            };
            tilesDisallowToLocate: any[];
            runes: {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }[] | null;
            globalBuffs: {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }[] | null;
            routes: ({
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            } | null)[];
            enemies: any[];
            enemyDbRefs: {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }[];
            waves: {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }[];
            branches: Record<string, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }> | null;
            predefines: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null;
            excludeCharIdList: null;
            randomSeed: number;
            extraRoutes?: any[] | undefined;
            hardPredefines?: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null | undefined;
            operaConfig?: string | null | undefined;
            runtimeData?: null | undefined;
        }>;
    }, "strict", z.ZodTypeAny, {
        excel: {
            code: string;
            id: string;
            name: string;
            description: string;
            levelId: string;
            linkedStageId: string;
            loadingPicId: string;
            eliteDesc: string | null;
            isBoss: number;
            isElite: number;
            difficulty: string;
            capsulePool: string | null;
            capsuleProb: number;
            vutresProb: number[];
            boxProb: number[];
            specialNodeId: string | null;
        };
        levels: {
            options: {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            };
            levelId: string | null;
            mapId: string | null;
            bgmEvent: string | null;
            environmentSe: string | null;
            mapData: {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            };
            tilesDisallowToLocate: any[];
            runes: {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }[] | null;
            globalBuffs: {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }[] | null;
            routes: ({
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            } | null)[];
            enemies: any[];
            enemyDbRefs: {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }[];
            waves: {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }[];
            branches: Record<string, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }> | null;
            predefines: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null;
            excludeCharIdList: null;
            randomSeed: number;
            extraRoutes?: any[] | undefined;
            hardPredefines?: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null | undefined;
            operaConfig?: string | null | undefined;
            runtimeData?: null | undefined;
        };
    }, {
        excel: {
            code: string;
            id: string;
            name: string;
            description: string;
            levelId: string;
            linkedStageId: string;
            loadingPicId: string;
            eliteDesc: string | null;
            isBoss: number;
            isElite: number;
            difficulty: string;
            capsulePool: string | null;
            capsuleProb: number;
            vutresProb: number[];
            boxProb: number[];
            specialNodeId: string | null;
        };
        levels: {
            options: {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            };
            levelId: string | null;
            mapId: string | null;
            bgmEvent: string | null;
            environmentSe: string | null;
            mapData: {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            };
            tilesDisallowToLocate: any[];
            runes: {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }[] | null;
            globalBuffs: {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }[] | null;
            routes: ({
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            } | null)[];
            enemies: any[];
            enemyDbRefs: {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }[];
            waves: {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }[];
            branches: Record<string, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }> | null;
            predefines: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null;
            excludeCharIdList: null;
            randomSeed: number;
            extraRoutes?: any[] | undefined;
            hardPredefines?: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null | undefined;
            operaConfig?: string | null | undefined;
            runtimeData?: null | undefined;
        };
    }>>;
    relicDict: z.ZodRecord<z.ZodString, z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        description: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        usage: z.ZodString;
        obtainApproach: z.ZodString;
        iconId: z.ZodString;
        type: z.ZodString;
        subType: z.ZodString;
        rarity: z.ZodString;
        value: z.ZodNumber;
        sortId: z.ZodNumber;
        canSacrifice: z.ZodBoolean;
        unlockCondDesc: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        type: string;
        id: string;
        name: string;
        value: number;
        description: string | null;
        sortId: number;
        rarity: string;
        usage: string;
        obtainApproach: string;
        iconId: string;
        subType: string;
        canSacrifice: boolean;
        unlockCondDesc: string | null;
    }, {
        type: string;
        id: string;
        name: string;
        value: number;
        description: string | null;
        sortId: number;
        rarity: string;
        usage: string;
        obtainApproach: string;
        iconId: string;
        subType: string;
        canSacrifice: boolean;
        unlockCondDesc: string | null;
    }>>;
    variationDict: z.ZodRecord<z.ZodString, z.ZodObject<{
        id: z.ZodString;
        type: z.ZodString;
        outerName: z.ZodString;
        innerName: z.ZodString;
        functionDesc: z.ZodString;
        desc: z.ZodString;
        iconId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        sound: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        type: string;
        id: string;
        desc: string;
        iconId: string | null;
        outerName: string;
        innerName: string;
        functionDesc: string;
        sound: string | null;
    }, {
        type: string;
        id: string;
        desc: string;
        iconId: string | null;
        outerName: string;
        innerName: string;
        functionDesc: string;
        sound: string | null;
    }>>;
}, "strict", z.ZodTypeAny, {
    name: string;
    stageDict: Record<string, {
        excel: {
            code: string;
            id: string;
            name: string;
            description: string;
            levelId: string;
            linkedStageId: string;
            loadingPicId: string;
            eliteDesc: string | null;
            isBoss: number;
            isElite: number;
            difficulty: string;
            capsulePool: string | null;
            capsuleProb: number;
            vutresProb: number[];
            boxProb: number[];
            specialNodeId: string | null;
        };
        levels: {
            options: {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            };
            levelId: string | null;
            mapId: string | null;
            bgmEvent: string | null;
            environmentSe: string | null;
            mapData: {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            };
            tilesDisallowToLocate: any[];
            runes: {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }[] | null;
            globalBuffs: {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }[] | null;
            routes: ({
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            } | null)[];
            enemies: any[];
            enemyDbRefs: {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }[];
            waves: {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }[];
            branches: Record<string, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }> | null;
            predefines: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null;
            excludeCharIdList: null;
            randomSeed: number;
            extraRoutes?: any[] | undefined;
            hardPredefines?: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null | undefined;
            operaConfig?: string | null | undefined;
            runtimeData?: null | undefined;
        };
    }>;
    toughStageDict: Record<string, {
        excel: {
            code: string;
            id: string;
            name: string;
            description: string;
            levelId: string;
            linkedStageId: string;
            loadingPicId: string;
            eliteDesc: string | null;
            isBoss: number;
            isElite: number;
            difficulty: string;
            capsulePool: string | null;
            capsuleProb: number;
            vutresProb: number[];
            boxProb: number[];
            specialNodeId: string | null;
        };
        levels: {
            options: {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            };
            levelId: string | null;
            mapId: string | null;
            bgmEvent: string | null;
            environmentSe: string | null;
            mapData: {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            };
            tilesDisallowToLocate: any[];
            runes: {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }[] | null;
            globalBuffs: {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }[] | null;
            routes: ({
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            } | null)[];
            enemies: any[];
            enemyDbRefs: {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }[];
            waves: {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }[];
            branches: Record<string, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }> | null;
            predefines: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null;
            excludeCharIdList: null;
            randomSeed: number;
            extraRoutes?: any[] | undefined;
            hardPredefines?: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null | undefined;
            operaConfig?: string | null | undefined;
            runtimeData?: null | undefined;
        };
    }>;
    relicDict: Record<string, {
        type: string;
        id: string;
        name: string;
        value: number;
        description: string | null;
        sortId: number;
        rarity: string;
        usage: string;
        obtainApproach: string;
        iconId: string;
        subType: string;
        canSacrifice: boolean;
        unlockCondDesc: string | null;
    }>;
    variationDict: Record<string, {
        type: string;
        id: string;
        desc: string;
        iconId: string | null;
        outerName: string;
        innerName: string;
        functionDesc: string;
        sound: string | null;
    }>;
}, {
    name: string;
    stageDict: Record<string, {
        excel: {
            code: string;
            id: string;
            name: string;
            description: string;
            levelId: string;
            linkedStageId: string;
            loadingPicId: string;
            eliteDesc: string | null;
            isBoss: number;
            isElite: number;
            difficulty: string;
            capsulePool: string | null;
            capsuleProb: number;
            vutresProb: number[];
            boxProb: number[];
            specialNodeId: string | null;
        };
        levels: {
            options: {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            };
            levelId: string | null;
            mapId: string | null;
            bgmEvent: string | null;
            environmentSe: string | null;
            mapData: {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            };
            tilesDisallowToLocate: any[];
            runes: {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }[] | null;
            globalBuffs: {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }[] | null;
            routes: ({
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            } | null)[];
            enemies: any[];
            enemyDbRefs: {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }[];
            waves: {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }[];
            branches: Record<string, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }> | null;
            predefines: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null;
            excludeCharIdList: null;
            randomSeed: number;
            extraRoutes?: any[] | undefined;
            hardPredefines?: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null | undefined;
            operaConfig?: string | null | undefined;
            runtimeData?: null | undefined;
        };
    }>;
    toughStageDict: Record<string, {
        excel: {
            code: string;
            id: string;
            name: string;
            description: string;
            levelId: string;
            linkedStageId: string;
            loadingPicId: string;
            eliteDesc: string | null;
            isBoss: number;
            isElite: number;
            difficulty: string;
            capsulePool: string | null;
            capsuleProb: number;
            vutresProb: number[];
            boxProb: number[];
            specialNodeId: string | null;
        };
        levels: {
            options: {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            };
            levelId: string | null;
            mapId: string | null;
            bgmEvent: string | null;
            environmentSe: string | null;
            mapData: {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            };
            tilesDisallowToLocate: any[];
            runes: {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }[] | null;
            globalBuffs: {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }[] | null;
            routes: ({
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            } | null)[];
            enemies: any[];
            enemyDbRefs: {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }[];
            waves: {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }[];
            branches: Record<string, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }> | null;
            predefines: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null;
            excludeCharIdList: null;
            randomSeed: number;
            extraRoutes?: any[] | undefined;
            hardPredefines?: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null | undefined;
            operaConfig?: string | null | undefined;
            runtimeData?: null | undefined;
        };
    }>;
    relicDict: Record<string, {
        type: string;
        id: string;
        name: string;
        value: number;
        description: string | null;
        sortId: number;
        rarity: string;
        usage: string;
        obtainApproach: string;
        iconId: string;
        subType: string;
        canSacrifice: boolean;
        unlockCondDesc: string | null;
    }>;
    variationDict: Record<string, {
        type: string;
        id: string;
        desc: string;
        iconId: string | null;
        outerName: string;
        innerName: string;
        functionDesc: string;
        sound: string | null;
    }>;
}>;
export declare const SandboxActZod: z.ZodObject<{
    stageDict: z.ZodRecord<z.ZodString, z.ZodObject<{
        excel: z.ZodObject<{
            stageId: z.ZodString;
            levelId: z.ZodString;
            code: z.ZodString;
            name: z.ZodString;
            loadingPicId: z.ZodString;
            description: z.ZodString;
            actionCost: z.ZodNumber;
            powerCost: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            code: string;
            name: string;
            description: string;
            stageId: string;
            levelId: string;
            loadingPicId: string;
            actionCost: number;
            powerCost: number;
        }, {
            code: string;
            name: string;
            description: string;
            stageId: string;
            levelId: string;
            loadingPicId: string;
            actionCost: number;
            powerCost: number;
        }>;
        levels: z.ZodObject<{
            options: z.ZodObject<{
                characterLimit: z.ZodNumber;
                maxLifePoint: z.ZodNumber;
                initialCost: z.ZodNumber;
                maxCost: z.ZodNumber;
                costIncreaseTime: z.ZodNumber;
                moveMultiplier: z.ZodNumber;
                steeringEnabled: z.ZodBoolean;
                isTrainingLevel: z.ZodBoolean;
                isHardTrainingLevel: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                isPredefinedCardsSelectable: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                maxPlayTime: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                functionDisableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                configBlackBoard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }, {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }>;
            levelId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            mapId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            bgmEvent: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            environmentSe: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            mapData: z.ZodObject<{
                map: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
                tiles: z.ZodArray<z.ZodObject<{
                    tileKey: z.ZodString;
                    heightType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    buildableType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    passableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    playerSideMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                    blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }>, "many">, z.ZodNull]>;
                    effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        offset: z.ZodObject<{
                            x: z.ZodNumber;
                            y: z.ZodNumber;
                            z: z.ZodNumber;
                        }, "strict", z.ZodTypeAny, {
                            x: number;
                            y: number;
                            z: number;
                        }, {
                            x: number;
                            y: number;
                            z: number;
                        }>;
                        direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    }, "strict", z.ZodTypeAny, {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }, {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }>, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }, {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }>, "many">;
                blockEdges: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodNull]>;
                tags: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
                effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    offset: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                        z: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        x: number;
                        y: number;
                        z: number;
                    }, {
                        x: number;
                        y: number;
                        z: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                }, "strict", z.ZodTypeAny, {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }, {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }>, "many">, z.ZodNull]>;
                layerRects: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                width: z.ZodOptional<z.ZodNumber>;
                height: z.ZodOptional<z.ZodNumber>;
            }, "strict", z.ZodTypeAny, {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            }, {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            }>;
            tilesDisallowToLocate: z.ZodArray<z.ZodAny, "many">;
            runes: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                difficultyMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                key: z.ZodString;
                professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                buildableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                blackboard: z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">;
            }, "strict", z.ZodTypeAny, {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }, {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }>, "many">, z.ZodNull]>;
            globalBuffs: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                prefabKey: z.ZodString;
                blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull]>;
                overrideCameraEffect: z.ZodNull;
                passProfessionMaskFlag: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                useExtraData: z.ZodOptional<z.ZodBoolean>;
            }, "strict", z.ZodTypeAny, {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }, {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }>, "many">, z.ZodNull]>;
            routes: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                motionMode: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                startPosition: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    col: number;
                    row: number;
                }, {
                    col: number;
                    row: number;
                }>;
                endPosition: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    col: number;
                    row: number;
                }, {
                    col: number;
                    row: number;
                }>;
                spawnRandomRange: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x: number;
                    y: number;
                }, {
                    x: number;
                    y: number;
                }>;
                spawnOffset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x: number;
                    y: number;
                }, {
                    x: number;
                    y: number;
                }>;
                checkpoints: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    time: z.ZodNumber;
                    position: z.ZodObject<{
                        row: z.ZodNumber;
                        col: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        col: number;
                        row: number;
                    }, {
                        col: number;
                        row: number;
                    }>;
                    reachOffset: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        x: number;
                        y: number;
                    }, {
                        x: number;
                        y: number;
                    }>;
                    randomizeReachOffset: z.ZodBoolean;
                    reachDistance: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }, {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }>, "many">, z.ZodNull]>;
                allowDiagonalMove: z.ZodBoolean;
                visitEveryTileCenter: z.ZodBoolean;
                visitEveryNodeCenter: z.ZodBoolean;
                visitEveryCheckPoint: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            }, {
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            }>, z.ZodNull]>, "many">;
            extraRoutes: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodUndefined]>;
            enemies: z.ZodArray<z.ZodAny, "many">;
            enemyDbRefs: z.ZodArray<z.ZodObject<{
                useDb: z.ZodBoolean;
                id: z.ZodString;
                level: z.ZodNumber;
                overwrittenData: z.ZodUnion<[z.ZodObject<{
                    name: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: string | null;
                    }, {
                        m_defined: boolean;
                        m_value: string | null;
                    }>;
                    description: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: string | null;
                    }, {
                        m_defined: boolean;
                        m_value: string | null;
                    }>;
                    prefabKey: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: string | null;
                    }, {
                        m_defined: boolean;
                        m_value: string | null;
                    }>;
                    attributes: z.ZodObject<{
                        maxHp: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        atk: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        def: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        magicResistance: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        cost: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        blockCnt: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        moveSpeed: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        attackSpeed: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        baseAttackTime: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        respawnTime: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        hpRecoveryPerSec: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        spRecoveryPerSec: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        maxDeployCount: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        massLevel: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        baseForceLevel: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        tauntLevel: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>, z.ZodUndefined]>;
                        epDamageResistance: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>, z.ZodUndefined]>;
                        epResistance: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>, z.ZodUndefined]>;
                        stunImmune: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: boolean;
                        }, {
                            m_defined: boolean;
                            m_value: boolean;
                        }>;
                        silenceImmune: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: boolean;
                        }, {
                            m_defined: boolean;
                            m_value: boolean;
                        }>;
                        sleepImmune: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: boolean;
                        }, {
                            m_defined: boolean;
                            m_value: boolean;
                        }>, z.ZodUndefined]>;
                        frozenImmune: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: boolean;
                        }, {
                            m_defined: boolean;
                            m_value: boolean;
                        }>, z.ZodUndefined]>;
                        levitateImmune: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: boolean;
                        }, {
                            m_defined: boolean;
                            m_value: boolean;
                        }>, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    }, {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    }>;
                    applyWay: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: string | null;
                    }, {
                        m_defined: boolean;
                        m_value: string | null;
                    }>, z.ZodUndefined]>;
                    motion: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: string | null;
                    }, {
                        m_defined: boolean;
                        m_value: string | null;
                    }>, z.ZodUndefined]>;
                    enemyTags: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: string[] | null;
                    }, {
                        m_defined: boolean;
                        m_value: string[] | null;
                    }>, z.ZodUndefined]>;
                    lifePointReduce: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    levelType: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: string | null;
                    }, {
                        m_defined: boolean;
                        m_value: string | null;
                    }>, z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    rangeRadius: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    numOfExtraDrops: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    viewRadius: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    notCountInTotal: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>, z.ZodUndefined]>;
                    talentBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }>, "many">, z.ZodNull]>;
                    skills: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        prefabKey: z.ZodString;
                        priority: z.ZodNumber;
                        cooldown: z.ZodNumber;
                        initCooldown: z.ZodNumber;
                        spCost: z.ZodNumber;
                        blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                            key: z.ZodString;
                            value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                            valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        }, "strict", z.ZodTypeAny, {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }, {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }>, "many">, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }, {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }>, "many">, z.ZodNull]>;
                    spData: z.ZodUnion<[z.ZodObject<{
                        spType: z.ZodString;
                        maxSp: z.ZodNumber;
                        initSp: z.ZodNumber;
                        increment: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    }, {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    }>, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                }, {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                }>, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }, {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }>, "many">;
            waves: z.ZodArray<z.ZodObject<{
                preDelay: z.ZodNumber;
                postDelay: z.ZodNumber;
                maxTimeWaitingForNextWave: z.ZodNumber;
                fragments: z.ZodArray<z.ZodObject<{
                    preDelay: z.ZodNumber;
                    actions: z.ZodArray<z.ZodObject<{
                        actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        managedByScheduler: z.ZodBoolean;
                        key: z.ZodString;
                        count: z.ZodNumber;
                        preDelay: z.ZodNumber;
                        interval: z.ZodNumber;
                        routeIndex: z.ZodNumber;
                        blockFragment: z.ZodBoolean;
                        autoPreviewRoute: z.ZodBoolean;
                        autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                        hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                        weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                        dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }, {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }>, "many">;
                    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                }, "strict", z.ZodTypeAny, {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }, {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }>, "many">;
                advancedWaveTag: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strict", z.ZodTypeAny, {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }, {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }>, "many">;
            branches: z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodObject<{
                phases: z.ZodArray<z.ZodObject<{
                    preDelay: z.ZodNumber;
                    actions: z.ZodArray<z.ZodObject<{
                        actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        managedByScheduler: z.ZodBoolean;
                        key: z.ZodString;
                        count: z.ZodNumber;
                        preDelay: z.ZodNumber;
                        interval: z.ZodNumber;
                        routeIndex: z.ZodNumber;
                        blockFragment: z.ZodBoolean;
                        autoPreviewRoute: z.ZodBoolean;
                        autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                        hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                        weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                        dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }, {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }>, "many">;
                    m_randomActionGroups: z.ZodOptional<z.ZodNull>;
                    m_actionWithRandomSpawn: z.ZodOptional<z.ZodNull>;
                    m_validActionPackKeys: z.ZodOptional<z.ZodNull>;
                }, "strict", z.ZodTypeAny, {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }, {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }>, "many">;
            }, "strict", z.ZodTypeAny, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }>>, z.ZodNull]>;
            predefines: z.ZodUnion<[z.ZodObject<{
                characterInsts: z.ZodArray<z.ZodAny, "many">;
                tokenInsts: z.ZodArray<z.ZodObject<{
                    position: z.ZodObject<{
                        row: z.ZodNumber;
                        col: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        col: number;
                        row: number;
                    }, {
                        col: number;
                        row: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    hidden: z.ZodBoolean;
                    alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        level: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        level: number;
                    }, {
                        key: string;
                        level: number;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                    inst: z.ZodObject<{
                        characterKey: z.ZodString;
                        level: z.ZodNumber;
                        phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        favorPoint: z.ZodNumber;
                        potentialRank: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    }, {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    }>;
                    skillIndex: z.ZodNumber;
                    mainSkillLvl: z.ZodNumber;
                    skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }, {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }>, "many">;
                characterCards: z.ZodArray<z.ZodAny, "many">;
                tokenCards: z.ZodArray<z.ZodAny, "many">;
            }, "strict", z.ZodTypeAny, {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            }, {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            }>, z.ZodNull]>;
            hardPredefines: z.ZodUnion<[z.ZodObject<{
                characterInsts: z.ZodArray<z.ZodAny, "many">;
                tokenInsts: z.ZodArray<z.ZodObject<{
                    position: z.ZodObject<{
                        row: z.ZodNumber;
                        col: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        col: number;
                        row: number;
                    }, {
                        col: number;
                        row: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    hidden: z.ZodBoolean;
                    alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        level: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        level: number;
                    }, {
                        key: string;
                        level: number;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                    inst: z.ZodObject<{
                        characterKey: z.ZodString;
                        level: z.ZodNumber;
                        phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        favorPoint: z.ZodNumber;
                        potentialRank: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    }, {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    }>;
                    skillIndex: z.ZodNumber;
                    mainSkillLvl: z.ZodNumber;
                    skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }, {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }>, "many">;
                characterCards: z.ZodArray<z.ZodAny, "many">;
                tokenCards: z.ZodArray<z.ZodAny, "many">;
            }, "strict", z.ZodTypeAny, {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            }, {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            }>, z.ZodNull, z.ZodUndefined]>;
            excludeCharIdList: z.ZodNull;
            randomSeed: z.ZodNumber;
            operaConfig: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            runtimeData: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            options: {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            };
            levelId: string | null;
            mapId: string | null;
            bgmEvent: string | null;
            environmentSe: string | null;
            mapData: {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            };
            tilesDisallowToLocate: any[];
            runes: {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }[] | null;
            globalBuffs: {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }[] | null;
            routes: ({
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            } | null)[];
            enemies: any[];
            enemyDbRefs: {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }[];
            waves: {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }[];
            branches: Record<string, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }> | null;
            predefines: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null;
            excludeCharIdList: null;
            randomSeed: number;
            extraRoutes?: any[] | undefined;
            hardPredefines?: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null | undefined;
            operaConfig?: string | null | undefined;
            runtimeData?: null | undefined;
        }, {
            options: {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            };
            levelId: string | null;
            mapId: string | null;
            bgmEvent: string | null;
            environmentSe: string | null;
            mapData: {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            };
            tilesDisallowToLocate: any[];
            runes: {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }[] | null;
            globalBuffs: {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }[] | null;
            routes: ({
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            } | null)[];
            enemies: any[];
            enemyDbRefs: {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }[];
            waves: {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }[];
            branches: Record<string, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }> | null;
            predefines: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null;
            excludeCharIdList: null;
            randomSeed: number;
            extraRoutes?: any[] | undefined;
            hardPredefines?: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null | undefined;
            operaConfig?: string | null | undefined;
            runtimeData?: null | undefined;
        }>;
    }, "strict", z.ZodTypeAny, {
        excel: {
            code: string;
            name: string;
            description: string;
            stageId: string;
            levelId: string;
            loadingPicId: string;
            actionCost: number;
            powerCost: number;
        };
        levels: {
            options: {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            };
            levelId: string | null;
            mapId: string | null;
            bgmEvent: string | null;
            environmentSe: string | null;
            mapData: {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            };
            tilesDisallowToLocate: any[];
            runes: {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }[] | null;
            globalBuffs: {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }[] | null;
            routes: ({
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            } | null)[];
            enemies: any[];
            enemyDbRefs: {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }[];
            waves: {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }[];
            branches: Record<string, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }> | null;
            predefines: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null;
            excludeCharIdList: null;
            randomSeed: number;
            extraRoutes?: any[] | undefined;
            hardPredefines?: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null | undefined;
            operaConfig?: string | null | undefined;
            runtimeData?: null | undefined;
        };
    }, {
        excel: {
            code: string;
            name: string;
            description: string;
            stageId: string;
            levelId: string;
            loadingPicId: string;
            actionCost: number;
            powerCost: number;
        };
        levels: {
            options: {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            };
            levelId: string | null;
            mapId: string | null;
            bgmEvent: string | null;
            environmentSe: string | null;
            mapData: {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            };
            tilesDisallowToLocate: any[];
            runes: {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }[] | null;
            globalBuffs: {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }[] | null;
            routes: ({
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            } | null)[];
            enemies: any[];
            enemyDbRefs: {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }[];
            waves: {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }[];
            branches: Record<string, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }> | null;
            predefines: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null;
            excludeCharIdList: null;
            randomSeed: number;
            extraRoutes?: any[] | undefined;
            hardPredefines?: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null | undefined;
            operaConfig?: string | null | undefined;
            runtimeData?: null | undefined;
        };
    }>>;
}, "strict", z.ZodTypeAny, {
    stageDict: Record<string, {
        excel: {
            code: string;
            name: string;
            description: string;
            stageId: string;
            levelId: string;
            loadingPicId: string;
            actionCost: number;
            powerCost: number;
        };
        levels: {
            options: {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            };
            levelId: string | null;
            mapId: string | null;
            bgmEvent: string | null;
            environmentSe: string | null;
            mapData: {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            };
            tilesDisallowToLocate: any[];
            runes: {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }[] | null;
            globalBuffs: {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }[] | null;
            routes: ({
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            } | null)[];
            enemies: any[];
            enemyDbRefs: {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }[];
            waves: {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }[];
            branches: Record<string, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }> | null;
            predefines: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null;
            excludeCharIdList: null;
            randomSeed: number;
            extraRoutes?: any[] | undefined;
            hardPredefines?: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null | undefined;
            operaConfig?: string | null | undefined;
            runtimeData?: null | undefined;
        };
    }>;
}, {
    stageDict: Record<string, {
        excel: {
            code: string;
            name: string;
            description: string;
            stageId: string;
            levelId: string;
            loadingPicId: string;
            actionCost: number;
            powerCost: number;
        };
        levels: {
            options: {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            };
            levelId: string | null;
            mapId: string | null;
            bgmEvent: string | null;
            environmentSe: string | null;
            mapData: {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            };
            tilesDisallowToLocate: any[];
            runes: {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }[] | null;
            globalBuffs: {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }[] | null;
            routes: ({
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            } | null)[];
            enemies: any[];
            enemyDbRefs: {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }[];
            waves: {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }[];
            branches: Record<string, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }> | null;
            predefines: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null;
            excludeCharIdList: null;
            randomSeed: number;
            extraRoutes?: any[] | undefined;
            hardPredefines?: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null | undefined;
            operaConfig?: string | null | undefined;
            runtimeData?: null | undefined;
        };
    }>;
}>;
export declare const SkillZod: z.ZodObject<{
    skillId: z.ZodString;
    iconId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    hidden: z.ZodBoolean;
    levels: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        rangeId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        description: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        skillType: z.ZodString;
        durationType: z.ZodString;
        spData: z.ZodObject<{
            spType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            levelUpCost: z.ZodNull;
            maxChargeTime: z.ZodNumber;
            spCost: z.ZodNumber;
            initSp: z.ZodNumber;
            increment: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            spCost: number;
            spType: string | number;
            initSp: number;
            increment: number;
            levelUpCost: null;
            maxChargeTime: number;
        }, {
            spCost: number;
            spType: string | number;
            initSp: number;
            increment: number;
            levelUpCost: null;
            maxChargeTime: number;
        }>;
        prefabId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        duration: z.ZodNumber;
        blackboard: z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
            valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }, {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }>, "many">;
    }, "strict", z.ZodTypeAny, {
        name: string;
        description: string | null;
        blackboard: {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }[];
        spData: {
            spCost: number;
            spType: string | number;
            initSp: number;
            increment: number;
            levelUpCost: null;
            maxChargeTime: number;
        };
        rangeId: string | null;
        skillType: string;
        durationType: string;
        prefabId: string | null;
        duration: number;
    }, {
        name: string;
        description: string | null;
        blackboard: {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }[];
        spData: {
            spCost: number;
            spType: string | number;
            initSp: number;
            increment: number;
            levelUpCost: null;
            maxChargeTime: number;
        };
        rangeId: string | null;
        skillType: string;
        durationType: string;
        prefabId: string | null;
        duration: number;
    }>, "many">;
}, "strict", z.ZodTypeAny, {
    hidden: boolean;
    iconId: string | null;
    levels: {
        name: string;
        description: string | null;
        blackboard: {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }[];
        spData: {
            spCost: number;
            spType: string | number;
            initSp: number;
            increment: number;
            levelUpCost: null;
            maxChargeTime: number;
        };
        rangeId: string | null;
        skillType: string;
        durationType: string;
        prefabId: string | null;
        duration: number;
    }[];
    skillId: string;
}, {
    hidden: boolean;
    iconId: string | null;
    levels: {
        name: string;
        description: string | null;
        blackboard: {
            key: string;
            value: number | null;
            valueStr?: string | null | undefined;
        }[];
        spData: {
            spCost: number;
            spType: string | number;
            initSp: number;
            increment: number;
            levelUpCost: null;
            maxChargeTime: number;
        };
        rangeId: string | null;
        skillType: string;
        durationType: string;
        prefabId: string | null;
        duration: number;
    }[];
    skillId: string;
}>;
export declare const SkinZod: z.ZodObject<{
    skinId: z.ZodString;
    charId: z.ZodString;
    tokenSkinMap: z.ZodUnion<[z.ZodArray<z.ZodObject<{
        tokenId: z.ZodString;
        tokenSkinId: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        tokenId: string;
        tokenSkinId: string;
    }, {
        tokenId: string;
        tokenSkinId: string;
    }>, "many">, z.ZodNull]>;
    illustId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    dynIllustId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    avatarId: z.ZodString;
    portraitId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    dynPortraitId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    dynEntranceId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    buildingId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    battleSkin: z.ZodObject<{
        overwritePrefab: z.ZodBoolean;
        skinOrPrefabId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        overwritePrefab: boolean;
        skinOrPrefabId: string | null;
    }, {
        overwritePrefab: boolean;
        skinOrPrefabId: string | null;
    }>;
    isBuySkin: z.ZodBoolean;
    tmplId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    voiceId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    voiceType: z.ZodString;
    displaySkin: z.ZodObject<{
        skinName: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        colorList: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
        titleList: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
        modelName: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        drawerList: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
        designerList: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
        skinGroupId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        skinGroupName: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        skinGroupSortIndex: z.ZodNumber;
        content: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        dialog: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        usage: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        description: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        obtainApproach: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        sortId: z.ZodNumber;
        displayTagId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        getTime: z.ZodNumber;
        onYear: z.ZodNumber;
        onPeriod: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        content: string | null;
        dialog: string | null;
        description: string | null;
        sortId: number;
        usage: string | null;
        obtainApproach: string | null;
        skinName: string | null;
        colorList: string[] | null;
        titleList: string[] | null;
        modelName: string | null;
        drawerList: string[] | null;
        designerList: string[] | null;
        skinGroupId: string | null;
        skinGroupName: string | null;
        skinGroupSortIndex: number;
        displayTagId: string | null;
        getTime: number;
        onYear: number;
        onPeriod: number;
    }, {
        content: string | null;
        dialog: string | null;
        description: string | null;
        sortId: number;
        usage: string | null;
        obtainApproach: string | null;
        skinName: string | null;
        colorList: string[] | null;
        titleList: string[] | null;
        modelName: string | null;
        drawerList: string[] | null;
        designerList: string[] | null;
        skinGroupId: string | null;
        skinGroupName: string | null;
        skinGroupSortIndex: number;
        displayTagId: string | null;
        getTime: number;
        onYear: number;
        onPeriod: number;
    }>;
}, "strict", z.ZodTypeAny, {
    skinId: string;
    tmplId: string | null;
    charId: string;
    tokenSkinMap: {
        tokenId: string;
        tokenSkinId: string;
    }[] | null;
    illustId: string | null;
    dynIllustId: string | null;
    avatarId: string;
    portraitId: string | null;
    dynPortraitId: string | null;
    dynEntranceId: string | null;
    buildingId: string | null;
    battleSkin: {
        overwritePrefab: boolean;
        skinOrPrefabId: string | null;
    };
    isBuySkin: boolean;
    voiceId: string | null;
    voiceType: string;
    displaySkin: {
        content: string | null;
        dialog: string | null;
        description: string | null;
        sortId: number;
        usage: string | null;
        obtainApproach: string | null;
        skinName: string | null;
        colorList: string[] | null;
        titleList: string[] | null;
        modelName: string | null;
        drawerList: string[] | null;
        designerList: string[] | null;
        skinGroupId: string | null;
        skinGroupName: string | null;
        skinGroupSortIndex: number;
        displayTagId: string | null;
        getTime: number;
        onYear: number;
        onPeriod: number;
    };
}, {
    skinId: string;
    tmplId: string | null;
    charId: string;
    tokenSkinMap: {
        tokenId: string;
        tokenSkinId: string;
    }[] | null;
    illustId: string | null;
    dynIllustId: string | null;
    avatarId: string;
    portraitId: string | null;
    dynPortraitId: string | null;
    dynEntranceId: string | null;
    buildingId: string | null;
    battleSkin: {
        overwritePrefab: boolean;
        skinOrPrefabId: string | null;
    };
    isBuySkin: boolean;
    voiceId: string | null;
    voiceType: string;
    displaySkin: {
        content: string | null;
        dialog: string | null;
        description: string | null;
        sortId: number;
        usage: string | null;
        obtainApproach: string | null;
        skinName: string | null;
        colorList: string[] | null;
        titleList: string[] | null;
        modelName: string | null;
        drawerList: string[] | null;
        designerList: string[] | null;
        skinGroupId: string | null;
        skinGroupName: string | null;
        skinGroupSortIndex: number;
        displayTagId: string | null;
        getTime: number;
        onYear: number;
        onPeriod: number;
    };
}>;
export declare const StageZod: z.ZodObject<{
    excel: z.ZodObject<{
        stageType: z.ZodString;
        difficulty: z.ZodString;
        performanceStageFlag: z.ZodString;
        diffGroup: z.ZodString;
        unlockCondition: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            stageId: z.ZodString;
            completeState: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            stageId: string;
            completeState: string;
        }, {
            stageId: string;
            completeState: string;
        }>, z.ZodNull]>, "many">;
        stageId: z.ZodString;
        levelId: z.ZodString;
        zoneId: z.ZodString;
        code: z.ZodString;
        name: z.ZodString;
        description: z.ZodString;
        hardStagedId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        dangerLevel: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        dangerPoint: z.ZodNumber;
        loadingPicId: z.ZodString;
        canPractice: z.ZodBoolean;
        canBattleReplay: z.ZodBoolean;
        apCost: z.ZodNumber;
        apFailReturn: z.ZodNumber;
        etItemId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        etCost: z.ZodNumber;
        etFailReturn: z.ZodNumber;
        etButtonStyle: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        apProtectTimes: z.ZodNumber;
        diamondOnceDrop: z.ZodNumber;
        practiceTicketCost: z.ZodNumber;
        dailyStageDifficulty: z.ZodNumber;
        expGain: z.ZodNumber;
        goldGain: z.ZodNumber;
        loseExpGain: z.ZodNumber;
        loseGoldGain: z.ZodNumber;
        passFavor: z.ZodNumber;
        completeFavor: z.ZodNumber;
        slProgress: z.ZodNumber;
        displayMainItem: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        hilightMark: z.ZodBoolean;
        bossMark: z.ZodBoolean;
        isPredefined: z.ZodBoolean;
        isHardPredefined: z.ZodBoolean;
        isSkillSelectablePredefined: z.ZodBoolean;
        isStoryOnly: z.ZodBoolean;
        appearanceStyle: z.ZodString;
        stageDropInfo: z.ZodObject<{
            firstPassRewards: z.ZodNull;
            firstCompleteRewards: z.ZodNull;
            passRewards: z.ZodNull;
            completeRewards: z.ZodNull;
            displayRewards: z.ZodArray<z.ZodObject<{
                type: z.ZodString;
                id: z.ZodString;
                dropType: z.ZodString;
            }, "strict", z.ZodTypeAny, {
                type: string;
                id: string;
                dropType: string;
            }, {
                type: string;
                id: string;
                dropType: string;
            }>, "many">;
            displayDetailRewards: z.ZodArray<z.ZodObject<{
                occPercent: z.ZodString;
                type: z.ZodString;
                id: z.ZodString;
                dropType: z.ZodString;
            }, "strict", z.ZodTypeAny, {
                type: string;
                id: string;
                dropType: string;
                occPercent: string;
            }, {
                type: string;
                id: string;
                dropType: string;
                occPercent: string;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            firstPassRewards: null;
            firstCompleteRewards: null;
            passRewards: null;
            completeRewards: null;
            displayRewards: {
                type: string;
                id: string;
                dropType: string;
            }[];
            displayDetailRewards: {
                type: string;
                id: string;
                dropType: string;
                occPercent: string;
            }[];
        }, {
            firstPassRewards: null;
            firstCompleteRewards: null;
            passRewards: null;
            completeRewards: null;
            displayRewards: {
                type: string;
                id: string;
                dropType: string;
            }[];
            displayDetailRewards: {
                type: string;
                id: string;
                dropType: string;
                occPercent: string;
            }[];
        }>;
        canUseCharm: z.ZodBoolean;
        canUseTech: z.ZodBoolean;
        canUseTrapTool: z.ZodBoolean;
        canUseBattlePerformance: z.ZodBoolean;
        startButtonOverrideId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        isStagePatch: z.ZodBoolean;
        mainStageId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        extraCondition: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            index: z.ZodNumber;
            template: z.ZodString;
            unlockParam: z.ZodArray<z.ZodString, "many">;
        }, "strict", z.ZodTypeAny, {
            index: number;
            template: string;
            unlockParam: string[];
        }, {
            index: number;
            template: string;
            unlockParam: string[];
        }>, "many">, z.ZodNull]>;
        extraInfo: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            stageId: z.ZodString;
            rewards: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                count: z.ZodNumber;
                type: z.ZodString;
            }, "strict", z.ZodTypeAny, {
                type: string;
                id: string;
                count: number;
            }, {
                type: string;
                id: string;
                count: number;
            }>, "many">;
            progressInfo: z.ZodObject<{
                progressType: z.ZodString;
                descList: z.ZodRecord<z.ZodString, z.ZodString>;
            }, "strict", z.ZodTypeAny, {
                progressType: string;
                descList: Record<string, string>;
            }, {
                progressType: string;
                descList: Record<string, string>;
            }>;
        }, "strict", z.ZodTypeAny, {
            stageId: string;
            rewards: {
                type: string;
                id: string;
                count: number;
            }[];
            progressInfo: {
                progressType: string;
                descList: Record<string, string>;
            };
        }, {
            stageId: string;
            rewards: {
                type: string;
                id: string;
                count: number;
            }[];
            progressInfo: {
                progressType: string;
                descList: Record<string, string>;
            };
        }>, "many">, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        code: string;
        name: string;
        description: string;
        stageId: string;
        apCost: number;
        levelId: string;
        loadingPicId: string;
        difficulty: string;
        unlockCondition: ({
            stageId: string;
            completeState: string;
        } | null)[];
        zoneId: string;
        stageType: string;
        performanceStageFlag: string;
        diffGroup: string;
        hardStagedId: string | null;
        dangerLevel: string | null;
        dangerPoint: number;
        canPractice: boolean;
        canBattleReplay: boolean;
        apFailReturn: number;
        etItemId: string | null;
        etCost: number;
        etFailReturn: number;
        etButtonStyle: string | null;
        apProtectTimes: number;
        diamondOnceDrop: number;
        practiceTicketCost: number;
        dailyStageDifficulty: number;
        expGain: number;
        goldGain: number;
        loseExpGain: number;
        loseGoldGain: number;
        passFavor: number;
        completeFavor: number;
        slProgress: number;
        displayMainItem: string | null;
        hilightMark: boolean;
        bossMark: boolean;
        isPredefined: boolean;
        isHardPredefined: boolean;
        isSkillSelectablePredefined: boolean;
        isStoryOnly: boolean;
        appearanceStyle: string;
        stageDropInfo: {
            firstPassRewards: null;
            firstCompleteRewards: null;
            passRewards: null;
            completeRewards: null;
            displayRewards: {
                type: string;
                id: string;
                dropType: string;
            }[];
            displayDetailRewards: {
                type: string;
                id: string;
                dropType: string;
                occPercent: string;
            }[];
        };
        canUseCharm: boolean;
        canUseTech: boolean;
        canUseTrapTool: boolean;
        canUseBattlePerformance: boolean;
        startButtonOverrideId: string | null;
        isStagePatch: boolean;
        mainStageId: string | null;
        extraCondition: {
            index: number;
            template: string;
            unlockParam: string[];
        }[] | null;
        extraInfo: {
            stageId: string;
            rewards: {
                type: string;
                id: string;
                count: number;
            }[];
            progressInfo: {
                progressType: string;
                descList: Record<string, string>;
            };
        }[] | null;
    }, {
        code: string;
        name: string;
        description: string;
        stageId: string;
        apCost: number;
        levelId: string;
        loadingPicId: string;
        difficulty: string;
        unlockCondition: ({
            stageId: string;
            completeState: string;
        } | null)[];
        zoneId: string;
        stageType: string;
        performanceStageFlag: string;
        diffGroup: string;
        hardStagedId: string | null;
        dangerLevel: string | null;
        dangerPoint: number;
        canPractice: boolean;
        canBattleReplay: boolean;
        apFailReturn: number;
        etItemId: string | null;
        etCost: number;
        etFailReturn: number;
        etButtonStyle: string | null;
        apProtectTimes: number;
        diamondOnceDrop: number;
        practiceTicketCost: number;
        dailyStageDifficulty: number;
        expGain: number;
        goldGain: number;
        loseExpGain: number;
        loseGoldGain: number;
        passFavor: number;
        completeFavor: number;
        slProgress: number;
        displayMainItem: string | null;
        hilightMark: boolean;
        bossMark: boolean;
        isPredefined: boolean;
        isHardPredefined: boolean;
        isSkillSelectablePredefined: boolean;
        isStoryOnly: boolean;
        appearanceStyle: string;
        stageDropInfo: {
            firstPassRewards: null;
            firstCompleteRewards: null;
            passRewards: null;
            completeRewards: null;
            displayRewards: {
                type: string;
                id: string;
                dropType: string;
            }[];
            displayDetailRewards: {
                type: string;
                id: string;
                dropType: string;
                occPercent: string;
            }[];
        };
        canUseCharm: boolean;
        canUseTech: boolean;
        canUseTrapTool: boolean;
        canUseBattlePerformance: boolean;
        startButtonOverrideId: string | null;
        isStagePatch: boolean;
        mainStageId: string | null;
        extraCondition: {
            index: number;
            template: string;
            unlockParam: string[];
        }[] | null;
        extraInfo: {
            stageId: string;
            rewards: {
                type: string;
                id: string;
                count: number;
            }[];
            progressInfo: {
                progressType: string;
                descList: Record<string, string>;
            };
        }[] | null;
    }>;
    levels: z.ZodObject<{
        options: z.ZodObject<{
            characterLimit: z.ZodNumber;
            maxLifePoint: z.ZodNumber;
            initialCost: z.ZodNumber;
            maxCost: z.ZodNumber;
            costIncreaseTime: z.ZodNumber;
            moveMultiplier: z.ZodNumber;
            steeringEnabled: z.ZodBoolean;
            isTrainingLevel: z.ZodBoolean;
            isHardTrainingLevel: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            isPredefinedCardsSelectable: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            maxPlayTime: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
            functionDisableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            configBlackBoard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }>, "many">, z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        }, {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        }>;
        levelId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        mapId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        bgmEvent: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        environmentSe: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        mapData: z.ZodObject<{
            map: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
            tiles: z.ZodArray<z.ZodObject<{
                tileKey: z.ZodString;
                heightType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                buildableType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                passableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                playerSideMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull]>;
                effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    offset: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                        z: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        x: number;
                        y: number;
                        z: number;
                    }, {
                        x: number;
                        y: number;
                        z: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                }, "strict", z.ZodTypeAny, {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }, {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }>, "many">, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }, {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }>, "many">;
            blockEdges: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodNull]>;
            tags: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
            effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                offset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                    z: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: number;
                    y: number;
                    z: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            }, "strict", z.ZodTypeAny, {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }, {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }>, "many">, z.ZodNull]>;
            layerRects: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
            width: z.ZodOptional<z.ZodNumber>;
            height: z.ZodOptional<z.ZodNumber>;
        }, "strict", z.ZodTypeAny, {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        }, {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        }>;
        tilesDisallowToLocate: z.ZodArray<z.ZodAny, "many">;
        runes: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            difficultyMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            key: z.ZodString;
            professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
            buildableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            blackboard: z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }, {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }>, "many">, z.ZodNull]>;
        globalBuffs: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            prefabKey: z.ZodString;
            blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }>, "many">, z.ZodNull]>;
            overrideCameraEffect: z.ZodNull;
            passProfessionMaskFlag: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
            useExtraData: z.ZodOptional<z.ZodBoolean>;
        }, "strict", z.ZodTypeAny, {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }, {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }>, "many">, z.ZodNull]>;
        routes: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            motionMode: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            startPosition: z.ZodObject<{
                row: z.ZodNumber;
                col: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                col: number;
                row: number;
            }, {
                col: number;
                row: number;
            }>;
            endPosition: z.ZodObject<{
                row: z.ZodNumber;
                col: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                col: number;
                row: number;
            }, {
                col: number;
                row: number;
            }>;
            spawnRandomRange: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: number;
                y: number;
            }>;
            spawnOffset: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: number;
                y: number;
            }>;
            checkpoints: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                type: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                time: z.ZodNumber;
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    col: number;
                    row: number;
                }, {
                    col: number;
                    row: number;
                }>;
                reachOffset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x: number;
                    y: number;
                }, {
                    x: number;
                    y: number;
                }>;
                randomizeReachOffset: z.ZodBoolean;
                reachDistance: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }, {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }>, "many">, z.ZodNull]>;
            allowDiagonalMove: z.ZodBoolean;
            visitEveryTileCenter: z.ZodBoolean;
            visitEveryNodeCenter: z.ZodBoolean;
            visitEveryCheckPoint: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        }, {
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        }>, z.ZodNull]>, "many">;
        extraRoutes: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodUndefined]>;
        enemies: z.ZodArray<z.ZodAny, "many">;
        enemyDbRefs: z.ZodArray<z.ZodObject<{
            useDb: z.ZodBoolean;
            id: z.ZodString;
            level: z.ZodNumber;
            overwrittenData: z.ZodUnion<[z.ZodObject<{
                name: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>;
                description: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>;
                prefabKey: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>;
                attributes: z.ZodObject<{
                    maxHp: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    atk: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    def: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    magicResistance: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    cost: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    blockCnt: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    moveSpeed: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    attackSpeed: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    baseAttackTime: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    respawnTime: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    hpRecoveryPerSec: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    spRecoveryPerSec: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    maxDeployCount: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    massLevel: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    baseForceLevel: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    tauntLevel: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    epDamageResistance: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    epResistance: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    stunImmune: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>;
                    silenceImmune: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>;
                    sleepImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>, z.ZodUndefined]>;
                    frozenImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>, z.ZodUndefined]>;
                    levitateImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                }, {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                }>;
                applyWay: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>, z.ZodUndefined]>;
                motion: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>, z.ZodUndefined]>;
                enemyTags: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string[] | null;
                }, {
                    m_defined: boolean;
                    m_value: string[] | null;
                }>, z.ZodUndefined]>;
                lifePointReduce: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>;
                levelType: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: string | null;
                }, {
                    m_defined: boolean;
                    m_value: string | null;
                }>, z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>, z.ZodUndefined]>;
                rangeRadius: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>;
                numOfExtraDrops: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>, z.ZodUndefined]>;
                viewRadius: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: number | null;
                }, {
                    m_defined: boolean;
                    m_value: number | null;
                }>, z.ZodUndefined]>;
                notCountInTotal: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodBoolean;
                }, "strict", z.ZodTypeAny, {
                    m_defined: boolean;
                    m_value: boolean;
                }, {
                    m_defined: boolean;
                    m_value: boolean;
                }>, z.ZodUndefined]>;
                talentBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull]>;
                skills: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    prefabKey: z.ZodString;
                    priority: z.ZodNumber;
                    cooldown: z.ZodNumber;
                    initCooldown: z.ZodNumber;
                    spCost: z.ZodNumber;
                    blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }>, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }, {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }>, "many">, z.ZodNull]>;
                spData: z.ZodUnion<[z.ZodObject<{
                    spType: z.ZodString;
                    maxSp: z.ZodNumber;
                    initSp: z.ZodNumber;
                    increment: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                }, {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                }>, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            }, {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            }>, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }, {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }>, "many">;
        waves: z.ZodArray<z.ZodObject<{
            preDelay: z.ZodNumber;
            postDelay: z.ZodNumber;
            maxTimeWaitingForNextWave: z.ZodNumber;
            fragments: z.ZodArray<z.ZodObject<{
                preDelay: z.ZodNumber;
                actions: z.ZodArray<z.ZodObject<{
                    actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    managedByScheduler: z.ZodBoolean;
                    key: z.ZodString;
                    count: z.ZodNumber;
                    preDelay: z.ZodNumber;
                    interval: z.ZodNumber;
                    routeIndex: z.ZodNumber;
                    blockFragment: z.ZodBoolean;
                    autoPreviewRoute: z.ZodBoolean;
                    autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                    hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                    weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                    dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }, {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }>, "many">;
                name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strict", z.ZodTypeAny, {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }, {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }>, "many">;
            advancedWaveTag: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strict", z.ZodTypeAny, {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }, {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }>, "many">;
        branches: z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodObject<{
            phases: z.ZodArray<z.ZodObject<{
                preDelay: z.ZodNumber;
                actions: z.ZodArray<z.ZodObject<{
                    actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    managedByScheduler: z.ZodBoolean;
                    key: z.ZodString;
                    count: z.ZodNumber;
                    preDelay: z.ZodNumber;
                    interval: z.ZodNumber;
                    routeIndex: z.ZodNumber;
                    blockFragment: z.ZodBoolean;
                    autoPreviewRoute: z.ZodBoolean;
                    autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                    hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                    weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                    dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }, {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }>, "many">;
                m_randomActionGroups: z.ZodOptional<z.ZodNull>;
                m_actionWithRandomSpawn: z.ZodOptional<z.ZodNull>;
                m_validActionPackKeys: z.ZodOptional<z.ZodNull>;
            }, "strict", z.ZodTypeAny, {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }, {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }>>, z.ZodNull]>;
        predefines: z.ZodUnion<[z.ZodObject<{
            characterInsts: z.ZodArray<z.ZodAny, "many">;
            tokenInsts: z.ZodArray<z.ZodObject<{
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    col: number;
                    row: number;
                }, {
                    col: number;
                    row: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                hidden: z.ZodBoolean;
                alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    level: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    level: number;
                }, {
                    key: string;
                    level: number;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
                inst: z.ZodObject<{
                    characterKey: z.ZodString;
                    level: z.ZodNumber;
                    phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    favorPoint: z.ZodNumber;
                    potentialRank: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                }, {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                }>;
                skillIndex: z.ZodNumber;
                mainSkillLvl: z.ZodNumber;
                skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }, {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }>, "many">;
            characterCards: z.ZodArray<z.ZodAny, "many">;
            tokenCards: z.ZodArray<z.ZodAny, "many">;
        }, "strict", z.ZodTypeAny, {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        }, {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        }>, z.ZodNull]>;
        hardPredefines: z.ZodUnion<[z.ZodObject<{
            characterInsts: z.ZodArray<z.ZodAny, "many">;
            tokenInsts: z.ZodArray<z.ZodObject<{
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    col: number;
                    row: number;
                }, {
                    col: number;
                    row: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                hidden: z.ZodBoolean;
                alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    level: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    level: number;
                }, {
                    key: string;
                    level: number;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
                inst: z.ZodObject<{
                    characterKey: z.ZodString;
                    level: z.ZodNumber;
                    phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    favorPoint: z.ZodNumber;
                    potentialRank: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                }, {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                }>;
                skillIndex: z.ZodNumber;
                mainSkillLvl: z.ZodNumber;
                skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }, {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }>, "many">;
            characterCards: z.ZodArray<z.ZodAny, "many">;
            tokenCards: z.ZodArray<z.ZodAny, "many">;
        }, "strict", z.ZodTypeAny, {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        }, {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        }>, z.ZodNull, z.ZodUndefined]>;
        excludeCharIdList: z.ZodNull;
        randomSeed: z.ZodNumber;
        operaConfig: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        runtimeData: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
    }, "strict", z.ZodTypeAny, {
        options: {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        };
        levelId: string | null;
        mapId: string | null;
        bgmEvent: string | null;
        environmentSe: string | null;
        mapData: {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        };
        tilesDisallowToLocate: any[];
        runes: {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }[] | null;
        globalBuffs: {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }[] | null;
        routes: ({
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        } | null)[];
        enemies: any[];
        enemyDbRefs: {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }[];
        waves: {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }[];
        branches: Record<string, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }> | null;
        predefines: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null;
        excludeCharIdList: null;
        randomSeed: number;
        extraRoutes?: any[] | undefined;
        hardPredefines?: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null | undefined;
        operaConfig?: string | null | undefined;
        runtimeData?: null | undefined;
    }, {
        options: {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        };
        levelId: string | null;
        mapId: string | null;
        bgmEvent: string | null;
        environmentSe: string | null;
        mapData: {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        };
        tilesDisallowToLocate: any[];
        runes: {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }[] | null;
        globalBuffs: {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }[] | null;
        routes: ({
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        } | null)[];
        enemies: any[];
        enemyDbRefs: {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }[];
        waves: {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }[];
        branches: Record<string, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }> | null;
        predefines: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null;
        excludeCharIdList: null;
        randomSeed: number;
        extraRoutes?: any[] | undefined;
        hardPredefines?: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null | undefined;
        operaConfig?: string | null | undefined;
        runtimeData?: null | undefined;
    }>;
}, "strict", z.ZodTypeAny, {
    excel: {
        code: string;
        name: string;
        description: string;
        stageId: string;
        apCost: number;
        levelId: string;
        loadingPicId: string;
        difficulty: string;
        unlockCondition: ({
            stageId: string;
            completeState: string;
        } | null)[];
        zoneId: string;
        stageType: string;
        performanceStageFlag: string;
        diffGroup: string;
        hardStagedId: string | null;
        dangerLevel: string | null;
        dangerPoint: number;
        canPractice: boolean;
        canBattleReplay: boolean;
        apFailReturn: number;
        etItemId: string | null;
        etCost: number;
        etFailReturn: number;
        etButtonStyle: string | null;
        apProtectTimes: number;
        diamondOnceDrop: number;
        practiceTicketCost: number;
        dailyStageDifficulty: number;
        expGain: number;
        goldGain: number;
        loseExpGain: number;
        loseGoldGain: number;
        passFavor: number;
        completeFavor: number;
        slProgress: number;
        displayMainItem: string | null;
        hilightMark: boolean;
        bossMark: boolean;
        isPredefined: boolean;
        isHardPredefined: boolean;
        isSkillSelectablePredefined: boolean;
        isStoryOnly: boolean;
        appearanceStyle: string;
        stageDropInfo: {
            firstPassRewards: null;
            firstCompleteRewards: null;
            passRewards: null;
            completeRewards: null;
            displayRewards: {
                type: string;
                id: string;
                dropType: string;
            }[];
            displayDetailRewards: {
                type: string;
                id: string;
                dropType: string;
                occPercent: string;
            }[];
        };
        canUseCharm: boolean;
        canUseTech: boolean;
        canUseTrapTool: boolean;
        canUseBattlePerformance: boolean;
        startButtonOverrideId: string | null;
        isStagePatch: boolean;
        mainStageId: string | null;
        extraCondition: {
            index: number;
            template: string;
            unlockParam: string[];
        }[] | null;
        extraInfo: {
            stageId: string;
            rewards: {
                type: string;
                id: string;
                count: number;
            }[];
            progressInfo: {
                progressType: string;
                descList: Record<string, string>;
            };
        }[] | null;
    };
    levels: {
        options: {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        };
        levelId: string | null;
        mapId: string | null;
        bgmEvent: string | null;
        environmentSe: string | null;
        mapData: {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        };
        tilesDisallowToLocate: any[];
        runes: {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }[] | null;
        globalBuffs: {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }[] | null;
        routes: ({
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        } | null)[];
        enemies: any[];
        enemyDbRefs: {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }[];
        waves: {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }[];
        branches: Record<string, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }> | null;
        predefines: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null;
        excludeCharIdList: null;
        randomSeed: number;
        extraRoutes?: any[] | undefined;
        hardPredefines?: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null | undefined;
        operaConfig?: string | null | undefined;
        runtimeData?: null | undefined;
    };
}, {
    excel: {
        code: string;
        name: string;
        description: string;
        stageId: string;
        apCost: number;
        levelId: string;
        loadingPicId: string;
        difficulty: string;
        unlockCondition: ({
            stageId: string;
            completeState: string;
        } | null)[];
        zoneId: string;
        stageType: string;
        performanceStageFlag: string;
        diffGroup: string;
        hardStagedId: string | null;
        dangerLevel: string | null;
        dangerPoint: number;
        canPractice: boolean;
        canBattleReplay: boolean;
        apFailReturn: number;
        etItemId: string | null;
        etCost: number;
        etFailReturn: number;
        etButtonStyle: string | null;
        apProtectTimes: number;
        diamondOnceDrop: number;
        practiceTicketCost: number;
        dailyStageDifficulty: number;
        expGain: number;
        goldGain: number;
        loseExpGain: number;
        loseGoldGain: number;
        passFavor: number;
        completeFavor: number;
        slProgress: number;
        displayMainItem: string | null;
        hilightMark: boolean;
        bossMark: boolean;
        isPredefined: boolean;
        isHardPredefined: boolean;
        isSkillSelectablePredefined: boolean;
        isStoryOnly: boolean;
        appearanceStyle: string;
        stageDropInfo: {
            firstPassRewards: null;
            firstCompleteRewards: null;
            passRewards: null;
            completeRewards: null;
            displayRewards: {
                type: string;
                id: string;
                dropType: string;
            }[];
            displayDetailRewards: {
                type: string;
                id: string;
                dropType: string;
                occPercent: string;
            }[];
        };
        canUseCharm: boolean;
        canUseTech: boolean;
        canUseTrapTool: boolean;
        canUseBattlePerformance: boolean;
        startButtonOverrideId: string | null;
        isStagePatch: boolean;
        mainStageId: string | null;
        extraCondition: {
            index: number;
            template: string;
            unlockParam: string[];
        }[] | null;
        extraInfo: {
            stageId: string;
            rewards: {
                type: string;
                id: string;
                count: number;
            }[];
            progressInfo: {
                progressType: string;
                descList: Record<string, string>;
            };
        }[] | null;
    };
    levels: {
        options: {
            characterLimit: number;
            maxLifePoint: number;
            initialCost: number;
            maxCost: number;
            costIncreaseTime: number;
            moveMultiplier: number;
            steeringEnabled: boolean;
            isTrainingLevel: boolean;
            functionDisableMask: string | number;
            isHardTrainingLevel?: boolean | undefined;
            isPredefinedCardsSelectable?: boolean | undefined;
            maxPlayTime?: number | undefined;
            configBlackBoard?: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null | undefined;
        };
        levelId: string | null;
        mapId: string | null;
        bgmEvent: string | null;
        environmentSe: string | null;
        mapData: {
            map: number[][];
            tiles: {
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                tileKey: string;
                heightType: string | number;
                buildableType: string | number;
                passableMask: string | number;
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                playerSideMask?: string | number | undefined;
            }[];
            effects: {
                offset: {
                    x: number;
                    y: number;
                    z: number;
                };
                key: string;
                direction: string | number;
            }[] | null;
            blockEdges: any[] | null;
            tags: string[] | null;
            layerRects?: null | undefined;
            width?: number | undefined;
            height?: number | undefined;
        };
        tilesDisallowToLocate: any[];
        runes: {
            key: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            difficultyMask: string | number;
            buildableMask: string | number;
            professionMask?: string | number | undefined;
        }[] | null;
        globalBuffs: {
            prefabKey: string;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[] | null;
            overrideCameraEffect: null;
            passProfessionMaskFlag?: boolean | undefined;
            professionMask?: string | number | undefined;
            useExtraData?: boolean | undefined;
        }[] | null;
        routes: ({
            motionMode: string | number;
            startPosition: {
                col: number;
                row: number;
            };
            endPosition: {
                col: number;
                row: number;
            };
            spawnRandomRange: {
                x: number;
                y: number;
            };
            spawnOffset: {
                x: number;
                y: number;
            };
            checkpoints: {
                type: string | number;
                time: number;
                position: {
                    col: number;
                    row: number;
                };
                reachOffset: {
                    x: number;
                    y: number;
                };
                randomizeReachOffset: boolean;
                reachDistance: number;
            }[] | null;
            allowDiagonalMove: boolean;
            visitEveryTileCenter: boolean;
            visitEveryNodeCenter: boolean;
            visitEveryCheckPoint?: boolean | undefined;
        } | null)[];
        enemies: any[];
        enemyDbRefs: {
            id: string;
            level: number;
            useDb: boolean;
            overwrittenData: {
                name: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                attributes: {
                    maxHp: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    atk: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    def: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    magicResistance: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    cost: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    blockCnt: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    moveSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    attackSpeed: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseAttackTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    respawnTime: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    hpRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    spRecoveryPerSec: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    maxDeployCount: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    massLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    baseForceLevel: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    stunImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    silenceImmune: {
                        m_defined: boolean;
                        m_value: boolean;
                    };
                    tauntLevel?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epDamageResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    epResistance?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    sleepImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    frozenImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                    levitateImmune?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                };
                description: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                prefabKey: {
                    m_defined: boolean;
                    m_value: string | null;
                };
                lifePointReduce: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                rangeRadius: {
                    m_defined: boolean;
                    m_value: number | null;
                };
                talentBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                skills: {
                    priority: number;
                    prefabKey: string;
                    cooldown: number;
                    initCooldown: number;
                    spCost: number;
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                }[] | null;
                spData: {
                    spType: string;
                    maxSp: number;
                    initSp: number;
                    increment: number;
                } | null;
                applyWay?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                motion?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | undefined;
                enemyTags?: {
                    m_defined: boolean;
                    m_value: string[] | null;
                } | undefined;
                levelType?: {
                    m_defined: boolean;
                    m_value: string | null;
                } | {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                numOfExtraDrops?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                viewRadius?: {
                    m_defined: boolean;
                    m_value: number | null;
                } | undefined;
                notCountInTotal?: {
                    m_defined: boolean;
                    m_value: boolean;
                } | undefined;
            } | null;
        }[];
        waves: {
            preDelay: number;
            postDelay: number;
            maxTimeWaitingForNextWave: number;
            fragments: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                name?: string | null | undefined;
            }[];
            advancedWaveTag?: string | null | undefined;
            name?: string | null | undefined;
        }[];
        branches: Record<string, {
            phases: {
                preDelay: number;
                actions: {
                    interval: number;
                    key: string;
                    count: number;
                    actionType: string | number;
                    managedByScheduler: boolean;
                    preDelay: number;
                    routeIndex: number;
                    blockFragment: boolean;
                    autoPreviewRoute: boolean;
                    isUnharmfulAndAlwaysCountAsKilled: boolean;
                    hiddenGroup: string | null;
                    autoDisplayEnemyInfo?: boolean | undefined;
                    randomSpawnGroupKey?: string | null | undefined;
                    randomSpawnGroupPackKey?: string | null | undefined;
                    randomType?: string | number | undefined;
                    weight?: number | undefined;
                    dontBlockWave?: boolean | undefined;
                    isValid?: boolean | undefined;
                    extraMeta?: null | undefined;
                }[];
                m_randomActionGroups?: null | undefined;
                m_actionWithRandomSpawn?: null | undefined;
                m_validActionPackKeys?: null | undefined;
            }[];
        }> | null;
        predefines: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null;
        excludeCharIdList: null;
        randomSeed: number;
        extraRoutes?: any[] | undefined;
        hardPredefines?: {
            characterInsts: any[];
            tokenInsts: {
                direction: string | number;
                position: {
                    col: number;
                    row: number;
                };
                hidden: boolean;
                alias: string | null;
                inst: {
                    level: number;
                    phase: string | number;
                    characterKey: string;
                    favorPoint: number;
                    potentialRank: number;
                };
                skillIndex: number;
                mainSkillLvl: number;
                skinId: string | null;
                uniEquipIds?: {
                    key: string;
                    level: number;
                }[] | null | undefined;
                tmplId?: string | null | undefined;
                overrideSkillBlackboard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }[];
            characterCards: any[];
            tokenCards: any[];
        } | null | undefined;
        operaConfig?: string | null | undefined;
        runtimeData?: null | undefined;
    };
}>;
export declare const OperatorZod: z.ZodObject<{
    id: z.ZodString;
    recruit: z.ZodNumber;
    archetype: z.ZodString;
    range: z.ZodObject<{
        id: z.ZodString;
        direction: z.ZodNumber;
        grids: z.ZodArray<z.ZodObject<{
            row: z.ZodNumber;
            col: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            col: number;
            row: number;
        }, {
            col: number;
            row: number;
        }>, "many">;
    }, "strict", z.ZodTypeAny, {
        id: string;
        direction: number;
        grids: {
            col: number;
            row: number;
        }[];
    }, {
        id: string;
        direction: number;
        grids: {
            col: number;
            row: number;
        }[];
    }>;
    skills: z.ZodArray<z.ZodObject<{
        skillId: z.ZodString;
        iconId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        hidden: z.ZodBoolean;
        levels: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            rangeId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            description: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            skillType: z.ZodString;
            durationType: z.ZodString;
            spData: z.ZodObject<{
                spType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                levelUpCost: z.ZodNull;
                maxChargeTime: z.ZodNumber;
                spCost: z.ZodNumber;
                initSp: z.ZodNumber;
                increment: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                spCost: number;
                spType: string | number;
                initSp: number;
                increment: number;
                levelUpCost: null;
                maxChargeTime: number;
            }, {
                spCost: number;
                spType: string | number;
                initSp: number;
                increment: number;
                levelUpCost: null;
                maxChargeTime: number;
            }>;
            prefabId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            duration: z.ZodNumber;
            blackboard: z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }, {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            name: string;
            description: string | null;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            spData: {
                spCost: number;
                spType: string | number;
                initSp: number;
                increment: number;
                levelUpCost: null;
                maxChargeTime: number;
            };
            rangeId: string | null;
            skillType: string;
            durationType: string;
            prefabId: string | null;
            duration: number;
        }, {
            name: string;
            description: string | null;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            spData: {
                spCost: number;
                spType: string | number;
                initSp: number;
                increment: number;
                levelUpCost: null;
                maxChargeTime: number;
            };
            rangeId: string | null;
            skillType: string;
            durationType: string;
            prefabId: string | null;
            duration: number;
        }>, "many">;
    }, "strict", z.ZodTypeAny, {
        hidden: boolean;
        iconId: string | null;
        levels: {
            name: string;
            description: string | null;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            spData: {
                spCost: number;
                spType: string | number;
                initSp: number;
                increment: number;
                levelUpCost: null;
                maxChargeTime: number;
            };
            rangeId: string | null;
            skillType: string;
            durationType: string;
            prefabId: string | null;
            duration: number;
        }[];
        skillId: string;
    }, {
        hidden: boolean;
        iconId: string | null;
        levels: {
            name: string;
            description: string | null;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            spData: {
                spCost: number;
                spType: string | number;
                initSp: number;
                increment: number;
                levelUpCost: null;
                maxChargeTime: number;
            };
            rangeId: string | null;
            skillType: string;
            durationType: string;
            prefabId: string | null;
            duration: number;
        }[];
        skillId: string;
    }>, "many">;
    modules: z.ZodArray<z.ZodObject<{
        info: z.ZodObject<{
            uniEquipId: z.ZodString;
            uniEquipName: z.ZodString;
            uniEquipIcon: z.ZodString;
            uniEquipDesc: z.ZodString;
            typeIcon: z.ZodString;
            typeName1: z.ZodString;
            typeName2: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            equipShiningColor: z.ZodString;
            showEvolvePhase: z.ZodString;
            unlockEvolvePhase: z.ZodString;
            charId: z.ZodString;
            tmplId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            showLevel: z.ZodNumber;
            unlockLevel: z.ZodNumber;
            unlockFavorPoint: z.ZodNumber;
            missionList: z.ZodArray<z.ZodString, "many">;
            itemCost: z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                count: z.ZodNumber;
                type: z.ZodString;
            }, "strict", z.ZodTypeAny, {
                type: string;
                id: string;
                count: number;
            }, {
                type: string;
                id: string;
                count: number;
            }>, "many">>, z.ZodNull]>;
            type: z.ZodString;
            uniEquipGetTime: z.ZodNumber;
            charEquipOrder: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            type: string;
            tmplId: string | null;
            uniEquipId: string;
            uniEquipName: string;
            uniEquipIcon: string;
            uniEquipDesc: string;
            typeIcon: string;
            typeName1: string;
            typeName2: string | null;
            equipShiningColor: string;
            showEvolvePhase: string;
            unlockEvolvePhase: string;
            charId: string;
            showLevel: number;
            unlockLevel: number;
            unlockFavorPoint: number;
            missionList: string[];
            itemCost: Record<string, {
                type: string;
                id: string;
                count: number;
            }[]> | null;
            uniEquipGetTime: number;
            charEquipOrder: number;
        }, {
            type: string;
            tmplId: string | null;
            uniEquipId: string;
            uniEquipName: string;
            uniEquipIcon: string;
            uniEquipDesc: string;
            typeIcon: string;
            typeName1: string;
            typeName2: string | null;
            equipShiningColor: string;
            showEvolvePhase: string;
            unlockEvolvePhase: string;
            charId: string;
            showLevel: number;
            unlockLevel: number;
            unlockFavorPoint: number;
            missionList: string[];
            itemCost: Record<string, {
                type: string;
                id: string;
                count: number;
            }[]> | null;
            uniEquipGetTime: number;
            charEquipOrder: number;
        }>;
        data: z.ZodUnion<[z.ZodObject<{
            phases: z.ZodArray<z.ZodObject<{
                equipLevel: z.ZodNumber;
                parts: z.ZodArray<z.ZodObject<{
                    resKey: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    target: z.ZodString;
                    isToken: z.ZodBoolean;
                    addOrOverrideTalentDataBundle: z.ZodObject<{
                        candidates: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                            displayRangeId: z.ZodBoolean;
                            upgradeDescription: z.ZodString;
                            talentIndex: z.ZodNumber;
                            unlockCondition: z.ZodObject<{
                                phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                                level: z.ZodNumber;
                            }, "strict", z.ZodTypeAny, {
                                level: number;
                                phase: string | number;
                            }, {
                                level: number;
                                phase: string | number;
                            }>;
                            requiredPotentialRank: z.ZodNumber;
                            prefabKey: z.ZodString;
                            name: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                            description: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                            rangeId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                            blackboard: z.ZodArray<z.ZodObject<{
                                key: z.ZodString;
                                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                            }, "strict", z.ZodTypeAny, {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }, {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }>, "many">;
                            tokenKey: z.ZodOptional<z.ZodString>;
                        }, "strict", z.ZodTypeAny, {
                            name: string | null;
                            description: string | null;
                            prefabKey: string;
                            blackboard: {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }[];
                            displayRangeId: boolean;
                            upgradeDescription: string;
                            talentIndex: number;
                            unlockCondition: {
                                level: number;
                                phase: string | number;
                            };
                            requiredPotentialRank: number;
                            rangeId: string | null;
                            tokenKey?: string | undefined;
                        }, {
                            name: string | null;
                            description: string | null;
                            prefabKey: string;
                            blackboard: {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }[];
                            displayRangeId: boolean;
                            upgradeDescription: string;
                            talentIndex: number;
                            unlockCondition: {
                                level: number;
                                phase: string | number;
                            };
                            requiredPotentialRank: number;
                            rangeId: string | null;
                            tokenKey?: string | undefined;
                        }>, "many">, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        candidates: {
                            name: string | null;
                            description: string | null;
                            prefabKey: string;
                            blackboard: {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }[];
                            displayRangeId: boolean;
                            upgradeDescription: string;
                            talentIndex: number;
                            unlockCondition: {
                                level: number;
                                phase: string | number;
                            };
                            requiredPotentialRank: number;
                            rangeId: string | null;
                            tokenKey?: string | undefined;
                        }[] | null;
                    }, {
                        candidates: {
                            name: string | null;
                            description: string | null;
                            prefabKey: string;
                            blackboard: {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }[];
                            displayRangeId: boolean;
                            upgradeDescription: string;
                            talentIndex: number;
                            unlockCondition: {
                                level: number;
                                phase: string | number;
                            };
                            requiredPotentialRank: number;
                            rangeId: string | null;
                            tokenKey?: string | undefined;
                        }[] | null;
                    }>;
                    overrideTraitDataBundle: z.ZodObject<{
                        candidates: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                            additionalDescription: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                            unlockCondition: z.ZodObject<{
                                phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                                level: z.ZodNumber;
                            }, "strict", z.ZodTypeAny, {
                                level: number;
                                phase: string | number;
                            }, {
                                level: number;
                                phase: string | number;
                            }>;
                            requiredPotentialRank: z.ZodNumber;
                            blackboard: z.ZodArray<z.ZodObject<{
                                key: z.ZodString;
                                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                            }, "strict", z.ZodTypeAny, {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }, {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }>, "many">;
                            overrideDescripton: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                            prefabKey: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                            rangeId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            prefabKey: string | null;
                            blackboard: {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }[];
                            unlockCondition: {
                                level: number;
                                phase: string | number;
                            };
                            requiredPotentialRank: number;
                            rangeId: string | null;
                            additionalDescription: string | null;
                            overrideDescripton: string | null;
                        }, {
                            prefabKey: string | null;
                            blackboard: {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }[];
                            unlockCondition: {
                                level: number;
                                phase: string | number;
                            };
                            requiredPotentialRank: number;
                            rangeId: string | null;
                            additionalDescription: string | null;
                            overrideDescripton: string | null;
                        }>, "many">, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        candidates: {
                            prefabKey: string | null;
                            blackboard: {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }[];
                            unlockCondition: {
                                level: number;
                                phase: string | number;
                            };
                            requiredPotentialRank: number;
                            rangeId: string | null;
                            additionalDescription: string | null;
                            overrideDescripton: string | null;
                        }[] | null;
                    }, {
                        candidates: {
                            prefabKey: string | null;
                            blackboard: {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }[];
                            unlockCondition: {
                                level: number;
                                phase: string | number;
                            };
                            requiredPotentialRank: number;
                            rangeId: string | null;
                            additionalDescription: string | null;
                            overrideDescripton: string | null;
                        }[] | null;
                    }>;
                }, "strict", z.ZodTypeAny, {
                    target: string;
                    resKey: string | null;
                    isToken: boolean;
                    addOrOverrideTalentDataBundle: {
                        candidates: {
                            name: string | null;
                            description: string | null;
                            prefabKey: string;
                            blackboard: {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }[];
                            displayRangeId: boolean;
                            upgradeDescription: string;
                            talentIndex: number;
                            unlockCondition: {
                                level: number;
                                phase: string | number;
                            };
                            requiredPotentialRank: number;
                            rangeId: string | null;
                            tokenKey?: string | undefined;
                        }[] | null;
                    };
                    overrideTraitDataBundle: {
                        candidates: {
                            prefabKey: string | null;
                            blackboard: {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }[];
                            unlockCondition: {
                                level: number;
                                phase: string | number;
                            };
                            requiredPotentialRank: number;
                            rangeId: string | null;
                            additionalDescription: string | null;
                            overrideDescripton: string | null;
                        }[] | null;
                    };
                }, {
                    target: string;
                    resKey: string | null;
                    isToken: boolean;
                    addOrOverrideTalentDataBundle: {
                        candidates: {
                            name: string | null;
                            description: string | null;
                            prefabKey: string;
                            blackboard: {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }[];
                            displayRangeId: boolean;
                            upgradeDescription: string;
                            talentIndex: number;
                            unlockCondition: {
                                level: number;
                                phase: string | number;
                            };
                            requiredPotentialRank: number;
                            rangeId: string | null;
                            tokenKey?: string | undefined;
                        }[] | null;
                    };
                    overrideTraitDataBundle: {
                        candidates: {
                            prefabKey: string | null;
                            blackboard: {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }[];
                            unlockCondition: {
                                level: number;
                                phase: string | number;
                            };
                            requiredPotentialRank: number;
                            rangeId: string | null;
                            additionalDescription: string | null;
                            overrideDescripton: string | null;
                        }[] | null;
                    };
                }>, "many">;
                attributeBlackboard: z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">;
                tokenAttributeBlackboard: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">>;
            }, "strict", z.ZodTypeAny, {
                equipLevel: number;
                parts: {
                    target: string;
                    resKey: string | null;
                    isToken: boolean;
                    addOrOverrideTalentDataBundle: {
                        candidates: {
                            name: string | null;
                            description: string | null;
                            prefabKey: string;
                            blackboard: {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }[];
                            displayRangeId: boolean;
                            upgradeDescription: string;
                            talentIndex: number;
                            unlockCondition: {
                                level: number;
                                phase: string | number;
                            };
                            requiredPotentialRank: number;
                            rangeId: string | null;
                            tokenKey?: string | undefined;
                        }[] | null;
                    };
                    overrideTraitDataBundle: {
                        candidates: {
                            prefabKey: string | null;
                            blackboard: {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }[];
                            unlockCondition: {
                                level: number;
                                phase: string | number;
                            };
                            requiredPotentialRank: number;
                            rangeId: string | null;
                            additionalDescription: string | null;
                            overrideDescripton: string | null;
                        }[] | null;
                    };
                }[];
                attributeBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                tokenAttributeBlackboard: Record<string, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[]>;
            }, {
                equipLevel: number;
                parts: {
                    target: string;
                    resKey: string | null;
                    isToken: boolean;
                    addOrOverrideTalentDataBundle: {
                        candidates: {
                            name: string | null;
                            description: string | null;
                            prefabKey: string;
                            blackboard: {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }[];
                            displayRangeId: boolean;
                            upgradeDescription: string;
                            talentIndex: number;
                            unlockCondition: {
                                level: number;
                                phase: string | number;
                            };
                            requiredPotentialRank: number;
                            rangeId: string | null;
                            tokenKey?: string | undefined;
                        }[] | null;
                    };
                    overrideTraitDataBundle: {
                        candidates: {
                            prefabKey: string | null;
                            blackboard: {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }[];
                            unlockCondition: {
                                level: number;
                                phase: string | number;
                            };
                            requiredPotentialRank: number;
                            rangeId: string | null;
                            additionalDescription: string | null;
                            overrideDescripton: string | null;
                        }[] | null;
                    };
                }[];
                attributeBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                tokenAttributeBlackboard: Record<string, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[]>;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            phases: {
                equipLevel: number;
                parts: {
                    target: string;
                    resKey: string | null;
                    isToken: boolean;
                    addOrOverrideTalentDataBundle: {
                        candidates: {
                            name: string | null;
                            description: string | null;
                            prefabKey: string;
                            blackboard: {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }[];
                            displayRangeId: boolean;
                            upgradeDescription: string;
                            talentIndex: number;
                            unlockCondition: {
                                level: number;
                                phase: string | number;
                            };
                            requiredPotentialRank: number;
                            rangeId: string | null;
                            tokenKey?: string | undefined;
                        }[] | null;
                    };
                    overrideTraitDataBundle: {
                        candidates: {
                            prefabKey: string | null;
                            blackboard: {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }[];
                            unlockCondition: {
                                level: number;
                                phase: string | number;
                            };
                            requiredPotentialRank: number;
                            rangeId: string | null;
                            additionalDescription: string | null;
                            overrideDescripton: string | null;
                        }[] | null;
                    };
                }[];
                attributeBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                tokenAttributeBlackboard: Record<string, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[]>;
            }[];
        }, {
            phases: {
                equipLevel: number;
                parts: {
                    target: string;
                    resKey: string | null;
                    isToken: boolean;
                    addOrOverrideTalentDataBundle: {
                        candidates: {
                            name: string | null;
                            description: string | null;
                            prefabKey: string;
                            blackboard: {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }[];
                            displayRangeId: boolean;
                            upgradeDescription: string;
                            talentIndex: number;
                            unlockCondition: {
                                level: number;
                                phase: string | number;
                            };
                            requiredPotentialRank: number;
                            rangeId: string | null;
                            tokenKey?: string | undefined;
                        }[] | null;
                    };
                    overrideTraitDataBundle: {
                        candidates: {
                            prefabKey: string | null;
                            blackboard: {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }[];
                            unlockCondition: {
                                level: number;
                                phase: string | number;
                            };
                            requiredPotentialRank: number;
                            rangeId: string | null;
                            additionalDescription: string | null;
                            overrideDescripton: string | null;
                        }[] | null;
                    };
                }[];
                attributeBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                tokenAttributeBlackboard: Record<string, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[]>;
            }[];
        }>, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        data: {
            phases: {
                equipLevel: number;
                parts: {
                    target: string;
                    resKey: string | null;
                    isToken: boolean;
                    addOrOverrideTalentDataBundle: {
                        candidates: {
                            name: string | null;
                            description: string | null;
                            prefabKey: string;
                            blackboard: {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }[];
                            displayRangeId: boolean;
                            upgradeDescription: string;
                            talentIndex: number;
                            unlockCondition: {
                                level: number;
                                phase: string | number;
                            };
                            requiredPotentialRank: number;
                            rangeId: string | null;
                            tokenKey?: string | undefined;
                        }[] | null;
                    };
                    overrideTraitDataBundle: {
                        candidates: {
                            prefabKey: string | null;
                            blackboard: {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }[];
                            unlockCondition: {
                                level: number;
                                phase: string | number;
                            };
                            requiredPotentialRank: number;
                            rangeId: string | null;
                            additionalDescription: string | null;
                            overrideDescripton: string | null;
                        }[] | null;
                    };
                }[];
                attributeBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                tokenAttributeBlackboard: Record<string, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[]>;
            }[];
        } | null;
        info: {
            type: string;
            tmplId: string | null;
            uniEquipId: string;
            uniEquipName: string;
            uniEquipIcon: string;
            uniEquipDesc: string;
            typeIcon: string;
            typeName1: string;
            typeName2: string | null;
            equipShiningColor: string;
            showEvolvePhase: string;
            unlockEvolvePhase: string;
            charId: string;
            showLevel: number;
            unlockLevel: number;
            unlockFavorPoint: number;
            missionList: string[];
            itemCost: Record<string, {
                type: string;
                id: string;
                count: number;
            }[]> | null;
            uniEquipGetTime: number;
            charEquipOrder: number;
        };
    }, {
        data: {
            phases: {
                equipLevel: number;
                parts: {
                    target: string;
                    resKey: string | null;
                    isToken: boolean;
                    addOrOverrideTalentDataBundle: {
                        candidates: {
                            name: string | null;
                            description: string | null;
                            prefabKey: string;
                            blackboard: {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }[];
                            displayRangeId: boolean;
                            upgradeDescription: string;
                            talentIndex: number;
                            unlockCondition: {
                                level: number;
                                phase: string | number;
                            };
                            requiredPotentialRank: number;
                            rangeId: string | null;
                            tokenKey?: string | undefined;
                        }[] | null;
                    };
                    overrideTraitDataBundle: {
                        candidates: {
                            prefabKey: string | null;
                            blackboard: {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }[];
                            unlockCondition: {
                                level: number;
                                phase: string | number;
                            };
                            requiredPotentialRank: number;
                            rangeId: string | null;
                            additionalDescription: string | null;
                            overrideDescripton: string | null;
                        }[] | null;
                    };
                }[];
                attributeBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                tokenAttributeBlackboard: Record<string, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[]>;
            }[];
        } | null;
        info: {
            type: string;
            tmplId: string | null;
            uniEquipId: string;
            uniEquipName: string;
            uniEquipIcon: string;
            uniEquipDesc: string;
            typeIcon: string;
            typeName1: string;
            typeName2: string | null;
            equipShiningColor: string;
            showEvolvePhase: string;
            unlockEvolvePhase: string;
            charId: string;
            showLevel: number;
            unlockLevel: number;
            unlockFavorPoint: number;
            missionList: string[];
            itemCost: Record<string, {
                type: string;
                id: string;
                count: number;
            }[]> | null;
            uniEquipGetTime: number;
            charEquipOrder: number;
        };
    }>, "many">;
    skins: z.ZodArray<z.ZodObject<{
        skinId: z.ZodString;
        charId: z.ZodString;
        tokenSkinMap: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            tokenId: z.ZodString;
            tokenSkinId: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            tokenId: string;
            tokenSkinId: string;
        }, {
            tokenId: string;
            tokenSkinId: string;
        }>, "many">, z.ZodNull]>;
        illustId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        dynIllustId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        avatarId: z.ZodString;
        portraitId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        dynPortraitId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        dynEntranceId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        buildingId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        battleSkin: z.ZodObject<{
            overwritePrefab: z.ZodBoolean;
            skinOrPrefabId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            overwritePrefab: boolean;
            skinOrPrefabId: string | null;
        }, {
            overwritePrefab: boolean;
            skinOrPrefabId: string | null;
        }>;
        isBuySkin: z.ZodBoolean;
        tmplId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        voiceId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        voiceType: z.ZodString;
        displaySkin: z.ZodObject<{
            skinName: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            colorList: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
            titleList: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
            modelName: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            drawerList: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
            designerList: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
            skinGroupId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            skinGroupName: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            skinGroupSortIndex: z.ZodNumber;
            content: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            dialog: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            usage: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            description: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            obtainApproach: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            sortId: z.ZodNumber;
            displayTagId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            getTime: z.ZodNumber;
            onYear: z.ZodNumber;
            onPeriod: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            content: string | null;
            dialog: string | null;
            description: string | null;
            sortId: number;
            usage: string | null;
            obtainApproach: string | null;
            skinName: string | null;
            colorList: string[] | null;
            titleList: string[] | null;
            modelName: string | null;
            drawerList: string[] | null;
            designerList: string[] | null;
            skinGroupId: string | null;
            skinGroupName: string | null;
            skinGroupSortIndex: number;
            displayTagId: string | null;
            getTime: number;
            onYear: number;
            onPeriod: number;
        }, {
            content: string | null;
            dialog: string | null;
            description: string | null;
            sortId: number;
            usage: string | null;
            obtainApproach: string | null;
            skinName: string | null;
            colorList: string[] | null;
            titleList: string[] | null;
            modelName: string | null;
            drawerList: string[] | null;
            designerList: string[] | null;
            skinGroupId: string | null;
            skinGroupName: string | null;
            skinGroupSortIndex: number;
            displayTagId: string | null;
            getTime: number;
            onYear: number;
            onPeriod: number;
        }>;
    }, "strict", z.ZodTypeAny, {
        skinId: string;
        tmplId: string | null;
        charId: string;
        tokenSkinMap: {
            tokenId: string;
            tokenSkinId: string;
        }[] | null;
        illustId: string | null;
        dynIllustId: string | null;
        avatarId: string;
        portraitId: string | null;
        dynPortraitId: string | null;
        dynEntranceId: string | null;
        buildingId: string | null;
        battleSkin: {
            overwritePrefab: boolean;
            skinOrPrefabId: string | null;
        };
        isBuySkin: boolean;
        voiceId: string | null;
        voiceType: string;
        displaySkin: {
            content: string | null;
            dialog: string | null;
            description: string | null;
            sortId: number;
            usage: string | null;
            obtainApproach: string | null;
            skinName: string | null;
            colorList: string[] | null;
            titleList: string[] | null;
            modelName: string | null;
            drawerList: string[] | null;
            designerList: string[] | null;
            skinGroupId: string | null;
            skinGroupName: string | null;
            skinGroupSortIndex: number;
            displayTagId: string | null;
            getTime: number;
            onYear: number;
            onPeriod: number;
        };
    }, {
        skinId: string;
        tmplId: string | null;
        charId: string;
        tokenSkinMap: {
            tokenId: string;
            tokenSkinId: string;
        }[] | null;
        illustId: string | null;
        dynIllustId: string | null;
        avatarId: string;
        portraitId: string | null;
        dynPortraitId: string | null;
        dynEntranceId: string | null;
        buildingId: string | null;
        battleSkin: {
            overwritePrefab: boolean;
            skinOrPrefabId: string | null;
        };
        isBuySkin: boolean;
        voiceId: string | null;
        voiceType: string;
        displaySkin: {
            content: string | null;
            dialog: string | null;
            description: string | null;
            sortId: number;
            usage: string | null;
            obtainApproach: string | null;
            skinName: string | null;
            colorList: string[] | null;
            titleList: string[] | null;
            modelName: string | null;
            drawerList: string[] | null;
            designerList: string[] | null;
            skinGroupId: string | null;
            skinGroupName: string | null;
            skinGroupSortIndex: number;
            displayTagId: string | null;
            getTime: number;
            onYear: number;
            onPeriod: number;
        };
    }>, "many">;
    bases: z.ZodArray<z.ZodObject<{
        condition: z.ZodObject<{
            buffId: z.ZodString;
            cond: z.ZodObject<{
                phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                level: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                level: number;
                phase: string | number;
            }, {
                level: number;
                phase: string | number;
            }>;
        }, "strict", z.ZodTypeAny, {
            buffId: string;
            cond: {
                level: number;
                phase: string | number;
            };
        }, {
            buffId: string;
            cond: {
                level: number;
                phase: string | number;
            };
        }>;
        skill: z.ZodObject<{
            buffId: z.ZodString;
            buffName: z.ZodString;
            buffIcon: z.ZodString;
            skillIcon: z.ZodString;
            sortId: z.ZodNumber;
            buffColor: z.ZodString;
            textColor: z.ZodString;
            buffCategory: z.ZodString;
            roomType: z.ZodString;
            description: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            description: string;
            sortId: number;
            buffId: string;
            buffName: string;
            buffIcon: string;
            skillIcon: string;
            buffColor: string;
            textColor: string;
            buffCategory: string;
            roomType: string;
        }, {
            description: string;
            sortId: number;
            buffId: string;
            buffName: string;
            buffIcon: string;
            skillIcon: string;
            buffColor: string;
            textColor: string;
            buffCategory: string;
            roomType: string;
        }>;
    }, "strict", z.ZodTypeAny, {
        condition: {
            buffId: string;
            cond: {
                level: number;
                phase: string | number;
            };
        };
        skill: {
            description: string;
            sortId: number;
            buffId: string;
            buffName: string;
            buffIcon: string;
            skillIcon: string;
            buffColor: string;
            textColor: string;
            buffCategory: string;
            roomType: string;
        };
    }, {
        condition: {
            buffId: string;
            cond: {
                level: number;
                phase: string | number;
            };
        };
        skill: {
            description: string;
            sortId: number;
            buffId: string;
            buffName: string;
            buffIcon: string;
            skillIcon: string;
            buffColor: string;
            textColor: string;
            buffCategory: string;
            roomType: string;
        };
    }>, "many">;
    paradox: z.ZodUnion<[z.ZodObject<{
        excel: z.ZodObject<{
            charId: z.ZodString;
            stageId: z.ZodString;
            levelId: z.ZodString;
            zoneId: z.ZodString;
            code: z.ZodString;
            name: z.ZodString;
            loadingPicId: z.ZodString;
            description: z.ZodString;
            unlockParam: z.ZodArray<z.ZodObject<{
                unlockType: z.ZodString;
                unlockParam1: z.ZodString;
                unlockParam2: z.ZodString;
                unlockParam3: z.ZodNull;
            }, "strict", z.ZodTypeAny, {
                unlockType: string;
                unlockParam1: string;
                unlockParam2: string;
                unlockParam3: null;
            }, {
                unlockType: string;
                unlockParam1: string;
                unlockParam2: string;
                unlockParam3: null;
            }>, "many">;
            rewardItem: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                count: z.ZodNumber;
                type: z.ZodString;
            }, "strict", z.ZodTypeAny, {
                type: string;
                id: string;
                count: number;
            }, {
                type: string;
                id: string;
                count: number;
            }>, "many">;
            stageNameForShow: z.ZodString;
            zoneNameForShow: z.ZodString;
            picId: z.ZodString;
            stageGetTime: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            code: string;
            name: string;
            description: string;
            stageId: string;
            levelId: string;
            loadingPicId: string;
            charId: string;
            zoneId: string;
            unlockParam: {
                unlockType: string;
                unlockParam1: string;
                unlockParam2: string;
                unlockParam3: null;
            }[];
            rewardItem: {
                type: string;
                id: string;
                count: number;
            }[];
            stageNameForShow: string;
            zoneNameForShow: string;
            picId: string;
            stageGetTime: number;
        }, {
            code: string;
            name: string;
            description: string;
            stageId: string;
            levelId: string;
            loadingPicId: string;
            charId: string;
            zoneId: string;
            unlockParam: {
                unlockType: string;
                unlockParam1: string;
                unlockParam2: string;
                unlockParam3: null;
            }[];
            rewardItem: {
                type: string;
                id: string;
                count: number;
            }[];
            stageNameForShow: string;
            zoneNameForShow: string;
            picId: string;
            stageGetTime: number;
        }>;
        levels: z.ZodObject<{
            options: z.ZodObject<{
                characterLimit: z.ZodNumber;
                maxLifePoint: z.ZodNumber;
                initialCost: z.ZodNumber;
                maxCost: z.ZodNumber;
                costIncreaseTime: z.ZodNumber;
                moveMultiplier: z.ZodNumber;
                steeringEnabled: z.ZodBoolean;
                isTrainingLevel: z.ZodBoolean;
                isHardTrainingLevel: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                isPredefinedCardsSelectable: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                maxPlayTime: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                functionDisableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                configBlackBoard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }, {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            }>;
            levelId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            mapId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            bgmEvent: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            environmentSe: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            mapData: z.ZodObject<{
                map: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
                tiles: z.ZodArray<z.ZodObject<{
                    tileKey: z.ZodString;
                    heightType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    buildableType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    passableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    playerSideMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                    blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }>, "many">, z.ZodNull]>;
                    effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        offset: z.ZodObject<{
                            x: z.ZodNumber;
                            y: z.ZodNumber;
                            z: z.ZodNumber;
                        }, "strict", z.ZodTypeAny, {
                            x: number;
                            y: number;
                            z: number;
                        }, {
                            x: number;
                            y: number;
                            z: number;
                        }>;
                        direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    }, "strict", z.ZodTypeAny, {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }, {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }>, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }, {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }>, "many">;
                blockEdges: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodNull]>;
                tags: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
                effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    offset: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                        z: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        x: number;
                        y: number;
                        z: number;
                    }, {
                        x: number;
                        y: number;
                        z: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                }, "strict", z.ZodTypeAny, {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }, {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }>, "many">, z.ZodNull]>;
                layerRects: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                width: z.ZodOptional<z.ZodNumber>;
                height: z.ZodOptional<z.ZodNumber>;
            }, "strict", z.ZodTypeAny, {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            }, {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            }>;
            tilesDisallowToLocate: z.ZodArray<z.ZodAny, "many">;
            runes: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                difficultyMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                key: z.ZodString;
                professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                buildableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                blackboard: z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">;
            }, "strict", z.ZodTypeAny, {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }, {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }>, "many">, z.ZodNull]>;
            globalBuffs: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                prefabKey: z.ZodString;
                blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">, z.ZodNull]>;
                overrideCameraEffect: z.ZodNull;
                passProfessionMaskFlag: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                useExtraData: z.ZodOptional<z.ZodBoolean>;
            }, "strict", z.ZodTypeAny, {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }, {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }>, "many">, z.ZodNull]>;
            routes: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                motionMode: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                startPosition: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    col: number;
                    row: number;
                }, {
                    col: number;
                    row: number;
                }>;
                endPosition: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    col: number;
                    row: number;
                }, {
                    col: number;
                    row: number;
                }>;
                spawnRandomRange: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x: number;
                    y: number;
                }, {
                    x: number;
                    y: number;
                }>;
                spawnOffset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x: number;
                    y: number;
                }, {
                    x: number;
                    y: number;
                }>;
                checkpoints: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    time: z.ZodNumber;
                    position: z.ZodObject<{
                        row: z.ZodNumber;
                        col: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        col: number;
                        row: number;
                    }, {
                        col: number;
                        row: number;
                    }>;
                    reachOffset: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        x: number;
                        y: number;
                    }, {
                        x: number;
                        y: number;
                    }>;
                    randomizeReachOffset: z.ZodBoolean;
                    reachDistance: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }, {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }>, "many">, z.ZodNull]>;
                allowDiagonalMove: z.ZodBoolean;
                visitEveryTileCenter: z.ZodBoolean;
                visitEveryNodeCenter: z.ZodBoolean;
                visitEveryCheckPoint: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            }, {
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            }>, z.ZodNull]>, "many">;
            extraRoutes: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodUndefined]>;
            enemies: z.ZodArray<z.ZodAny, "many">;
            enemyDbRefs: z.ZodArray<z.ZodObject<{
                useDb: z.ZodBoolean;
                id: z.ZodString;
                level: z.ZodNumber;
                overwrittenData: z.ZodUnion<[z.ZodObject<{
                    name: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: string | null;
                    }, {
                        m_defined: boolean;
                        m_value: string | null;
                    }>;
                    description: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: string | null;
                    }, {
                        m_defined: boolean;
                        m_value: string | null;
                    }>;
                    prefabKey: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: string | null;
                    }, {
                        m_defined: boolean;
                        m_value: string | null;
                    }>;
                    attributes: z.ZodObject<{
                        maxHp: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        atk: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        def: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        magicResistance: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        cost: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        blockCnt: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        moveSpeed: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        attackSpeed: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        baseAttackTime: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        respawnTime: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        hpRecoveryPerSec: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        spRecoveryPerSec: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        maxDeployCount: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        massLevel: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        baseForceLevel: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>;
                        tauntLevel: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>, z.ZodUndefined]>;
                        epDamageResistance: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>, z.ZodUndefined]>;
                        epResistance: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: number | null;
                        }, {
                            m_defined: boolean;
                            m_value: number | null;
                        }>, z.ZodUndefined]>;
                        stunImmune: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: boolean;
                        }, {
                            m_defined: boolean;
                            m_value: boolean;
                        }>;
                        silenceImmune: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: boolean;
                        }, {
                            m_defined: boolean;
                            m_value: boolean;
                        }>;
                        sleepImmune: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: boolean;
                        }, {
                            m_defined: boolean;
                            m_value: boolean;
                        }>, z.ZodUndefined]>;
                        frozenImmune: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: boolean;
                        }, {
                            m_defined: boolean;
                            m_value: boolean;
                        }>, z.ZodUndefined]>;
                        levitateImmune: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined: boolean;
                            m_value: boolean;
                        }, {
                            m_defined: boolean;
                            m_value: boolean;
                        }>, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    }, {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    }>;
                    applyWay: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: string | null;
                    }, {
                        m_defined: boolean;
                        m_value: string | null;
                    }>, z.ZodUndefined]>;
                    motion: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: string | null;
                    }, {
                        m_defined: boolean;
                        m_value: string | null;
                    }>, z.ZodUndefined]>;
                    enemyTags: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: string[] | null;
                    }, {
                        m_defined: boolean;
                        m_value: string[] | null;
                    }>, z.ZodUndefined]>;
                    lifePointReduce: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    levelType: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: string | null;
                    }, {
                        m_defined: boolean;
                        m_value: string | null;
                    }>, z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    rangeRadius: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>;
                    numOfExtraDrops: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    viewRadius: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: number | null;
                    }, {
                        m_defined: boolean;
                        m_value: number | null;
                    }>, z.ZodUndefined]>;
                    notCountInTotal: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined: boolean;
                        m_value: boolean;
                    }, {
                        m_defined: boolean;
                        m_value: boolean;
                    }>, z.ZodUndefined]>;
                    talentBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }>, "many">, z.ZodNull]>;
                    skills: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        prefabKey: z.ZodString;
                        priority: z.ZodNumber;
                        cooldown: z.ZodNumber;
                        initCooldown: z.ZodNumber;
                        spCost: z.ZodNumber;
                        blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                            key: z.ZodString;
                            value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                            valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        }, "strict", z.ZodTypeAny, {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }, {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }>, "many">, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }, {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }>, "many">, z.ZodNull]>;
                    spData: z.ZodUnion<[z.ZodObject<{
                        spType: z.ZodString;
                        maxSp: z.ZodNumber;
                        initSp: z.ZodNumber;
                        increment: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    }, {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    }>, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                }, {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                }>, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }, {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }>, "many">;
            waves: z.ZodArray<z.ZodObject<{
                preDelay: z.ZodNumber;
                postDelay: z.ZodNumber;
                maxTimeWaitingForNextWave: z.ZodNumber;
                fragments: z.ZodArray<z.ZodObject<{
                    preDelay: z.ZodNumber;
                    actions: z.ZodArray<z.ZodObject<{
                        actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        managedByScheduler: z.ZodBoolean;
                        key: z.ZodString;
                        count: z.ZodNumber;
                        preDelay: z.ZodNumber;
                        interval: z.ZodNumber;
                        routeIndex: z.ZodNumber;
                        blockFragment: z.ZodBoolean;
                        autoPreviewRoute: z.ZodBoolean;
                        autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                        hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                        weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                        dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }, {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }>, "many">;
                    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                }, "strict", z.ZodTypeAny, {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }, {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }>, "many">;
                advancedWaveTag: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strict", z.ZodTypeAny, {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }, {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }>, "many">;
            branches: z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodObject<{
                phases: z.ZodArray<z.ZodObject<{
                    preDelay: z.ZodNumber;
                    actions: z.ZodArray<z.ZodObject<{
                        actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        managedByScheduler: z.ZodBoolean;
                        key: z.ZodString;
                        count: z.ZodNumber;
                        preDelay: z.ZodNumber;
                        interval: z.ZodNumber;
                        routeIndex: z.ZodNumber;
                        blockFragment: z.ZodBoolean;
                        autoPreviewRoute: z.ZodBoolean;
                        autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                        hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                        weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                        dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }, {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }>, "many">;
                    m_randomActionGroups: z.ZodOptional<z.ZodNull>;
                    m_actionWithRandomSpawn: z.ZodOptional<z.ZodNull>;
                    m_validActionPackKeys: z.ZodOptional<z.ZodNull>;
                }, "strict", z.ZodTypeAny, {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }, {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }>, "many">;
            }, "strict", z.ZodTypeAny, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }>>, z.ZodNull]>;
            predefines: z.ZodUnion<[z.ZodObject<{
                characterInsts: z.ZodArray<z.ZodAny, "many">;
                tokenInsts: z.ZodArray<z.ZodObject<{
                    position: z.ZodObject<{
                        row: z.ZodNumber;
                        col: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        col: number;
                        row: number;
                    }, {
                        col: number;
                        row: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    hidden: z.ZodBoolean;
                    alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        level: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        level: number;
                    }, {
                        key: string;
                        level: number;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                    inst: z.ZodObject<{
                        characterKey: z.ZodString;
                        level: z.ZodNumber;
                        phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        favorPoint: z.ZodNumber;
                        potentialRank: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    }, {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    }>;
                    skillIndex: z.ZodNumber;
                    mainSkillLvl: z.ZodNumber;
                    skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }, {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }>, "many">;
                characterCards: z.ZodArray<z.ZodAny, "many">;
                tokenCards: z.ZodArray<z.ZodAny, "many">;
            }, "strict", z.ZodTypeAny, {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            }, {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            }>, z.ZodNull]>;
            hardPredefines: z.ZodUnion<[z.ZodObject<{
                characterInsts: z.ZodArray<z.ZodAny, "many">;
                tokenInsts: z.ZodArray<z.ZodObject<{
                    position: z.ZodObject<{
                        row: z.ZodNumber;
                        col: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        col: number;
                        row: number;
                    }, {
                        col: number;
                        row: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    hidden: z.ZodBoolean;
                    alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        level: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        level: number;
                    }, {
                        key: string;
                        level: number;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                    inst: z.ZodObject<{
                        characterKey: z.ZodString;
                        level: z.ZodNumber;
                        phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        favorPoint: z.ZodNumber;
                        potentialRank: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    }, {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    }>;
                    skillIndex: z.ZodNumber;
                    mainSkillLvl: z.ZodNumber;
                    skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }, {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }, {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }>, "many">;
                characterCards: z.ZodArray<z.ZodAny, "many">;
                tokenCards: z.ZodArray<z.ZodAny, "many">;
            }, "strict", z.ZodTypeAny, {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            }, {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            }>, z.ZodNull, z.ZodUndefined]>;
            excludeCharIdList: z.ZodNull;
            randomSeed: z.ZodNumber;
            operaConfig: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            runtimeData: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            options: {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            };
            levelId: string | null;
            mapId: string | null;
            bgmEvent: string | null;
            environmentSe: string | null;
            mapData: {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            };
            tilesDisallowToLocate: any[];
            runes: {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }[] | null;
            globalBuffs: {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }[] | null;
            routes: ({
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            } | null)[];
            enemies: any[];
            enemyDbRefs: {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }[];
            waves: {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }[];
            branches: Record<string, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }> | null;
            predefines: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null;
            excludeCharIdList: null;
            randomSeed: number;
            extraRoutes?: any[] | undefined;
            hardPredefines?: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null | undefined;
            operaConfig?: string | null | undefined;
            runtimeData?: null | undefined;
        }, {
            options: {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            };
            levelId: string | null;
            mapId: string | null;
            bgmEvent: string | null;
            environmentSe: string | null;
            mapData: {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            };
            tilesDisallowToLocate: any[];
            runes: {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }[] | null;
            globalBuffs: {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }[] | null;
            routes: ({
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            } | null)[];
            enemies: any[];
            enemyDbRefs: {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }[];
            waves: {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }[];
            branches: Record<string, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }> | null;
            predefines: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null;
            excludeCharIdList: null;
            randomSeed: number;
            extraRoutes?: any[] | undefined;
            hardPredefines?: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null | undefined;
            operaConfig?: string | null | undefined;
            runtimeData?: null | undefined;
        }>;
    }, "strict", z.ZodTypeAny, {
        excel: {
            code: string;
            name: string;
            description: string;
            stageId: string;
            levelId: string;
            loadingPicId: string;
            charId: string;
            zoneId: string;
            unlockParam: {
                unlockType: string;
                unlockParam1: string;
                unlockParam2: string;
                unlockParam3: null;
            }[];
            rewardItem: {
                type: string;
                id: string;
                count: number;
            }[];
            stageNameForShow: string;
            zoneNameForShow: string;
            picId: string;
            stageGetTime: number;
        };
        levels: {
            options: {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            };
            levelId: string | null;
            mapId: string | null;
            bgmEvent: string | null;
            environmentSe: string | null;
            mapData: {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            };
            tilesDisallowToLocate: any[];
            runes: {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }[] | null;
            globalBuffs: {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }[] | null;
            routes: ({
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            } | null)[];
            enemies: any[];
            enemyDbRefs: {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }[];
            waves: {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }[];
            branches: Record<string, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }> | null;
            predefines: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null;
            excludeCharIdList: null;
            randomSeed: number;
            extraRoutes?: any[] | undefined;
            hardPredefines?: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null | undefined;
            operaConfig?: string | null | undefined;
            runtimeData?: null | undefined;
        };
    }, {
        excel: {
            code: string;
            name: string;
            description: string;
            stageId: string;
            levelId: string;
            loadingPicId: string;
            charId: string;
            zoneId: string;
            unlockParam: {
                unlockType: string;
                unlockParam1: string;
                unlockParam2: string;
                unlockParam3: null;
            }[];
            rewardItem: {
                type: string;
                id: string;
                count: number;
            }[];
            stageNameForShow: string;
            zoneNameForShow: string;
            picId: string;
            stageGetTime: number;
        };
        levels: {
            options: {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            };
            levelId: string | null;
            mapId: string | null;
            bgmEvent: string | null;
            environmentSe: string | null;
            mapData: {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            };
            tilesDisallowToLocate: any[];
            runes: {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }[] | null;
            globalBuffs: {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }[] | null;
            routes: ({
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            } | null)[];
            enemies: any[];
            enemyDbRefs: {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }[];
            waves: {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }[];
            branches: Record<string, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }> | null;
            predefines: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null;
            excludeCharIdList: null;
            randomSeed: number;
            extraRoutes?: any[] | undefined;
            hardPredefines?: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null | undefined;
            operaConfig?: string | null | undefined;
            runtimeData?: null | undefined;
        };
    }>, z.ZodNull]>;
    data: z.ZodObject<{
        name: z.ZodString;
        description: z.ZodString;
        canUseGeneralPotentialItem: z.ZodBoolean;
        canUseActivityPotentialItem: z.ZodBoolean;
        potentialItemId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        activityPotentialItemId: z.ZodNullable<z.ZodString>;
        classicPotentialItemId: z.ZodNullable<z.ZodString>;
        nationId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        groupId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        teamId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        displayNumber: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        appellation: z.ZodString;
        position: z.ZodString;
        tagList: z.ZodArray<z.ZodString, "many">;
        itemUsage: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        itemDesc: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        itemObtainApproach: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        isNotObtainable: z.ZodBoolean;
        isSpChar: z.ZodBoolean;
        maxPotentialLevel: z.ZodNumber;
        rarity: z.ZodString;
        profession: z.ZodString;
        subProfessionId: z.ZodString;
        trait: z.ZodUnion<[z.ZodObject<{
            candidates: z.ZodArray<z.ZodObject<{
                unlockCondition: z.ZodObject<{
                    phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    level: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    level: number;
                    phase: string | number;
                }, {
                    level: number;
                    phase: string | number;
                }>;
                requiredPotentialRank: z.ZodNumber;
                blackboard: z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">;
                overrideDescripton: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                prefabKey: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                rangeId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                prefabKey: string | null;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                unlockCondition: {
                    level: number;
                    phase: string | number;
                };
                requiredPotentialRank: number;
                rangeId: string | null;
                overrideDescripton: string | null;
            }, {
                prefabKey: string | null;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                unlockCondition: {
                    level: number;
                    phase: string | number;
                };
                requiredPotentialRank: number;
                rangeId: string | null;
                overrideDescripton: string | null;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            candidates: {
                prefabKey: string | null;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                unlockCondition: {
                    level: number;
                    phase: string | number;
                };
                requiredPotentialRank: number;
                rangeId: string | null;
                overrideDescripton: string | null;
            }[];
        }, {
            candidates: {
                prefabKey: string | null;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                unlockCondition: {
                    level: number;
                    phase: string | number;
                };
                requiredPotentialRank: number;
                rangeId: string | null;
                overrideDescripton: string | null;
            }[];
        }>, z.ZodNull]>;
        phases: z.ZodArray<z.ZodObject<{
            characterPrefabKey: z.ZodString;
            rangeId: z.ZodString;
            maxLevel: z.ZodNumber;
            attributesKeyFrames: z.ZodArray<z.ZodObject<{
                level: z.ZodNumber;
                data: z.ZodObject<{
                    maxHp: z.ZodNumber;
                    atk: z.ZodNumber;
                    def: z.ZodNumber;
                    magicResistance: z.ZodNumber;
                    cost: z.ZodNumber;
                    blockCnt: z.ZodNumber;
                    moveSpeed: z.ZodNumber;
                    attackSpeed: z.ZodNumber;
                    baseAttackTime: z.ZodNumber;
                    respawnTime: z.ZodNumber;
                    hpRecoveryPerSec: z.ZodNumber;
                    spRecoveryPerSec: z.ZodNumber;
                    maxDeployCount: z.ZodNumber;
                    maxDeckStackCnt: z.ZodNumber;
                    tauntLevel: z.ZodNumber;
                    massLevel: z.ZodNumber;
                    baseForceLevel: z.ZodNumber;
                    stunImmune: z.ZodBoolean;
                    silenceImmune: z.ZodBoolean;
                    sleepImmune: z.ZodBoolean;
                    frozenImmune: z.ZodBoolean;
                    levitateImmune: z.ZodBoolean;
                }, "strict", z.ZodTypeAny, {
                    maxHp: number;
                    atk: number;
                    def: number;
                    magicResistance: number;
                    cost: number;
                    blockCnt: number;
                    moveSpeed: number;
                    attackSpeed: number;
                    baseAttackTime: number;
                    respawnTime: number;
                    hpRecoveryPerSec: number;
                    spRecoveryPerSec: number;
                    maxDeployCount: number;
                    maxDeckStackCnt: number;
                    tauntLevel: number;
                    massLevel: number;
                    baseForceLevel: number;
                    stunImmune: boolean;
                    silenceImmune: boolean;
                    sleepImmune: boolean;
                    frozenImmune: boolean;
                    levitateImmune: boolean;
                }, {
                    maxHp: number;
                    atk: number;
                    def: number;
                    magicResistance: number;
                    cost: number;
                    blockCnt: number;
                    moveSpeed: number;
                    attackSpeed: number;
                    baseAttackTime: number;
                    respawnTime: number;
                    hpRecoveryPerSec: number;
                    spRecoveryPerSec: number;
                    maxDeployCount: number;
                    maxDeckStackCnt: number;
                    tauntLevel: number;
                    massLevel: number;
                    baseForceLevel: number;
                    stunImmune: boolean;
                    silenceImmune: boolean;
                    sleepImmune: boolean;
                    frozenImmune: boolean;
                    levitateImmune: boolean;
                }>;
            }, "strict", z.ZodTypeAny, {
                data: {
                    maxHp: number;
                    atk: number;
                    def: number;
                    magicResistance: number;
                    cost: number;
                    blockCnt: number;
                    moveSpeed: number;
                    attackSpeed: number;
                    baseAttackTime: number;
                    respawnTime: number;
                    hpRecoveryPerSec: number;
                    spRecoveryPerSec: number;
                    maxDeployCount: number;
                    maxDeckStackCnt: number;
                    tauntLevel: number;
                    massLevel: number;
                    baseForceLevel: number;
                    stunImmune: boolean;
                    silenceImmune: boolean;
                    sleepImmune: boolean;
                    frozenImmune: boolean;
                    levitateImmune: boolean;
                };
                level: number;
            }, {
                data: {
                    maxHp: number;
                    atk: number;
                    def: number;
                    magicResistance: number;
                    cost: number;
                    blockCnt: number;
                    moveSpeed: number;
                    attackSpeed: number;
                    baseAttackTime: number;
                    respawnTime: number;
                    hpRecoveryPerSec: number;
                    spRecoveryPerSec: number;
                    maxDeployCount: number;
                    maxDeckStackCnt: number;
                    tauntLevel: number;
                    massLevel: number;
                    baseForceLevel: number;
                    stunImmune: boolean;
                    silenceImmune: boolean;
                    sleepImmune: boolean;
                    frozenImmune: boolean;
                    levitateImmune: boolean;
                };
                level: number;
            }>, "many">;
            evolveCost: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                count: z.ZodNumber;
                type: z.ZodString;
            }, "strict", z.ZodTypeAny, {
                type: string;
                id: string;
                count: number;
            }, {
                type: string;
                id: string;
                count: number;
            }>, "many">, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            rangeId: string;
            characterPrefabKey: string;
            maxLevel: number;
            attributesKeyFrames: {
                data: {
                    maxHp: number;
                    atk: number;
                    def: number;
                    magicResistance: number;
                    cost: number;
                    blockCnt: number;
                    moveSpeed: number;
                    attackSpeed: number;
                    baseAttackTime: number;
                    respawnTime: number;
                    hpRecoveryPerSec: number;
                    spRecoveryPerSec: number;
                    maxDeployCount: number;
                    maxDeckStackCnt: number;
                    tauntLevel: number;
                    massLevel: number;
                    baseForceLevel: number;
                    stunImmune: boolean;
                    silenceImmune: boolean;
                    sleepImmune: boolean;
                    frozenImmune: boolean;
                    levitateImmune: boolean;
                };
                level: number;
            }[];
            evolveCost: {
                type: string;
                id: string;
                count: number;
            }[] | null;
        }, {
            rangeId: string;
            characterPrefabKey: string;
            maxLevel: number;
            attributesKeyFrames: {
                data: {
                    maxHp: number;
                    atk: number;
                    def: number;
                    magicResistance: number;
                    cost: number;
                    blockCnt: number;
                    moveSpeed: number;
                    attackSpeed: number;
                    baseAttackTime: number;
                    respawnTime: number;
                    hpRecoveryPerSec: number;
                    spRecoveryPerSec: number;
                    maxDeployCount: number;
                    maxDeckStackCnt: number;
                    tauntLevel: number;
                    massLevel: number;
                    baseForceLevel: number;
                    stunImmune: boolean;
                    silenceImmune: boolean;
                    sleepImmune: boolean;
                    frozenImmune: boolean;
                    levitateImmune: boolean;
                };
                level: number;
            }[];
            evolveCost: {
                type: string;
                id: string;
                count: number;
            }[] | null;
        }>, "many">;
        skills: z.ZodArray<z.ZodObject<{
            skillId: z.ZodString;
            overridePrefabKey: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            overrideTokenKey: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            levelUpCostCond: z.ZodArray<z.ZodObject<{
                unlockCond: z.ZodObject<{
                    phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    level: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    level: number;
                    phase: string | number;
                }, {
                    level: number;
                    phase: string | number;
                }>;
                lvlUpTime: z.ZodNumber;
                levelUpCost: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    count: z.ZodNumber;
                    type: z.ZodString;
                }, "strict", z.ZodTypeAny, {
                    type: string;
                    id: string;
                    count: number;
                }, {
                    type: string;
                    id: string;
                    count: number;
                }>, "many">, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                unlockCond: {
                    level: number;
                    phase: string | number;
                };
                lvlUpTime: number;
                levelUpCost: {
                    type: string;
                    id: string;
                    count: number;
                }[] | null;
            }, {
                unlockCond: {
                    level: number;
                    phase: string | number;
                };
                lvlUpTime: number;
                levelUpCost: {
                    type: string;
                    id: string;
                    count: number;
                }[] | null;
            }>, "many">;
            unlockCond: z.ZodObject<{
                phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                level: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                level: number;
                phase: string | number;
            }, {
                level: number;
                phase: string | number;
            }>;
        }, "strict", z.ZodTypeAny, {
            unlockCond: {
                level: number;
                phase: string | number;
            };
            skillId: string;
            overridePrefabKey: string | null;
            overrideTokenKey: string | null;
            levelUpCostCond: {
                unlockCond: {
                    level: number;
                    phase: string | number;
                };
                lvlUpTime: number;
                levelUpCost: {
                    type: string;
                    id: string;
                    count: number;
                }[] | null;
            }[];
        }, {
            unlockCond: {
                level: number;
                phase: string | number;
            };
            skillId: string;
            overridePrefabKey: string | null;
            overrideTokenKey: string | null;
            levelUpCostCond: {
                unlockCond: {
                    level: number;
                    phase: string | number;
                };
                lvlUpTime: number;
                levelUpCost: {
                    type: string;
                    id: string;
                    count: number;
                }[] | null;
            }[];
        }>, "many">;
        displayTokenDict: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodBoolean>>;
        talents: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            candidates: z.ZodArray<z.ZodObject<{
                unlockCondition: z.ZodObject<{
                    phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    level: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    level: number;
                    phase: string | number;
                }, {
                    level: number;
                    phase: string | number;
                }>;
                requiredPotentialRank: z.ZodNumber;
                prefabKey: z.ZodString;
                name: z.ZodString;
                description: z.ZodString;
                rangeId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                blackboard: z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }>, "many">;
                tokenKey: z.ZodNullable<z.ZodString>;
            }, "strict", z.ZodTypeAny, {
                name: string;
                description: string;
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                unlockCondition: {
                    level: number;
                    phase: string | number;
                };
                requiredPotentialRank: number;
                rangeId: string | null;
                tokenKey: string | null;
            }, {
                name: string;
                description: string;
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                unlockCondition: {
                    level: number;
                    phase: string | number;
                };
                requiredPotentialRank: number;
                rangeId: string | null;
                tokenKey: string | null;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            candidates: {
                name: string;
                description: string;
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                unlockCondition: {
                    level: number;
                    phase: string | number;
                };
                requiredPotentialRank: number;
                rangeId: string | null;
                tokenKey: string | null;
            }[];
        }, {
            candidates: {
                name: string;
                description: string;
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                unlockCondition: {
                    level: number;
                    phase: string | number;
                };
                requiredPotentialRank: number;
                rangeId: string | null;
                tokenKey: string | null;
            }[];
        }>, "many">, z.ZodNull]>;
        potentialRanks: z.ZodArray<z.ZodObject<{
            type: z.ZodString;
            description: z.ZodString;
            buff: z.ZodUnion<[z.ZodObject<{
                attributes: z.ZodObject<{
                    abnormalFlags: z.ZodNull;
                    abnormalImmunes: z.ZodNull;
                    abnormalAntis: z.ZodNull;
                    abnormalCombos: z.ZodNull;
                    abnormalComboImmunes: z.ZodNull;
                    attributeModifiers: z.ZodArray<z.ZodObject<{
                        attributeType: z.ZodString;
                        formulaItem: z.ZodString;
                        value: z.ZodNumber;
                        loadFromBlackboard: z.ZodBoolean;
                        fetchBaseValueFromSourceEntity: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        value: number;
                        attributeType: string;
                        formulaItem: string;
                        loadFromBlackboard: boolean;
                        fetchBaseValueFromSourceEntity: boolean;
                    }, {
                        value: number;
                        attributeType: string;
                        formulaItem: string;
                        loadFromBlackboard: boolean;
                        fetchBaseValueFromSourceEntity: boolean;
                    }>, "many">;
                }, "strict", z.ZodTypeAny, {
                    abnormalFlags: null;
                    abnormalImmunes: null;
                    abnormalAntis: null;
                    abnormalCombos: null;
                    abnormalComboImmunes: null;
                    attributeModifiers: {
                        value: number;
                        attributeType: string;
                        formulaItem: string;
                        loadFromBlackboard: boolean;
                        fetchBaseValueFromSourceEntity: boolean;
                    }[];
                }, {
                    abnormalFlags: null;
                    abnormalImmunes: null;
                    abnormalAntis: null;
                    abnormalCombos: null;
                    abnormalComboImmunes: null;
                    attributeModifiers: {
                        value: number;
                        attributeType: string;
                        formulaItem: string;
                        loadFromBlackboard: boolean;
                        fetchBaseValueFromSourceEntity: boolean;
                    }[];
                }>;
            }, "strict", z.ZodTypeAny, {
                attributes: {
                    abnormalFlags: null;
                    abnormalImmunes: null;
                    abnormalAntis: null;
                    abnormalCombos: null;
                    abnormalComboImmunes: null;
                    attributeModifiers: {
                        value: number;
                        attributeType: string;
                        formulaItem: string;
                        loadFromBlackboard: boolean;
                        fetchBaseValueFromSourceEntity: boolean;
                    }[];
                };
            }, {
                attributes: {
                    abnormalFlags: null;
                    abnormalImmunes: null;
                    abnormalAntis: null;
                    abnormalCombos: null;
                    abnormalComboImmunes: null;
                    attributeModifiers: {
                        value: number;
                        attributeType: string;
                        formulaItem: string;
                        loadFromBlackboard: boolean;
                        fetchBaseValueFromSourceEntity: boolean;
                    }[];
                };
            }>, z.ZodNull]>;
            equivalentCost: z.ZodNull;
        }, "strict", z.ZodTypeAny, {
            type: string;
            description: string;
            buff: {
                attributes: {
                    abnormalFlags: null;
                    abnormalImmunes: null;
                    abnormalAntis: null;
                    abnormalCombos: null;
                    abnormalComboImmunes: null;
                    attributeModifiers: {
                        value: number;
                        attributeType: string;
                        formulaItem: string;
                        loadFromBlackboard: boolean;
                        fetchBaseValueFromSourceEntity: boolean;
                    }[];
                };
            } | null;
            equivalentCost: null;
        }, {
            type: string;
            description: string;
            buff: {
                attributes: {
                    abnormalFlags: null;
                    abnormalImmunes: null;
                    abnormalAntis: null;
                    abnormalCombos: null;
                    abnormalComboImmunes: null;
                    attributeModifiers: {
                        value: number;
                        attributeType: string;
                        formulaItem: string;
                        loadFromBlackboard: boolean;
                        fetchBaseValueFromSourceEntity: boolean;
                    }[];
                };
            } | null;
            equivalentCost: null;
        }>, "many">;
        favorKeyFrames: z.ZodArray<z.ZodObject<{
            level: z.ZodNumber;
            data: z.ZodObject<{
                maxHp: z.ZodNumber;
                atk: z.ZodNumber;
                def: z.ZodNumber;
                magicResistance: z.ZodNumber;
                cost: z.ZodNumber;
                blockCnt: z.ZodNumber;
                moveSpeed: z.ZodNumber;
                attackSpeed: z.ZodNumber;
                baseAttackTime: z.ZodNumber;
                respawnTime: z.ZodNumber;
                hpRecoveryPerSec: z.ZodNumber;
                spRecoveryPerSec: z.ZodNumber;
                maxDeployCount: z.ZodNumber;
                maxDeckStackCnt: z.ZodNumber;
                tauntLevel: z.ZodNumber;
                massLevel: z.ZodNumber;
                baseForceLevel: z.ZodNumber;
                stunImmune: z.ZodBoolean;
                silenceImmune: z.ZodBoolean;
                sleepImmune: z.ZodBoolean;
                frozenImmune: z.ZodBoolean;
                levitateImmune: z.ZodBoolean;
            }, "strict", z.ZodTypeAny, {
                maxHp: number;
                atk: number;
                def: number;
                magicResistance: number;
                cost: number;
                blockCnt: number;
                moveSpeed: number;
                attackSpeed: number;
                baseAttackTime: number;
                respawnTime: number;
                hpRecoveryPerSec: number;
                spRecoveryPerSec: number;
                maxDeployCount: number;
                maxDeckStackCnt: number;
                tauntLevel: number;
                massLevel: number;
                baseForceLevel: number;
                stunImmune: boolean;
                silenceImmune: boolean;
                sleepImmune: boolean;
                frozenImmune: boolean;
                levitateImmune: boolean;
            }, {
                maxHp: number;
                atk: number;
                def: number;
                magicResistance: number;
                cost: number;
                blockCnt: number;
                moveSpeed: number;
                attackSpeed: number;
                baseAttackTime: number;
                respawnTime: number;
                hpRecoveryPerSec: number;
                spRecoveryPerSec: number;
                maxDeployCount: number;
                maxDeckStackCnt: number;
                tauntLevel: number;
                massLevel: number;
                baseForceLevel: number;
                stunImmune: boolean;
                silenceImmune: boolean;
                sleepImmune: boolean;
                frozenImmune: boolean;
                levitateImmune: boolean;
            }>;
        }, "strict", z.ZodTypeAny, {
            data: {
                maxHp: number;
                atk: number;
                def: number;
                magicResistance: number;
                cost: number;
                blockCnt: number;
                moveSpeed: number;
                attackSpeed: number;
                baseAttackTime: number;
                respawnTime: number;
                hpRecoveryPerSec: number;
                spRecoveryPerSec: number;
                maxDeployCount: number;
                maxDeckStackCnt: number;
                tauntLevel: number;
                massLevel: number;
                baseForceLevel: number;
                stunImmune: boolean;
                silenceImmune: boolean;
                sleepImmune: boolean;
                frozenImmune: boolean;
                levitateImmune: boolean;
            };
            level: number;
        }, {
            data: {
                maxHp: number;
                atk: number;
                def: number;
                magicResistance: number;
                cost: number;
                blockCnt: number;
                moveSpeed: number;
                attackSpeed: number;
                baseAttackTime: number;
                respawnTime: number;
                hpRecoveryPerSec: number;
                spRecoveryPerSec: number;
                maxDeployCount: number;
                maxDeckStackCnt: number;
                tauntLevel: number;
                massLevel: number;
                baseForceLevel: number;
                stunImmune: boolean;
                silenceImmune: boolean;
                sleepImmune: boolean;
                frozenImmune: boolean;
                levitateImmune: boolean;
            };
            level: number;
        }>, "many">;
        allSkillLvlup: z.ZodArray<z.ZodObject<{
            unlockCond: z.ZodObject<{
                phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                level: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                level: number;
                phase: string | number;
            }, {
                level: number;
                phase: string | number;
            }>;
            lvlUpCost: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                count: z.ZodNumber;
                type: z.ZodString;
            }, "strict", z.ZodTypeAny, {
                type: string;
                id: string;
                count: number;
            }, {
                type: string;
                id: string;
                count: number;
            }>, "many">, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            unlockCond: {
                level: number;
                phase: string | number;
            };
            lvlUpCost: {
                type: string;
                id: string;
                count: number;
            }[] | null;
        }, {
            unlockCond: {
                level: number;
                phase: string | number;
            };
            lvlUpCost: {
                type: string;
                id: string;
                count: number;
            }[] | null;
        }>, "many">;
    }, "strict", z.ZodTypeAny, {
        name: string;
        position: string;
        description: string;
        skills: {
            unlockCond: {
                level: number;
                phase: string | number;
            };
            skillId: string;
            overridePrefabKey: string | null;
            overrideTokenKey: string | null;
            levelUpCostCond: {
                unlockCond: {
                    level: number;
                    phase: string | number;
                };
                lvlUpTime: number;
                levelUpCost: {
                    type: string;
                    id: string;
                    count: number;
                }[] | null;
            }[];
        }[];
        rarity: string;
        phases: {
            rangeId: string;
            characterPrefabKey: string;
            maxLevel: number;
            attributesKeyFrames: {
                data: {
                    maxHp: number;
                    atk: number;
                    def: number;
                    magicResistance: number;
                    cost: number;
                    blockCnt: number;
                    moveSpeed: number;
                    attackSpeed: number;
                    baseAttackTime: number;
                    respawnTime: number;
                    hpRecoveryPerSec: number;
                    spRecoveryPerSec: number;
                    maxDeployCount: number;
                    maxDeckStackCnt: number;
                    tauntLevel: number;
                    massLevel: number;
                    baseForceLevel: number;
                    stunImmune: boolean;
                    silenceImmune: boolean;
                    sleepImmune: boolean;
                    frozenImmune: boolean;
                    levitateImmune: boolean;
                };
                level: number;
            }[];
            evolveCost: {
                type: string;
                id: string;
                count: number;
            }[] | null;
        }[];
        canUseGeneralPotentialItem: boolean;
        canUseActivityPotentialItem: boolean;
        potentialItemId: string | null;
        activityPotentialItemId: string | null;
        classicPotentialItemId: string | null;
        nationId: string | null;
        groupId: string | null;
        teamId: string | null;
        displayNumber: string | null;
        appellation: string;
        tagList: string[];
        itemUsage: string | null;
        itemDesc: string | null;
        itemObtainApproach: string | null;
        isNotObtainable: boolean;
        isSpChar: boolean;
        maxPotentialLevel: number;
        profession: string;
        subProfessionId: string;
        trait: {
            candidates: {
                prefabKey: string | null;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                unlockCondition: {
                    level: number;
                    phase: string | number;
                };
                requiredPotentialRank: number;
                rangeId: string | null;
                overrideDescripton: string | null;
            }[];
        } | null;
        displayTokenDict: Record<string, boolean> | null;
        talents: {
            candidates: {
                name: string;
                description: string;
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                unlockCondition: {
                    level: number;
                    phase: string | number;
                };
                requiredPotentialRank: number;
                rangeId: string | null;
                tokenKey: string | null;
            }[];
        }[] | null;
        potentialRanks: {
            type: string;
            description: string;
            buff: {
                attributes: {
                    abnormalFlags: null;
                    abnormalImmunes: null;
                    abnormalAntis: null;
                    abnormalCombos: null;
                    abnormalComboImmunes: null;
                    attributeModifiers: {
                        value: number;
                        attributeType: string;
                        formulaItem: string;
                        loadFromBlackboard: boolean;
                        fetchBaseValueFromSourceEntity: boolean;
                    }[];
                };
            } | null;
            equivalentCost: null;
        }[];
        favorKeyFrames: {
            data: {
                maxHp: number;
                atk: number;
                def: number;
                magicResistance: number;
                cost: number;
                blockCnt: number;
                moveSpeed: number;
                attackSpeed: number;
                baseAttackTime: number;
                respawnTime: number;
                hpRecoveryPerSec: number;
                spRecoveryPerSec: number;
                maxDeployCount: number;
                maxDeckStackCnt: number;
                tauntLevel: number;
                massLevel: number;
                baseForceLevel: number;
                stunImmune: boolean;
                silenceImmune: boolean;
                sleepImmune: boolean;
                frozenImmune: boolean;
                levitateImmune: boolean;
            };
            level: number;
        }[];
        allSkillLvlup: {
            unlockCond: {
                level: number;
                phase: string | number;
            };
            lvlUpCost: {
                type: string;
                id: string;
                count: number;
            }[] | null;
        }[];
    }, {
        name: string;
        position: string;
        description: string;
        skills: {
            unlockCond: {
                level: number;
                phase: string | number;
            };
            skillId: string;
            overridePrefabKey: string | null;
            overrideTokenKey: string | null;
            levelUpCostCond: {
                unlockCond: {
                    level: number;
                    phase: string | number;
                };
                lvlUpTime: number;
                levelUpCost: {
                    type: string;
                    id: string;
                    count: number;
                }[] | null;
            }[];
        }[];
        rarity: string;
        phases: {
            rangeId: string;
            characterPrefabKey: string;
            maxLevel: number;
            attributesKeyFrames: {
                data: {
                    maxHp: number;
                    atk: number;
                    def: number;
                    magicResistance: number;
                    cost: number;
                    blockCnt: number;
                    moveSpeed: number;
                    attackSpeed: number;
                    baseAttackTime: number;
                    respawnTime: number;
                    hpRecoveryPerSec: number;
                    spRecoveryPerSec: number;
                    maxDeployCount: number;
                    maxDeckStackCnt: number;
                    tauntLevel: number;
                    massLevel: number;
                    baseForceLevel: number;
                    stunImmune: boolean;
                    silenceImmune: boolean;
                    sleepImmune: boolean;
                    frozenImmune: boolean;
                    levitateImmune: boolean;
                };
                level: number;
            }[];
            evolveCost: {
                type: string;
                id: string;
                count: number;
            }[] | null;
        }[];
        canUseGeneralPotentialItem: boolean;
        canUseActivityPotentialItem: boolean;
        potentialItemId: string | null;
        activityPotentialItemId: string | null;
        classicPotentialItemId: string | null;
        nationId: string | null;
        groupId: string | null;
        teamId: string | null;
        displayNumber: string | null;
        appellation: string;
        tagList: string[];
        itemUsage: string | null;
        itemDesc: string | null;
        itemObtainApproach: string | null;
        isNotObtainable: boolean;
        isSpChar: boolean;
        maxPotentialLevel: number;
        profession: string;
        subProfessionId: string;
        trait: {
            candidates: {
                prefabKey: string | null;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                unlockCondition: {
                    level: number;
                    phase: string | number;
                };
                requiredPotentialRank: number;
                rangeId: string | null;
                overrideDescripton: string | null;
            }[];
        } | null;
        displayTokenDict: Record<string, boolean> | null;
        talents: {
            candidates: {
                name: string;
                description: string;
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                unlockCondition: {
                    level: number;
                    phase: string | number;
                };
                requiredPotentialRank: number;
                rangeId: string | null;
                tokenKey: string | null;
            }[];
        }[] | null;
        potentialRanks: {
            type: string;
            description: string;
            buff: {
                attributes: {
                    abnormalFlags: null;
                    abnormalImmunes: null;
                    abnormalAntis: null;
                    abnormalCombos: null;
                    abnormalComboImmunes: null;
                    attributeModifiers: {
                        value: number;
                        attributeType: string;
                        formulaItem: string;
                        loadFromBlackboard: boolean;
                        fetchBaseValueFromSourceEntity: boolean;
                    }[];
                };
            } | null;
            equivalentCost: null;
        }[];
        favorKeyFrames: {
            data: {
                maxHp: number;
                atk: number;
                def: number;
                magicResistance: number;
                cost: number;
                blockCnt: number;
                moveSpeed: number;
                attackSpeed: number;
                baseAttackTime: number;
                respawnTime: number;
                hpRecoveryPerSec: number;
                spRecoveryPerSec: number;
                maxDeployCount: number;
                maxDeckStackCnt: number;
                tauntLevel: number;
                massLevel: number;
                baseForceLevel: number;
                stunImmune: boolean;
                silenceImmune: boolean;
                sleepImmune: boolean;
                frozenImmune: boolean;
                levitateImmune: boolean;
            };
            level: number;
        }[];
        allSkillLvlup: {
            unlockCond: {
                level: number;
                phase: string | number;
            };
            lvlUpCost: {
                type: string;
                id: string;
                count: number;
            }[] | null;
        }[];
    }>;
}, "strict", z.ZodTypeAny, {
    data: {
        name: string;
        position: string;
        description: string;
        skills: {
            unlockCond: {
                level: number;
                phase: string | number;
            };
            skillId: string;
            overridePrefabKey: string | null;
            overrideTokenKey: string | null;
            levelUpCostCond: {
                unlockCond: {
                    level: number;
                    phase: string | number;
                };
                lvlUpTime: number;
                levelUpCost: {
                    type: string;
                    id: string;
                    count: number;
                }[] | null;
            }[];
        }[];
        rarity: string;
        phases: {
            rangeId: string;
            characterPrefabKey: string;
            maxLevel: number;
            attributesKeyFrames: {
                data: {
                    maxHp: number;
                    atk: number;
                    def: number;
                    magicResistance: number;
                    cost: number;
                    blockCnt: number;
                    moveSpeed: number;
                    attackSpeed: number;
                    baseAttackTime: number;
                    respawnTime: number;
                    hpRecoveryPerSec: number;
                    spRecoveryPerSec: number;
                    maxDeployCount: number;
                    maxDeckStackCnt: number;
                    tauntLevel: number;
                    massLevel: number;
                    baseForceLevel: number;
                    stunImmune: boolean;
                    silenceImmune: boolean;
                    sleepImmune: boolean;
                    frozenImmune: boolean;
                    levitateImmune: boolean;
                };
                level: number;
            }[];
            evolveCost: {
                type: string;
                id: string;
                count: number;
            }[] | null;
        }[];
        canUseGeneralPotentialItem: boolean;
        canUseActivityPotentialItem: boolean;
        potentialItemId: string | null;
        activityPotentialItemId: string | null;
        classicPotentialItemId: string | null;
        nationId: string | null;
        groupId: string | null;
        teamId: string | null;
        displayNumber: string | null;
        appellation: string;
        tagList: string[];
        itemUsage: string | null;
        itemDesc: string | null;
        itemObtainApproach: string | null;
        isNotObtainable: boolean;
        isSpChar: boolean;
        maxPotentialLevel: number;
        profession: string;
        subProfessionId: string;
        trait: {
            candidates: {
                prefabKey: string | null;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                unlockCondition: {
                    level: number;
                    phase: string | number;
                };
                requiredPotentialRank: number;
                rangeId: string | null;
                overrideDescripton: string | null;
            }[];
        } | null;
        displayTokenDict: Record<string, boolean> | null;
        talents: {
            candidates: {
                name: string;
                description: string;
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                unlockCondition: {
                    level: number;
                    phase: string | number;
                };
                requiredPotentialRank: number;
                rangeId: string | null;
                tokenKey: string | null;
            }[];
        }[] | null;
        potentialRanks: {
            type: string;
            description: string;
            buff: {
                attributes: {
                    abnormalFlags: null;
                    abnormalImmunes: null;
                    abnormalAntis: null;
                    abnormalCombos: null;
                    abnormalComboImmunes: null;
                    attributeModifiers: {
                        value: number;
                        attributeType: string;
                        formulaItem: string;
                        loadFromBlackboard: boolean;
                        fetchBaseValueFromSourceEntity: boolean;
                    }[];
                };
            } | null;
            equivalentCost: null;
        }[];
        favorKeyFrames: {
            data: {
                maxHp: number;
                atk: number;
                def: number;
                magicResistance: number;
                cost: number;
                blockCnt: number;
                moveSpeed: number;
                attackSpeed: number;
                baseAttackTime: number;
                respawnTime: number;
                hpRecoveryPerSec: number;
                spRecoveryPerSec: number;
                maxDeployCount: number;
                maxDeckStackCnt: number;
                tauntLevel: number;
                massLevel: number;
                baseForceLevel: number;
                stunImmune: boolean;
                silenceImmune: boolean;
                sleepImmune: boolean;
                frozenImmune: boolean;
                levitateImmune: boolean;
            };
            level: number;
        }[];
        allSkillLvlup: {
            unlockCond: {
                level: number;
                phase: string | number;
            };
            lvlUpCost: {
                type: string;
                id: string;
                count: number;
            }[] | null;
        }[];
    };
    id: string;
    skills: {
        hidden: boolean;
        iconId: string | null;
        levels: {
            name: string;
            description: string | null;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            spData: {
                spCost: number;
                spType: string | number;
                initSp: number;
                increment: number;
                levelUpCost: null;
                maxChargeTime: number;
            };
            rangeId: string | null;
            skillType: string;
            durationType: string;
            prefabId: string | null;
            duration: number;
        }[];
        skillId: string;
    }[];
    recruit: number;
    archetype: string;
    range: {
        id: string;
        direction: number;
        grids: {
            col: number;
            row: number;
        }[];
    };
    modules: {
        data: {
            phases: {
                equipLevel: number;
                parts: {
                    target: string;
                    resKey: string | null;
                    isToken: boolean;
                    addOrOverrideTalentDataBundle: {
                        candidates: {
                            name: string | null;
                            description: string | null;
                            prefabKey: string;
                            blackboard: {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }[];
                            displayRangeId: boolean;
                            upgradeDescription: string;
                            talentIndex: number;
                            unlockCondition: {
                                level: number;
                                phase: string | number;
                            };
                            requiredPotentialRank: number;
                            rangeId: string | null;
                            tokenKey?: string | undefined;
                        }[] | null;
                    };
                    overrideTraitDataBundle: {
                        candidates: {
                            prefabKey: string | null;
                            blackboard: {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }[];
                            unlockCondition: {
                                level: number;
                                phase: string | number;
                            };
                            requiredPotentialRank: number;
                            rangeId: string | null;
                            additionalDescription: string | null;
                            overrideDescripton: string | null;
                        }[] | null;
                    };
                }[];
                attributeBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                tokenAttributeBlackboard: Record<string, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[]>;
            }[];
        } | null;
        info: {
            type: string;
            tmplId: string | null;
            uniEquipId: string;
            uniEquipName: string;
            uniEquipIcon: string;
            uniEquipDesc: string;
            typeIcon: string;
            typeName1: string;
            typeName2: string | null;
            equipShiningColor: string;
            showEvolvePhase: string;
            unlockEvolvePhase: string;
            charId: string;
            showLevel: number;
            unlockLevel: number;
            unlockFavorPoint: number;
            missionList: string[];
            itemCost: Record<string, {
                type: string;
                id: string;
                count: number;
            }[]> | null;
            uniEquipGetTime: number;
            charEquipOrder: number;
        };
    }[];
    skins: {
        skinId: string;
        tmplId: string | null;
        charId: string;
        tokenSkinMap: {
            tokenId: string;
            tokenSkinId: string;
        }[] | null;
        illustId: string | null;
        dynIllustId: string | null;
        avatarId: string;
        portraitId: string | null;
        dynPortraitId: string | null;
        dynEntranceId: string | null;
        buildingId: string | null;
        battleSkin: {
            overwritePrefab: boolean;
            skinOrPrefabId: string | null;
        };
        isBuySkin: boolean;
        voiceId: string | null;
        voiceType: string;
        displaySkin: {
            content: string | null;
            dialog: string | null;
            description: string | null;
            sortId: number;
            usage: string | null;
            obtainApproach: string | null;
            skinName: string | null;
            colorList: string[] | null;
            titleList: string[] | null;
            modelName: string | null;
            drawerList: string[] | null;
            designerList: string[] | null;
            skinGroupId: string | null;
            skinGroupName: string | null;
            skinGroupSortIndex: number;
            displayTagId: string | null;
            getTime: number;
            onYear: number;
            onPeriod: number;
        };
    }[];
    bases: {
        condition: {
            buffId: string;
            cond: {
                level: number;
                phase: string | number;
            };
        };
        skill: {
            description: string;
            sortId: number;
            buffId: string;
            buffName: string;
            buffIcon: string;
            skillIcon: string;
            buffColor: string;
            textColor: string;
            buffCategory: string;
            roomType: string;
        };
    }[];
    paradox: {
        excel: {
            code: string;
            name: string;
            description: string;
            stageId: string;
            levelId: string;
            loadingPicId: string;
            charId: string;
            zoneId: string;
            unlockParam: {
                unlockType: string;
                unlockParam1: string;
                unlockParam2: string;
                unlockParam3: null;
            }[];
            rewardItem: {
                type: string;
                id: string;
                count: number;
            }[];
            stageNameForShow: string;
            zoneNameForShow: string;
            picId: string;
            stageGetTime: number;
        };
        levels: {
            options: {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            };
            levelId: string | null;
            mapId: string | null;
            bgmEvent: string | null;
            environmentSe: string | null;
            mapData: {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            };
            tilesDisallowToLocate: any[];
            runes: {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }[] | null;
            globalBuffs: {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }[] | null;
            routes: ({
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            } | null)[];
            enemies: any[];
            enemyDbRefs: {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }[];
            waves: {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }[];
            branches: Record<string, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }> | null;
            predefines: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null;
            excludeCharIdList: null;
            randomSeed: number;
            extraRoutes?: any[] | undefined;
            hardPredefines?: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null | undefined;
            operaConfig?: string | null | undefined;
            runtimeData?: null | undefined;
        };
    } | null;
}, {
    data: {
        name: string;
        position: string;
        description: string;
        skills: {
            unlockCond: {
                level: number;
                phase: string | number;
            };
            skillId: string;
            overridePrefabKey: string | null;
            overrideTokenKey: string | null;
            levelUpCostCond: {
                unlockCond: {
                    level: number;
                    phase: string | number;
                };
                lvlUpTime: number;
                levelUpCost: {
                    type: string;
                    id: string;
                    count: number;
                }[] | null;
            }[];
        }[];
        rarity: string;
        phases: {
            rangeId: string;
            characterPrefabKey: string;
            maxLevel: number;
            attributesKeyFrames: {
                data: {
                    maxHp: number;
                    atk: number;
                    def: number;
                    magicResistance: number;
                    cost: number;
                    blockCnt: number;
                    moveSpeed: number;
                    attackSpeed: number;
                    baseAttackTime: number;
                    respawnTime: number;
                    hpRecoveryPerSec: number;
                    spRecoveryPerSec: number;
                    maxDeployCount: number;
                    maxDeckStackCnt: number;
                    tauntLevel: number;
                    massLevel: number;
                    baseForceLevel: number;
                    stunImmune: boolean;
                    silenceImmune: boolean;
                    sleepImmune: boolean;
                    frozenImmune: boolean;
                    levitateImmune: boolean;
                };
                level: number;
            }[];
            evolveCost: {
                type: string;
                id: string;
                count: number;
            }[] | null;
        }[];
        canUseGeneralPotentialItem: boolean;
        canUseActivityPotentialItem: boolean;
        potentialItemId: string | null;
        activityPotentialItemId: string | null;
        classicPotentialItemId: string | null;
        nationId: string | null;
        groupId: string | null;
        teamId: string | null;
        displayNumber: string | null;
        appellation: string;
        tagList: string[];
        itemUsage: string | null;
        itemDesc: string | null;
        itemObtainApproach: string | null;
        isNotObtainable: boolean;
        isSpChar: boolean;
        maxPotentialLevel: number;
        profession: string;
        subProfessionId: string;
        trait: {
            candidates: {
                prefabKey: string | null;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                unlockCondition: {
                    level: number;
                    phase: string | number;
                };
                requiredPotentialRank: number;
                rangeId: string | null;
                overrideDescripton: string | null;
            }[];
        } | null;
        displayTokenDict: Record<string, boolean> | null;
        talents: {
            candidates: {
                name: string;
                description: string;
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                unlockCondition: {
                    level: number;
                    phase: string | number;
                };
                requiredPotentialRank: number;
                rangeId: string | null;
                tokenKey: string | null;
            }[];
        }[] | null;
        potentialRanks: {
            type: string;
            description: string;
            buff: {
                attributes: {
                    abnormalFlags: null;
                    abnormalImmunes: null;
                    abnormalAntis: null;
                    abnormalCombos: null;
                    abnormalComboImmunes: null;
                    attributeModifiers: {
                        value: number;
                        attributeType: string;
                        formulaItem: string;
                        loadFromBlackboard: boolean;
                        fetchBaseValueFromSourceEntity: boolean;
                    }[];
                };
            } | null;
            equivalentCost: null;
        }[];
        favorKeyFrames: {
            data: {
                maxHp: number;
                atk: number;
                def: number;
                magicResistance: number;
                cost: number;
                blockCnt: number;
                moveSpeed: number;
                attackSpeed: number;
                baseAttackTime: number;
                respawnTime: number;
                hpRecoveryPerSec: number;
                spRecoveryPerSec: number;
                maxDeployCount: number;
                maxDeckStackCnt: number;
                tauntLevel: number;
                massLevel: number;
                baseForceLevel: number;
                stunImmune: boolean;
                silenceImmune: boolean;
                sleepImmune: boolean;
                frozenImmune: boolean;
                levitateImmune: boolean;
            };
            level: number;
        }[];
        allSkillLvlup: {
            unlockCond: {
                level: number;
                phase: string | number;
            };
            lvlUpCost: {
                type: string;
                id: string;
                count: number;
            }[] | null;
        }[];
    };
    id: string;
    skills: {
        hidden: boolean;
        iconId: string | null;
        levels: {
            name: string;
            description: string | null;
            blackboard: {
                key: string;
                value: number | null;
                valueStr?: string | null | undefined;
            }[];
            spData: {
                spCost: number;
                spType: string | number;
                initSp: number;
                increment: number;
                levelUpCost: null;
                maxChargeTime: number;
            };
            rangeId: string | null;
            skillType: string;
            durationType: string;
            prefabId: string | null;
            duration: number;
        }[];
        skillId: string;
    }[];
    recruit: number;
    archetype: string;
    range: {
        id: string;
        direction: number;
        grids: {
            col: number;
            row: number;
        }[];
    };
    modules: {
        data: {
            phases: {
                equipLevel: number;
                parts: {
                    target: string;
                    resKey: string | null;
                    isToken: boolean;
                    addOrOverrideTalentDataBundle: {
                        candidates: {
                            name: string | null;
                            description: string | null;
                            prefabKey: string;
                            blackboard: {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }[];
                            displayRangeId: boolean;
                            upgradeDescription: string;
                            talentIndex: number;
                            unlockCondition: {
                                level: number;
                                phase: string | number;
                            };
                            requiredPotentialRank: number;
                            rangeId: string | null;
                            tokenKey?: string | undefined;
                        }[] | null;
                    };
                    overrideTraitDataBundle: {
                        candidates: {
                            prefabKey: string | null;
                            blackboard: {
                                key: string;
                                value: number | null;
                                valueStr?: string | null | undefined;
                            }[];
                            unlockCondition: {
                                level: number;
                                phase: string | number;
                            };
                            requiredPotentialRank: number;
                            rangeId: string | null;
                            additionalDescription: string | null;
                            overrideDescripton: string | null;
                        }[] | null;
                    };
                }[];
                attributeBlackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                tokenAttributeBlackboard: Record<string, {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[]>;
            }[];
        } | null;
        info: {
            type: string;
            tmplId: string | null;
            uniEquipId: string;
            uniEquipName: string;
            uniEquipIcon: string;
            uniEquipDesc: string;
            typeIcon: string;
            typeName1: string;
            typeName2: string | null;
            equipShiningColor: string;
            showEvolvePhase: string;
            unlockEvolvePhase: string;
            charId: string;
            showLevel: number;
            unlockLevel: number;
            unlockFavorPoint: number;
            missionList: string[];
            itemCost: Record<string, {
                type: string;
                id: string;
                count: number;
            }[]> | null;
            uniEquipGetTime: number;
            charEquipOrder: number;
        };
    }[];
    skins: {
        skinId: string;
        tmplId: string | null;
        charId: string;
        tokenSkinMap: {
            tokenId: string;
            tokenSkinId: string;
        }[] | null;
        illustId: string | null;
        dynIllustId: string | null;
        avatarId: string;
        portraitId: string | null;
        dynPortraitId: string | null;
        dynEntranceId: string | null;
        buildingId: string | null;
        battleSkin: {
            overwritePrefab: boolean;
            skinOrPrefabId: string | null;
        };
        isBuySkin: boolean;
        voiceId: string | null;
        voiceType: string;
        displaySkin: {
            content: string | null;
            dialog: string | null;
            description: string | null;
            sortId: number;
            usage: string | null;
            obtainApproach: string | null;
            skinName: string | null;
            colorList: string[] | null;
            titleList: string[] | null;
            modelName: string | null;
            drawerList: string[] | null;
            designerList: string[] | null;
            skinGroupId: string | null;
            skinGroupName: string | null;
            skinGroupSortIndex: number;
            displayTagId: string | null;
            getTime: number;
            onYear: number;
            onPeriod: number;
        };
    }[];
    bases: {
        condition: {
            buffId: string;
            cond: {
                level: number;
                phase: string | number;
            };
        };
        skill: {
            description: string;
            sortId: number;
            buffId: string;
            buffName: string;
            buffIcon: string;
            skillIcon: string;
            buffColor: string;
            textColor: string;
            buffCategory: string;
            roomType: string;
        };
    }[];
    paradox: {
        excel: {
            code: string;
            name: string;
            description: string;
            stageId: string;
            levelId: string;
            loadingPicId: string;
            charId: string;
            zoneId: string;
            unlockParam: {
                unlockType: string;
                unlockParam1: string;
                unlockParam2: string;
                unlockParam3: null;
            }[];
            rewardItem: {
                type: string;
                id: string;
                count: number;
            }[];
            stageNameForShow: string;
            zoneNameForShow: string;
            picId: string;
            stageGetTime: number;
        };
        levels: {
            options: {
                characterLimit: number;
                maxLifePoint: number;
                initialCost: number;
                maxCost: number;
                costIncreaseTime: number;
                moveMultiplier: number;
                steeringEnabled: boolean;
                isTrainingLevel: boolean;
                functionDisableMask: string | number;
                isHardTrainingLevel?: boolean | undefined;
                isPredefinedCardsSelectable?: boolean | undefined;
                maxPlayTime?: number | undefined;
                configBlackBoard?: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null | undefined;
            };
            levelId: string | null;
            mapId: string | null;
            bgmEvent: string | null;
            environmentSe: string | null;
            mapData: {
                map: number[][];
                tiles: {
                    blackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    tileKey: string;
                    heightType: string | number;
                    buildableType: string | number;
                    passableMask: string | number;
                    effects: {
                        offset: {
                            x: number;
                            y: number;
                            z: number;
                        };
                        key: string;
                        direction: string | number;
                    }[] | null;
                    playerSideMask?: string | number | undefined;
                }[];
                effects: {
                    offset: {
                        x: number;
                        y: number;
                        z: number;
                    };
                    key: string;
                    direction: string | number;
                }[] | null;
                blockEdges: any[] | null;
                tags: string[] | null;
                layerRects?: null | undefined;
                width?: number | undefined;
                height?: number | undefined;
            };
            tilesDisallowToLocate: any[];
            runes: {
                key: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[];
                difficultyMask: string | number;
                buildableMask: string | number;
                professionMask?: string | number | undefined;
            }[] | null;
            globalBuffs: {
                prefabKey: string;
                blackboard: {
                    key: string;
                    value: number | null;
                    valueStr?: string | null | undefined;
                }[] | null;
                overrideCameraEffect: null;
                passProfessionMaskFlag?: boolean | undefined;
                professionMask?: string | number | undefined;
                useExtraData?: boolean | undefined;
            }[] | null;
            routes: ({
                motionMode: string | number;
                startPosition: {
                    col: number;
                    row: number;
                };
                endPosition: {
                    col: number;
                    row: number;
                };
                spawnRandomRange: {
                    x: number;
                    y: number;
                };
                spawnOffset: {
                    x: number;
                    y: number;
                };
                checkpoints: {
                    type: string | number;
                    time: number;
                    position: {
                        col: number;
                        row: number;
                    };
                    reachOffset: {
                        x: number;
                        y: number;
                    };
                    randomizeReachOffset: boolean;
                    reachDistance: number;
                }[] | null;
                allowDiagonalMove: boolean;
                visitEveryTileCenter: boolean;
                visitEveryNodeCenter: boolean;
                visitEveryCheckPoint?: boolean | undefined;
            } | null)[];
            enemies: any[];
            enemyDbRefs: {
                id: string;
                level: number;
                useDb: boolean;
                overwrittenData: {
                    name: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    attributes: {
                        maxHp: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        atk: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        def: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        magicResistance: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        cost: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        blockCnt: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        moveSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        attackSpeed: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseAttackTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        respawnTime: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        hpRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        spRecoveryPerSec: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        maxDeployCount: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        massLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        baseForceLevel: {
                            m_defined: boolean;
                            m_value: number | null;
                        };
                        stunImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        silenceImmune: {
                            m_defined: boolean;
                            m_value: boolean;
                        };
                        tauntLevel?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epDamageResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        epResistance?: {
                            m_defined: boolean;
                            m_value: number | null;
                        } | undefined;
                        sleepImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        frozenImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                        levitateImmune?: {
                            m_defined: boolean;
                            m_value: boolean;
                        } | undefined;
                    };
                    description: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    prefabKey: {
                        m_defined: boolean;
                        m_value: string | null;
                    };
                    lifePointReduce: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    rangeRadius: {
                        m_defined: boolean;
                        m_value: number | null;
                    };
                    talentBlackboard: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null;
                    skills: {
                        priority: number;
                        prefabKey: string;
                        cooldown: number;
                        initCooldown: number;
                        spCost: number;
                        blackboard: {
                            key: string;
                            value: number | null;
                            valueStr?: string | null | undefined;
                        }[] | null;
                    }[] | null;
                    spData: {
                        spType: string;
                        maxSp: number;
                        initSp: number;
                        increment: number;
                    } | null;
                    applyWay?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    motion?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | undefined;
                    enemyTags?: {
                        m_defined: boolean;
                        m_value: string[] | null;
                    } | undefined;
                    levelType?: {
                        m_defined: boolean;
                        m_value: string | null;
                    } | {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    numOfExtraDrops?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    viewRadius?: {
                        m_defined: boolean;
                        m_value: number | null;
                    } | undefined;
                    notCountInTotal?: {
                        m_defined: boolean;
                        m_value: boolean;
                    } | undefined;
                } | null;
            }[];
            waves: {
                preDelay: number;
                postDelay: number;
                maxTimeWaitingForNextWave: number;
                fragments: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    name?: string | null | undefined;
                }[];
                advancedWaveTag?: string | null | undefined;
                name?: string | null | undefined;
            }[];
            branches: Record<string, {
                phases: {
                    preDelay: number;
                    actions: {
                        interval: number;
                        key: string;
                        count: number;
                        actionType: string | number;
                        managedByScheduler: boolean;
                        preDelay: number;
                        routeIndex: number;
                        blockFragment: boolean;
                        autoPreviewRoute: boolean;
                        isUnharmfulAndAlwaysCountAsKilled: boolean;
                        hiddenGroup: string | null;
                        autoDisplayEnemyInfo?: boolean | undefined;
                        randomSpawnGroupKey?: string | null | undefined;
                        randomSpawnGroupPackKey?: string | null | undefined;
                        randomType?: string | number | undefined;
                        weight?: number | undefined;
                        dontBlockWave?: boolean | undefined;
                        isValid?: boolean | undefined;
                        extraMeta?: null | undefined;
                    }[];
                    m_randomActionGroups?: null | undefined;
                    m_actionWithRandomSpawn?: null | undefined;
                    m_validActionPackKeys?: null | undefined;
                }[];
            }> | null;
            predefines: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null;
            excludeCharIdList: null;
            randomSeed: number;
            extraRoutes?: any[] | undefined;
            hardPredefines?: {
                characterInsts: any[];
                tokenInsts: {
                    direction: string | number;
                    position: {
                        col: number;
                        row: number;
                    };
                    hidden: boolean;
                    alias: string | null;
                    inst: {
                        level: number;
                        phase: string | number;
                        characterKey: string;
                        favorPoint: number;
                        potentialRank: number;
                    };
                    skillIndex: number;
                    mainSkillLvl: number;
                    skinId: string | null;
                    uniEquipIds?: {
                        key: string;
                        level: number;
                    }[] | null | undefined;
                    tmplId?: string | null | undefined;
                    overrideSkillBlackboard?: {
                        key: string;
                        value: number | null;
                        valueStr?: string | null | undefined;
                    }[] | null | undefined;
                }[];
                characterCards: any[];
                tokenCards: any[];
            } | null | undefined;
            operaConfig?: string | null | undefined;
            runtimeData?: null | undefined;
        };
    } | null;
}>;
export type AttributesKeyFrame = z.infer<typeof AttributesKeyFrameZod>;
export type Blackboard = z.infer<typeof BlackboardZod>;
export type Base = z.infer<typeof BaseZod>;
export type CCStage = z.infer<typeof CCStageZod>;
export type Definition = z.infer<typeof DefinitionZod>;
export type Enemy = z.infer<typeof EnemyZod>;
export type EnemyAttributes = z.infer<typeof EnemyAttributesZod>;
export type EnemyData = z.infer<typeof EnemyDataZod>;
export type EnemySkills = z.infer<typeof EnemySkillsZod>;
export type EnemySpData = z.infer<typeof EnemySpDataZod>;
export type GameEvent = z.infer<typeof GameEventZod>;
export type GridRange = z.infer<typeof GridRangeZod>;
export type ManufactFormula = z.infer<typeof ManufactFormulaZod>;
export type WorkshopFormula = z.infer<typeof WorkshopFormulaZod>;
export type Item = z.infer<typeof ItemZod>;
export type LevelUpCost = z.infer<typeof LevelUpCostZod>;
export type LevelUpCostCond = z.infer<typeof LevelUpCostCondZod>;
export type Module = z.infer<typeof ModuleZod>;
export type Operator = z.infer<typeof OperatorZod>;
export type OperatorUnlockCond = z.infer<typeof OperatorUnlockCondZod>;
export type Paradox = z.infer<typeof ParadoxZod>;
export type RogueTheme = z.infer<typeof RogueThemeZod>;
export type RogueRelic = z.infer<typeof RogueRelicZod>;
export type RogueStage = z.infer<typeof RogueStageZod>;
export type RogueVariation = z.infer<typeof RogueVariationZod>;
export type SandboxAct = z.infer<typeof SandboxActZod>;
export type SandboxStage = z.infer<typeof SandboxStageZod>;
export type Skill = z.infer<typeof SkillZod>;
export type Skin = z.infer<typeof SkinZod>;
export type Stage = z.infer<typeof StageZod>;
export type StageData = z.infer<typeof StageDataZod>;
export type StageEffect = z.infer<typeof StageEffectZod>;
export type StageDefines = z.infer<typeof StageDefinesZod>;
export {};
