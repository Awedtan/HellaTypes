import * as z from 'zod';
declare const AttributesKeyFrameZod: z.ZodObject<{
    level: z.ZodNumber;
    data: z.ZodObject<{
        maxHp: z.ZodNumber;
        atk: z.ZodNumber;
        def: z.ZodNumber;
        magicResistance: z.ZodNumber;
        cost: z.ZodNumber;
        blockCnt: z.ZodNumber;
        moveSpeed: z.ZodNumber;
        attackSpeed: z.ZodNumber;
        baseAttackTime: z.ZodNumber;
        respawnTime: z.ZodNumber;
        hpRecoveryPerSec: z.ZodNumber;
        spRecoveryPerSec: z.ZodNumber;
        maxDeployCount: z.ZodNumber;
        maxDeckStackCnt: z.ZodNumber;
        tauntLevel: z.ZodNumber;
        massLevel: z.ZodNumber;
        baseForceLevel: z.ZodNumber;
        stunImmune: z.ZodBoolean;
        silenceImmune: z.ZodBoolean;
        sleepImmune: z.ZodBoolean;
        frozenImmune: z.ZodBoolean;
        levitateImmune: z.ZodBoolean;
    }, "strict", z.ZodTypeAny, {
        maxHp?: number;
        atk?: number;
        def?: number;
        magicResistance?: number;
        cost?: number;
        blockCnt?: number;
        moveSpeed?: number;
        attackSpeed?: number;
        baseAttackTime?: number;
        respawnTime?: number;
        hpRecoveryPerSec?: number;
        spRecoveryPerSec?: number;
        maxDeployCount?: number;
        maxDeckStackCnt?: number;
        tauntLevel?: number;
        massLevel?: number;
        baseForceLevel?: number;
        stunImmune?: boolean;
        silenceImmune?: boolean;
        sleepImmune?: boolean;
        frozenImmune?: boolean;
        levitateImmune?: boolean;
    }, {
        maxHp?: number;
        atk?: number;
        def?: number;
        magicResistance?: number;
        cost?: number;
        blockCnt?: number;
        moveSpeed?: number;
        attackSpeed?: number;
        baseAttackTime?: number;
        respawnTime?: number;
        hpRecoveryPerSec?: number;
        spRecoveryPerSec?: number;
        maxDeployCount?: number;
        maxDeckStackCnt?: number;
        tauntLevel?: number;
        massLevel?: number;
        baseForceLevel?: number;
        stunImmune?: boolean;
        silenceImmune?: boolean;
        sleepImmune?: boolean;
        frozenImmune?: boolean;
        levitateImmune?: boolean;
    }>;
}, "strict", z.ZodTypeAny, {
    level?: number;
    data?: {
        maxHp?: number;
        atk?: number;
        def?: number;
        magicResistance?: number;
        cost?: number;
        blockCnt?: number;
        moveSpeed?: number;
        attackSpeed?: number;
        baseAttackTime?: number;
        respawnTime?: number;
        hpRecoveryPerSec?: number;
        spRecoveryPerSec?: number;
        maxDeployCount?: number;
        maxDeckStackCnt?: number;
        tauntLevel?: number;
        massLevel?: number;
        baseForceLevel?: number;
        stunImmune?: boolean;
        silenceImmune?: boolean;
        sleepImmune?: boolean;
        frozenImmune?: boolean;
        levitateImmune?: boolean;
    };
}, {
    level?: number;
    data?: {
        maxHp?: number;
        atk?: number;
        def?: number;
        magicResistance?: number;
        cost?: number;
        blockCnt?: number;
        moveSpeed?: number;
        attackSpeed?: number;
        baseAttackTime?: number;
        respawnTime?: number;
        hpRecoveryPerSec?: number;
        spRecoveryPerSec?: number;
        maxDeployCount?: number;
        maxDeckStackCnt?: number;
        tauntLevel?: number;
        massLevel?: number;
        baseForceLevel?: number;
        stunImmune?: boolean;
        silenceImmune?: boolean;
        sleepImmune?: boolean;
        frozenImmune?: boolean;
        levitateImmune?: boolean;
    };
}>;
declare const BlackboardZod: z.ZodObject<{
    key: z.ZodString;
    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
}, "strict", z.ZodTypeAny, {
    key?: string;
    value?: number;
    valueStr?: string;
}, {
    key?: string;
    value?: number;
    valueStr?: string;
}>;
declare const EnemyAttributesZod: z.ZodObject<{
    maxHp: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: number;
    }, {
        m_defined?: boolean;
        m_value?: number;
    }>;
    atk: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: number;
    }, {
        m_defined?: boolean;
        m_value?: number;
    }>;
    def: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: number;
    }, {
        m_defined?: boolean;
        m_value?: number;
    }>;
    magicResistance: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: number;
    }, {
        m_defined?: boolean;
        m_value?: number;
    }>;
    cost: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: number;
    }, {
        m_defined?: boolean;
        m_value?: number;
    }>;
    blockCnt: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: number;
    }, {
        m_defined?: boolean;
        m_value?: number;
    }>;
    moveSpeed: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: number;
    }, {
        m_defined?: boolean;
        m_value?: number;
    }>;
    attackSpeed: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: number;
    }, {
        m_defined?: boolean;
        m_value?: number;
    }>;
    baseAttackTime: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: number;
    }, {
        m_defined?: boolean;
        m_value?: number;
    }>;
    respawnTime: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: number;
    }, {
        m_defined?: boolean;
        m_value?: number;
    }>;
    hpRecoveryPerSec: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: number;
    }, {
        m_defined?: boolean;
        m_value?: number;
    }>;
    spRecoveryPerSec: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: number;
    }, {
        m_defined?: boolean;
        m_value?: number;
    }>;
    maxDeployCount: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: number;
    }, {
        m_defined?: boolean;
        m_value?: number;
    }>;
    massLevel: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: number;
    }, {
        m_defined?: boolean;
        m_value?: number;
    }>;
    baseForceLevel: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: number;
    }, {
        m_defined?: boolean;
        m_value?: number;
    }>;
    tauntLevel: z.ZodUnion<[z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: number;
    }, {
        m_defined?: boolean;
        m_value?: number;
    }>, z.ZodUndefined]>;
    epDamageResistance: z.ZodUnion<[z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: number;
    }, {
        m_defined?: boolean;
        m_value?: number;
    }>, z.ZodUndefined]>;
    epResistance: z.ZodUnion<[z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: number;
    }, {
        m_defined?: boolean;
        m_value?: number;
    }>, z.ZodUndefined]>;
    stunImmune: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodBoolean;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: boolean;
    }, {
        m_defined?: boolean;
        m_value?: boolean;
    }>;
    silenceImmune: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodBoolean;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: boolean;
    }, {
        m_defined?: boolean;
        m_value?: boolean;
    }>;
    sleepImmune: z.ZodUnion<[z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodBoolean;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: boolean;
    }, {
        m_defined?: boolean;
        m_value?: boolean;
    }>, z.ZodUndefined]>;
    frozenImmune: z.ZodUnion<[z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodBoolean;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: boolean;
    }, {
        m_defined?: boolean;
        m_value?: boolean;
    }>, z.ZodUndefined]>;
    levitateImmune: z.ZodUnion<[z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodBoolean;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: boolean;
    }, {
        m_defined?: boolean;
        m_value?: boolean;
    }>, z.ZodUndefined]>;
}, "strict", z.ZodTypeAny, {
    maxHp?: {
        m_defined?: boolean;
        m_value?: number;
    };
    atk?: {
        m_defined?: boolean;
        m_value?: number;
    };
    def?: {
        m_defined?: boolean;
        m_value?: number;
    };
    magicResistance?: {
        m_defined?: boolean;
        m_value?: number;
    };
    cost?: {
        m_defined?: boolean;
        m_value?: number;
    };
    blockCnt?: {
        m_defined?: boolean;
        m_value?: number;
    };
    moveSpeed?: {
        m_defined?: boolean;
        m_value?: number;
    };
    attackSpeed?: {
        m_defined?: boolean;
        m_value?: number;
    };
    baseAttackTime?: {
        m_defined?: boolean;
        m_value?: number;
    };
    respawnTime?: {
        m_defined?: boolean;
        m_value?: number;
    };
    hpRecoveryPerSec?: {
        m_defined?: boolean;
        m_value?: number;
    };
    spRecoveryPerSec?: {
        m_defined?: boolean;
        m_value?: number;
    };
    maxDeployCount?: {
        m_defined?: boolean;
        m_value?: number;
    };
    massLevel?: {
        m_defined?: boolean;
        m_value?: number;
    };
    baseForceLevel?: {
        m_defined?: boolean;
        m_value?: number;
    };
    tauntLevel?: {
        m_defined?: boolean;
        m_value?: number;
    };
    epDamageResistance?: {
        m_defined?: boolean;
        m_value?: number;
    };
    epResistance?: {
        m_defined?: boolean;
        m_value?: number;
    };
    stunImmune?: {
        m_defined?: boolean;
        m_value?: boolean;
    };
    silenceImmune?: {
        m_defined?: boolean;
        m_value?: boolean;
    };
    sleepImmune?: {
        m_defined?: boolean;
        m_value?: boolean;
    };
    frozenImmune?: {
        m_defined?: boolean;
        m_value?: boolean;
    };
    levitateImmune?: {
        m_defined?: boolean;
        m_value?: boolean;
    };
}, {
    maxHp?: {
        m_defined?: boolean;
        m_value?: number;
    };
    atk?: {
        m_defined?: boolean;
        m_value?: number;
    };
    def?: {
        m_defined?: boolean;
        m_value?: number;
    };
    magicResistance?: {
        m_defined?: boolean;
        m_value?: number;
    };
    cost?: {
        m_defined?: boolean;
        m_value?: number;
    };
    blockCnt?: {
        m_defined?: boolean;
        m_value?: number;
    };
    moveSpeed?: {
        m_defined?: boolean;
        m_value?: number;
    };
    attackSpeed?: {
        m_defined?: boolean;
        m_value?: number;
    };
    baseAttackTime?: {
        m_defined?: boolean;
        m_value?: number;
    };
    respawnTime?: {
        m_defined?: boolean;
        m_value?: number;
    };
    hpRecoveryPerSec?: {
        m_defined?: boolean;
        m_value?: number;
    };
    spRecoveryPerSec?: {
        m_defined?: boolean;
        m_value?: number;
    };
    maxDeployCount?: {
        m_defined?: boolean;
        m_value?: number;
    };
    massLevel?: {
        m_defined?: boolean;
        m_value?: number;
    };
    baseForceLevel?: {
        m_defined?: boolean;
        m_value?: number;
    };
    tauntLevel?: {
        m_defined?: boolean;
        m_value?: number;
    };
    epDamageResistance?: {
        m_defined?: boolean;
        m_value?: number;
    };
    epResistance?: {
        m_defined?: boolean;
        m_value?: number;
    };
    stunImmune?: {
        m_defined?: boolean;
        m_value?: boolean;
    };
    silenceImmune?: {
        m_defined?: boolean;
        m_value?: boolean;
    };
    sleepImmune?: {
        m_defined?: boolean;
        m_value?: boolean;
    };
    frozenImmune?: {
        m_defined?: boolean;
        m_value?: boolean;
    };
    levitateImmune?: {
        m_defined?: boolean;
        m_value?: boolean;
    };
}>;
declare const EnemySkillsZod: z.ZodObject<{
    prefabKey: z.ZodString;
    priority: z.ZodNumber;
    cooldown: z.ZodNumber;
    initCooldown: z.ZodNumber;
    spCost: z.ZodNumber;
    blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
        key: z.ZodString;
        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
    }, "strict", z.ZodTypeAny, {
        key?: string;
        value?: number;
        valueStr?: string;
    }, {
        key?: string;
        value?: number;
        valueStr?: string;
    }>, "many">, z.ZodNull]>;
}, "strict", z.ZodTypeAny, {
    prefabKey?: string;
    priority?: number;
    cooldown?: number;
    initCooldown?: number;
    spCost?: number;
    blackboard?: {
        key?: string;
        value?: number;
        valueStr?: string;
    }[];
}, {
    prefabKey?: string;
    priority?: number;
    cooldown?: number;
    initCooldown?: number;
    spCost?: number;
    blackboard?: {
        key?: string;
        value?: number;
        valueStr?: string;
    }[];
}>;
declare const EnemySpDataZod: z.ZodObject<{
    spType: z.ZodString;
    maxSp: z.ZodNumber;
    initSp: z.ZodNumber;
    increment: z.ZodNumber;
}, "strict", z.ZodTypeAny, {
    spType?: string;
    maxSp?: number;
    initSp?: number;
    increment?: number;
}, {
    spType?: string;
    maxSp?: number;
    initSp?: number;
    increment?: number;
}>;
declare const EnemyDataZod: z.ZodObject<{
    name: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: string;
    }, {
        m_defined?: boolean;
        m_value?: string;
    }>;
    description: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: string;
    }, {
        m_defined?: boolean;
        m_value?: string;
    }>;
    prefabKey: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: string;
    }, {
        m_defined?: boolean;
        m_value?: string;
    }>;
    attributes: z.ZodObject<{
        maxHp: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined?: boolean;
            m_value?: number;
        }, {
            m_defined?: boolean;
            m_value?: number;
        }>;
        atk: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined?: boolean;
            m_value?: number;
        }, {
            m_defined?: boolean;
            m_value?: number;
        }>;
        def: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined?: boolean;
            m_value?: number;
        }, {
            m_defined?: boolean;
            m_value?: number;
        }>;
        magicResistance: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined?: boolean;
            m_value?: number;
        }, {
            m_defined?: boolean;
            m_value?: number;
        }>;
        cost: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined?: boolean;
            m_value?: number;
        }, {
            m_defined?: boolean;
            m_value?: number;
        }>;
        blockCnt: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined?: boolean;
            m_value?: number;
        }, {
            m_defined?: boolean;
            m_value?: number;
        }>;
        moveSpeed: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined?: boolean;
            m_value?: number;
        }, {
            m_defined?: boolean;
            m_value?: number;
        }>;
        attackSpeed: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined?: boolean;
            m_value?: number;
        }, {
            m_defined?: boolean;
            m_value?: number;
        }>;
        baseAttackTime: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined?: boolean;
            m_value?: number;
        }, {
            m_defined?: boolean;
            m_value?: number;
        }>;
        respawnTime: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined?: boolean;
            m_value?: number;
        }, {
            m_defined?: boolean;
            m_value?: number;
        }>;
        hpRecoveryPerSec: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined?: boolean;
            m_value?: number;
        }, {
            m_defined?: boolean;
            m_value?: number;
        }>;
        spRecoveryPerSec: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined?: boolean;
            m_value?: number;
        }, {
            m_defined?: boolean;
            m_value?: number;
        }>;
        maxDeployCount: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined?: boolean;
            m_value?: number;
        }, {
            m_defined?: boolean;
            m_value?: number;
        }>;
        massLevel: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined?: boolean;
            m_value?: number;
        }, {
            m_defined?: boolean;
            m_value?: number;
        }>;
        baseForceLevel: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined?: boolean;
            m_value?: number;
        }, {
            m_defined?: boolean;
            m_value?: number;
        }>;
        tauntLevel: z.ZodUnion<[z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined?: boolean;
            m_value?: number;
        }, {
            m_defined?: boolean;
            m_value?: number;
        }>, z.ZodUndefined]>;
        epDamageResistance: z.ZodUnion<[z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined?: boolean;
            m_value?: number;
        }, {
            m_defined?: boolean;
            m_value?: number;
        }>, z.ZodUndefined]>;
        epResistance: z.ZodUnion<[z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            m_defined?: boolean;
            m_value?: number;
        }, {
            m_defined?: boolean;
            m_value?: number;
        }>, z.ZodUndefined]>;
        stunImmune: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodBoolean;
        }, "strict", z.ZodTypeAny, {
            m_defined?: boolean;
            m_value?: boolean;
        }, {
            m_defined?: boolean;
            m_value?: boolean;
        }>;
        silenceImmune: z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodBoolean;
        }, "strict", z.ZodTypeAny, {
            m_defined?: boolean;
            m_value?: boolean;
        }, {
            m_defined?: boolean;
            m_value?: boolean;
        }>;
        sleepImmune: z.ZodUnion<[z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodBoolean;
        }, "strict", z.ZodTypeAny, {
            m_defined?: boolean;
            m_value?: boolean;
        }, {
            m_defined?: boolean;
            m_value?: boolean;
        }>, z.ZodUndefined]>;
        frozenImmune: z.ZodUnion<[z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodBoolean;
        }, "strict", z.ZodTypeAny, {
            m_defined?: boolean;
            m_value?: boolean;
        }, {
            m_defined?: boolean;
            m_value?: boolean;
        }>, z.ZodUndefined]>;
        levitateImmune: z.ZodUnion<[z.ZodObject<{
            m_defined: z.ZodBoolean;
            m_value: z.ZodBoolean;
        }, "strict", z.ZodTypeAny, {
            m_defined?: boolean;
            m_value?: boolean;
        }, {
            m_defined?: boolean;
            m_value?: boolean;
        }>, z.ZodUndefined]>;
    }, "strict", z.ZodTypeAny, {
        maxHp?: {
            m_defined?: boolean;
            m_value?: number;
        };
        atk?: {
            m_defined?: boolean;
            m_value?: number;
        };
        def?: {
            m_defined?: boolean;
            m_value?: number;
        };
        magicResistance?: {
            m_defined?: boolean;
            m_value?: number;
        };
        cost?: {
            m_defined?: boolean;
            m_value?: number;
        };
        blockCnt?: {
            m_defined?: boolean;
            m_value?: number;
        };
        moveSpeed?: {
            m_defined?: boolean;
            m_value?: number;
        };
        attackSpeed?: {
            m_defined?: boolean;
            m_value?: number;
        };
        baseAttackTime?: {
            m_defined?: boolean;
            m_value?: number;
        };
        respawnTime?: {
            m_defined?: boolean;
            m_value?: number;
        };
        hpRecoveryPerSec?: {
            m_defined?: boolean;
            m_value?: number;
        };
        spRecoveryPerSec?: {
            m_defined?: boolean;
            m_value?: number;
        };
        maxDeployCount?: {
            m_defined?: boolean;
            m_value?: number;
        };
        massLevel?: {
            m_defined?: boolean;
            m_value?: number;
        };
        baseForceLevel?: {
            m_defined?: boolean;
            m_value?: number;
        };
        tauntLevel?: {
            m_defined?: boolean;
            m_value?: number;
        };
        epDamageResistance?: {
            m_defined?: boolean;
            m_value?: number;
        };
        epResistance?: {
            m_defined?: boolean;
            m_value?: number;
        };
        stunImmune?: {
            m_defined?: boolean;
            m_value?: boolean;
        };
        silenceImmune?: {
            m_defined?: boolean;
            m_value?: boolean;
        };
        sleepImmune?: {
            m_defined?: boolean;
            m_value?: boolean;
        };
        frozenImmune?: {
            m_defined?: boolean;
            m_value?: boolean;
        };
        levitateImmune?: {
            m_defined?: boolean;
            m_value?: boolean;
        };
    }, {
        maxHp?: {
            m_defined?: boolean;
            m_value?: number;
        };
        atk?: {
            m_defined?: boolean;
            m_value?: number;
        };
        def?: {
            m_defined?: boolean;
            m_value?: number;
        };
        magicResistance?: {
            m_defined?: boolean;
            m_value?: number;
        };
        cost?: {
            m_defined?: boolean;
            m_value?: number;
        };
        blockCnt?: {
            m_defined?: boolean;
            m_value?: number;
        };
        moveSpeed?: {
            m_defined?: boolean;
            m_value?: number;
        };
        attackSpeed?: {
            m_defined?: boolean;
            m_value?: number;
        };
        baseAttackTime?: {
            m_defined?: boolean;
            m_value?: number;
        };
        respawnTime?: {
            m_defined?: boolean;
            m_value?: number;
        };
        hpRecoveryPerSec?: {
            m_defined?: boolean;
            m_value?: number;
        };
        spRecoveryPerSec?: {
            m_defined?: boolean;
            m_value?: number;
        };
        maxDeployCount?: {
            m_defined?: boolean;
            m_value?: number;
        };
        massLevel?: {
            m_defined?: boolean;
            m_value?: number;
        };
        baseForceLevel?: {
            m_defined?: boolean;
            m_value?: number;
        };
        tauntLevel?: {
            m_defined?: boolean;
            m_value?: number;
        };
        epDamageResistance?: {
            m_defined?: boolean;
            m_value?: number;
        };
        epResistance?: {
            m_defined?: boolean;
            m_value?: number;
        };
        stunImmune?: {
            m_defined?: boolean;
            m_value?: boolean;
        };
        silenceImmune?: {
            m_defined?: boolean;
            m_value?: boolean;
        };
        sleepImmune?: {
            m_defined?: boolean;
            m_value?: boolean;
        };
        frozenImmune?: {
            m_defined?: boolean;
            m_value?: boolean;
        };
        levitateImmune?: {
            m_defined?: boolean;
            m_value?: boolean;
        };
    }>;
    applyWay: z.ZodUnion<[z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: string;
    }, {
        m_defined?: boolean;
        m_value?: string;
    }>, z.ZodUndefined]>;
    motion: z.ZodUnion<[z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: string;
    }, {
        m_defined?: boolean;
        m_value?: string;
    }>, z.ZodUndefined]>;
    enemyTags: z.ZodUnion<[z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: string[];
    }, {
        m_defined?: boolean;
        m_value?: string[];
    }>, z.ZodUndefined]>;
    lifePointReduce: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: number;
    }, {
        m_defined?: boolean;
        m_value?: number;
    }>;
    levelType: z.ZodUnion<[z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: string;
    }, {
        m_defined?: boolean;
        m_value?: string;
    }>, z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: number;
    }, {
        m_defined?: boolean;
        m_value?: number;
    }>, z.ZodUndefined]>;
    rangeRadius: z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: number;
    }, {
        m_defined?: boolean;
        m_value?: number;
    }>;
    numOfExtraDrops: z.ZodUnion<[z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: number;
    }, {
        m_defined?: boolean;
        m_value?: number;
    }>, z.ZodUndefined]>;
    viewRadius: z.ZodUnion<[z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: number;
    }, {
        m_defined?: boolean;
        m_value?: number;
    }>, z.ZodUndefined]>;
    notCountInTotal: z.ZodUnion<[z.ZodObject<{
        m_defined: z.ZodBoolean;
        m_value: z.ZodBoolean;
    }, "strict", z.ZodTypeAny, {
        m_defined?: boolean;
        m_value?: boolean;
    }, {
        m_defined?: boolean;
        m_value?: boolean;
    }>, z.ZodUndefined]>;
    talentBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
        key: z.ZodString;
        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
    }, "strict", z.ZodTypeAny, {
        key?: string;
        value?: number;
        valueStr?: string;
    }, {
        key?: string;
        value?: number;
        valueStr?: string;
    }>, "many">, z.ZodNull]>;
    skills: z.ZodUnion<[z.ZodArray<z.ZodObject<{
        prefabKey: z.ZodString;
        priority: z.ZodNumber;
        cooldown: z.ZodNumber;
        initCooldown: z.ZodNumber;
        spCost: z.ZodNumber;
        blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
            valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            key?: string;
            value?: number;
            valueStr?: string;
        }, {
            key?: string;
            value?: number;
            valueStr?: string;
        }>, "many">, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        prefabKey?: string;
        priority?: number;
        cooldown?: number;
        initCooldown?: number;
        spCost?: number;
        blackboard?: {
            key?: string;
            value?: number;
            valueStr?: string;
        }[];
    }, {
        prefabKey?: string;
        priority?: number;
        cooldown?: number;
        initCooldown?: number;
        spCost?: number;
        blackboard?: {
            key?: string;
            value?: number;
            valueStr?: string;
        }[];
    }>, "many">, z.ZodNull]>;
    spData: z.ZodUnion<[z.ZodObject<{
        spType: z.ZodString;
        maxSp: z.ZodNumber;
        initSp: z.ZodNumber;
        increment: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        spType?: string;
        maxSp?: number;
        initSp?: number;
        increment?: number;
    }, {
        spType?: string;
        maxSp?: number;
        initSp?: number;
        increment?: number;
    }>, z.ZodNull]>;
}, "strict", z.ZodTypeAny, {
    name?: {
        m_defined?: boolean;
        m_value?: string;
    };
    description?: {
        m_defined?: boolean;
        m_value?: string;
    };
    prefabKey?: {
        m_defined?: boolean;
        m_value?: string;
    };
    attributes?: {
        maxHp?: {
            m_defined?: boolean;
            m_value?: number;
        };
        atk?: {
            m_defined?: boolean;
            m_value?: number;
        };
        def?: {
            m_defined?: boolean;
            m_value?: number;
        };
        magicResistance?: {
            m_defined?: boolean;
            m_value?: number;
        };
        cost?: {
            m_defined?: boolean;
            m_value?: number;
        };
        blockCnt?: {
            m_defined?: boolean;
            m_value?: number;
        };
        moveSpeed?: {
            m_defined?: boolean;
            m_value?: number;
        };
        attackSpeed?: {
            m_defined?: boolean;
            m_value?: number;
        };
        baseAttackTime?: {
            m_defined?: boolean;
            m_value?: number;
        };
        respawnTime?: {
            m_defined?: boolean;
            m_value?: number;
        };
        hpRecoveryPerSec?: {
            m_defined?: boolean;
            m_value?: number;
        };
        spRecoveryPerSec?: {
            m_defined?: boolean;
            m_value?: number;
        };
        maxDeployCount?: {
            m_defined?: boolean;
            m_value?: number;
        };
        massLevel?: {
            m_defined?: boolean;
            m_value?: number;
        };
        baseForceLevel?: {
            m_defined?: boolean;
            m_value?: number;
        };
        tauntLevel?: {
            m_defined?: boolean;
            m_value?: number;
        };
        epDamageResistance?: {
            m_defined?: boolean;
            m_value?: number;
        };
        epResistance?: {
            m_defined?: boolean;
            m_value?: number;
        };
        stunImmune?: {
            m_defined?: boolean;
            m_value?: boolean;
        };
        silenceImmune?: {
            m_defined?: boolean;
            m_value?: boolean;
        };
        sleepImmune?: {
            m_defined?: boolean;
            m_value?: boolean;
        };
        frozenImmune?: {
            m_defined?: boolean;
            m_value?: boolean;
        };
        levitateImmune?: {
            m_defined?: boolean;
            m_value?: boolean;
        };
    };
    applyWay?: {
        m_defined?: boolean;
        m_value?: string;
    };
    motion?: {
        m_defined?: boolean;
        m_value?: string;
    };
    enemyTags?: {
        m_defined?: boolean;
        m_value?: string[];
    };
    lifePointReduce?: {
        m_defined?: boolean;
        m_value?: number;
    };
    levelType?: {
        m_defined?: boolean;
        m_value?: string;
    } | {
        m_defined?: boolean;
        m_value?: number;
    };
    rangeRadius?: {
        m_defined?: boolean;
        m_value?: number;
    };
    numOfExtraDrops?: {
        m_defined?: boolean;
        m_value?: number;
    };
    viewRadius?: {
        m_defined?: boolean;
        m_value?: number;
    };
    notCountInTotal?: {
        m_defined?: boolean;
        m_value?: boolean;
    };
    talentBlackboard?: {
        key?: string;
        value?: number;
        valueStr?: string;
    }[];
    skills?: {
        prefabKey?: string;
        priority?: number;
        cooldown?: number;
        initCooldown?: number;
        spCost?: number;
        blackboard?: {
            key?: string;
            value?: number;
            valueStr?: string;
        }[];
    }[];
    spData?: {
        spType?: string;
        maxSp?: number;
        initSp?: number;
        increment?: number;
    };
}, {
    name?: {
        m_defined?: boolean;
        m_value?: string;
    };
    description?: {
        m_defined?: boolean;
        m_value?: string;
    };
    prefabKey?: {
        m_defined?: boolean;
        m_value?: string;
    };
    attributes?: {
        maxHp?: {
            m_defined?: boolean;
            m_value?: number;
        };
        atk?: {
            m_defined?: boolean;
            m_value?: number;
        };
        def?: {
            m_defined?: boolean;
            m_value?: number;
        };
        magicResistance?: {
            m_defined?: boolean;
            m_value?: number;
        };
        cost?: {
            m_defined?: boolean;
            m_value?: number;
        };
        blockCnt?: {
            m_defined?: boolean;
            m_value?: number;
        };
        moveSpeed?: {
            m_defined?: boolean;
            m_value?: number;
        };
        attackSpeed?: {
            m_defined?: boolean;
            m_value?: number;
        };
        baseAttackTime?: {
            m_defined?: boolean;
            m_value?: number;
        };
        respawnTime?: {
            m_defined?: boolean;
            m_value?: number;
        };
        hpRecoveryPerSec?: {
            m_defined?: boolean;
            m_value?: number;
        };
        spRecoveryPerSec?: {
            m_defined?: boolean;
            m_value?: number;
        };
        maxDeployCount?: {
            m_defined?: boolean;
            m_value?: number;
        };
        massLevel?: {
            m_defined?: boolean;
            m_value?: number;
        };
        baseForceLevel?: {
            m_defined?: boolean;
            m_value?: number;
        };
        tauntLevel?: {
            m_defined?: boolean;
            m_value?: number;
        };
        epDamageResistance?: {
            m_defined?: boolean;
            m_value?: number;
        };
        epResistance?: {
            m_defined?: boolean;
            m_value?: number;
        };
        stunImmune?: {
            m_defined?: boolean;
            m_value?: boolean;
        };
        silenceImmune?: {
            m_defined?: boolean;
            m_value?: boolean;
        };
        sleepImmune?: {
            m_defined?: boolean;
            m_value?: boolean;
        };
        frozenImmune?: {
            m_defined?: boolean;
            m_value?: boolean;
        };
        levitateImmune?: {
            m_defined?: boolean;
            m_value?: boolean;
        };
    };
    applyWay?: {
        m_defined?: boolean;
        m_value?: string;
    };
    motion?: {
        m_defined?: boolean;
        m_value?: string;
    };
    enemyTags?: {
        m_defined?: boolean;
        m_value?: string[];
    };
    lifePointReduce?: {
        m_defined?: boolean;
        m_value?: number;
    };
    levelType?: {
        m_defined?: boolean;
        m_value?: string;
    } | {
        m_defined?: boolean;
        m_value?: number;
    };
    rangeRadius?: {
        m_defined?: boolean;
        m_value?: number;
    };
    numOfExtraDrops?: {
        m_defined?: boolean;
        m_value?: number;
    };
    viewRadius?: {
        m_defined?: boolean;
        m_value?: number;
    };
    notCountInTotal?: {
        m_defined?: boolean;
        m_value?: boolean;
    };
    talentBlackboard?: {
        key?: string;
        value?: number;
        valueStr?: string;
    }[];
    skills?: {
        prefabKey?: string;
        priority?: number;
        cooldown?: number;
        initCooldown?: number;
        spCost?: number;
        blackboard?: {
            key?: string;
            value?: number;
            valueStr?: string;
        }[];
    }[];
    spData?: {
        spType?: string;
        maxSp?: number;
        initSp?: number;
        increment?: number;
    };
}>;
declare const LevelUpCostZod: z.ZodObject<{
    id: z.ZodString;
    count: z.ZodNumber;
    type: z.ZodString;
}, "strict", z.ZodTypeAny, {
    id?: string;
    count?: number;
    type?: string;
}, {
    id?: string;
    count?: number;
    type?: string;
}>;
declare const ManufactFormulaZod: z.ZodObject<{
    formulaId: z.ZodString;
    itemId: z.ZodString;
    count: z.ZodNumber;
    weight: z.ZodNumber;
    costPoint: z.ZodNumber;
    formulaType: z.ZodString;
    buffType: z.ZodString;
    costs: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        count: z.ZodNumber;
        type: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        id?: string;
        count?: number;
        type?: string;
    }, {
        id?: string;
        count?: number;
        type?: string;
    }>, "many">;
    requireRooms: z.ZodArray<z.ZodObject<{
        roomId: z.ZodString;
        roomLevel: z.ZodNumber;
        roomCount: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        roomId?: string;
        roomLevel?: number;
        roomCount?: number;
    }, {
        roomId?: string;
        roomLevel?: number;
        roomCount?: number;
    }>, "many">;
    requireStages: z.ZodArray<z.ZodObject<{
        stageId: z.ZodString;
        rank: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        stageId?: string;
        rank?: number;
    }, {
        stageId?: string;
        rank?: number;
    }>, "many">;
}, "strict", z.ZodTypeAny, {
    formulaId?: string;
    itemId?: string;
    count?: number;
    weight?: number;
    costPoint?: number;
    formulaType?: string;
    buffType?: string;
    costs?: {
        id?: string;
        count?: number;
        type?: string;
    }[];
    requireRooms?: {
        roomId?: string;
        roomLevel?: number;
        roomCount?: number;
    }[];
    requireStages?: {
        stageId?: string;
        rank?: number;
    }[];
}, {
    formulaId?: string;
    itemId?: string;
    count?: number;
    weight?: number;
    costPoint?: number;
    formulaType?: string;
    buffType?: string;
    costs?: {
        id?: string;
        count?: number;
        type?: string;
    }[];
    requireRooms?: {
        roomId?: string;
        roomLevel?: number;
        roomCount?: number;
    }[];
    requireStages?: {
        stageId?: string;
        rank?: number;
    }[];
}>;
declare const WorkshopFormulaZod: z.ZodObject<{
    sortId: z.ZodNumber;
    formulaId: z.ZodString;
    rarity: z.ZodNumber;
    itemId: z.ZodString;
    count: z.ZodNumber;
    goldCost: z.ZodNumber;
    apCost: z.ZodNumber;
    formulaType: z.ZodString;
    buffType: z.ZodString;
    extraOutcomeRate: z.ZodNumber;
    extraOutcomeGroup: z.ZodArray<z.ZodObject<{
        weight: z.ZodNumber;
        itemId: z.ZodString;
        itemCount: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        weight?: number;
        itemId?: string;
        itemCount?: number;
    }, {
        weight?: number;
        itemId?: string;
        itemCount?: number;
    }>, "many">;
    costs: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        count: z.ZodNumber;
        type: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        id?: string;
        count?: number;
        type?: string;
    }, {
        id?: string;
        count?: number;
        type?: string;
    }>, "many">;
    requireRooms: z.ZodArray<z.ZodObject<{
        roomId: z.ZodString;
        roomLevel: z.ZodNumber;
        roomCount: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        roomId?: string;
        roomLevel?: number;
        roomCount?: number;
    }, {
        roomId?: string;
        roomLevel?: number;
        roomCount?: number;
    }>, "many">;
    requireStages: z.ZodArray<z.ZodObject<{
        stageId: z.ZodString;
        rank: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        stageId?: string;
        rank?: number;
    }, {
        stageId?: string;
        rank?: number;
    }>, "many">;
}, "strict", z.ZodTypeAny, {
    sortId?: number;
    formulaId?: string;
    rarity?: number;
    itemId?: string;
    count?: number;
    goldCost?: number;
    apCost?: number;
    formulaType?: string;
    buffType?: string;
    extraOutcomeRate?: number;
    extraOutcomeGroup?: {
        weight?: number;
        itemId?: string;
        itemCount?: number;
    }[];
    costs?: {
        id?: string;
        count?: number;
        type?: string;
    }[];
    requireRooms?: {
        roomId?: string;
        roomLevel?: number;
        roomCount?: number;
    }[];
    requireStages?: {
        stageId?: string;
        rank?: number;
    }[];
}, {
    sortId?: number;
    formulaId?: string;
    rarity?: number;
    itemId?: string;
    count?: number;
    goldCost?: number;
    apCost?: number;
    formulaType?: string;
    buffType?: string;
    extraOutcomeRate?: number;
    extraOutcomeGroup?: {
        weight?: number;
        itemId?: string;
        itemCount?: number;
    }[];
    costs?: {
        id?: string;
        count?: number;
        type?: string;
    }[];
    requireRooms?: {
        roomId?: string;
        roomLevel?: number;
        roomCount?: number;
    }[];
    requireStages?: {
        stageId?: string;
        rank?: number;
    }[];
}>;
declare const OperatorUnlockCondZod: z.ZodObject<{
    phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
    level: z.ZodNumber;
}, "strict", z.ZodTypeAny, {
    phase?: string | number;
    level?: number;
}, {
    phase?: string | number;
    level?: number;
}>;
declare const LevelUpCostCondZod: z.ZodObject<{
    unlockCond: z.ZodObject<{
        phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
        level: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        phase?: string | number;
        level?: number;
    }, {
        phase?: string | number;
        level?: number;
    }>;
    lvlUpTime: z.ZodNumber;
    levelUpCost: z.ZodUnion<[z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        count: z.ZodNumber;
        type: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        id?: string;
        count?: number;
        type?: string;
    }, {
        id?: string;
        count?: number;
        type?: string;
    }>, "many">, z.ZodNull]>;
}, "strict", z.ZodTypeAny, {
    unlockCond?: {
        phase?: string | number;
        level?: number;
    };
    lvlUpTime?: number;
    levelUpCost?: {
        id?: string;
        count?: number;
        type?: string;
    }[];
}, {
    unlockCond?: {
        phase?: string | number;
        level?: number;
    };
    lvlUpTime?: number;
    levelUpCost?: {
        id?: string;
        count?: number;
        type?: string;
    }[];
}>;
declare const StageDefinesZod: z.ZodObject<{
    characterInsts: z.ZodArray<z.ZodAny, "many">;
    tokenInsts: z.ZodArray<z.ZodObject<{
        position: z.ZodObject<{
            row: z.ZodNumber;
            col: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            row?: number;
            col?: number;
        }, {
            row?: number;
            col?: number;
        }>;
        direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
        hidden: z.ZodBoolean;
        alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            level: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            key?: string;
            level?: number;
        }, {
            key?: string;
            level?: number;
        }>, "many">, z.ZodNull, z.ZodUndefined]>;
        inst: z.ZodObject<{
            characterKey: z.ZodString;
            level: z.ZodNumber;
            phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            favorPoint: z.ZodNumber;
            potentialRank: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            characterKey?: string;
            level?: number;
            phase?: string | number;
            favorPoint?: number;
            potentialRank?: number;
        }, {
            characterKey?: string;
            level?: number;
            phase?: string | number;
            favorPoint?: number;
            potentialRank?: number;
        }>;
        skillIndex: z.ZodNumber;
        mainSkillLvl: z.ZodNumber;
        skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
            valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            key?: string;
            value?: number;
            valueStr?: string;
        }, {
            key?: string;
            value?: number;
            valueStr?: string;
        }>, "many">, z.ZodNull, z.ZodUndefined]>;
    }, "strict", z.ZodTypeAny, {
        position?: {
            row?: number;
            col?: number;
        };
        direction?: string | number;
        hidden?: boolean;
        alias?: string;
        uniEquipIds?: {
            key?: string;
            level?: number;
        }[];
        inst?: {
            characterKey?: string;
            level?: number;
            phase?: string | number;
            favorPoint?: number;
            potentialRank?: number;
        };
        skillIndex?: number;
        mainSkillLvl?: number;
        skinId?: string;
        tmplId?: string;
        overrideSkillBlackboard?: {
            key?: string;
            value?: number;
            valueStr?: string;
        }[];
    }, {
        position?: {
            row?: number;
            col?: number;
        };
        direction?: string | number;
        hidden?: boolean;
        alias?: string;
        uniEquipIds?: {
            key?: string;
            level?: number;
        }[];
        inst?: {
            characterKey?: string;
            level?: number;
            phase?: string | number;
            favorPoint?: number;
            potentialRank?: number;
        };
        skillIndex?: number;
        mainSkillLvl?: number;
        skinId?: string;
        tmplId?: string;
        overrideSkillBlackboard?: {
            key?: string;
            value?: number;
            valueStr?: string;
        }[];
    }>, "many">;
    characterCards: z.ZodArray<z.ZodAny, "many">;
    tokenCards: z.ZodArray<z.ZodAny, "many">;
}, "strict", z.ZodTypeAny, {
    characterInsts?: any[];
    tokenInsts?: {
        position?: {
            row?: number;
            col?: number;
        };
        direction?: string | number;
        hidden?: boolean;
        alias?: string;
        uniEquipIds?: {
            key?: string;
            level?: number;
        }[];
        inst?: {
            characterKey?: string;
            level?: number;
            phase?: string | number;
            favorPoint?: number;
            potentialRank?: number;
        };
        skillIndex?: number;
        mainSkillLvl?: number;
        skinId?: string;
        tmplId?: string;
        overrideSkillBlackboard?: {
            key?: string;
            value?: number;
            valueStr?: string;
        }[];
    }[];
    characterCards?: any[];
    tokenCards?: any[];
}, {
    characterInsts?: any[];
    tokenInsts?: {
        position?: {
            row?: number;
            col?: number;
        };
        direction?: string | number;
        hidden?: boolean;
        alias?: string;
        uniEquipIds?: {
            key?: string;
            level?: number;
        }[];
        inst?: {
            characterKey?: string;
            level?: number;
            phase?: string | number;
            favorPoint?: number;
            potentialRank?: number;
        };
        skillIndex?: number;
        mainSkillLvl?: number;
        skinId?: string;
        tmplId?: string;
        overrideSkillBlackboard?: {
            key?: string;
            value?: number;
            valueStr?: string;
        }[];
    }[];
    characterCards?: any[];
    tokenCards?: any[];
}>;
declare const StageEffectZod: z.ZodObject<{
    key: z.ZodString;
    offset: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        z: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        x?: number;
        y?: number;
        z?: number;
    }, {
        x?: number;
        y?: number;
        z?: number;
    }>;
    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
}, "strict", z.ZodTypeAny, {
    key?: string;
    offset?: {
        x?: number;
        y?: number;
        z?: number;
    };
    direction?: string | number;
}, {
    key?: string;
    offset?: {
        x?: number;
        y?: number;
        z?: number;
    };
    direction?: string | number;
}>;
declare const StageDataZod: z.ZodObject<{
    options: z.ZodObject<{
        characterLimit: z.ZodNumber;
        maxLifePoint: z.ZodNumber;
        initialCost: z.ZodNumber;
        maxCost: z.ZodNumber;
        costIncreaseTime: z.ZodNumber;
        moveMultiplier: z.ZodNumber;
        steeringEnabled: z.ZodBoolean;
        isTrainingLevel: z.ZodBoolean;
        isHardTrainingLevel: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
        isPredefinedCardsSelectable: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
        maxPlayTime: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
        functionDisableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
        configBlackBoard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
            valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            key?: string;
            value?: number;
            valueStr?: string;
        }, {
            key?: string;
            value?: number;
            valueStr?: string;
        }>, "many">, z.ZodNull, z.ZodUndefined]>;
    }, "strict", z.ZodTypeAny, {
        characterLimit?: number;
        maxLifePoint?: number;
        initialCost?: number;
        maxCost?: number;
        costIncreaseTime?: number;
        moveMultiplier?: number;
        steeringEnabled?: boolean;
        isTrainingLevel?: boolean;
        isHardTrainingLevel?: boolean;
        isPredefinedCardsSelectable?: boolean;
        maxPlayTime?: number;
        functionDisableMask?: string | number;
        configBlackBoard?: {
            key?: string;
            value?: number;
            valueStr?: string;
        }[];
    }, {
        characterLimit?: number;
        maxLifePoint?: number;
        initialCost?: number;
        maxCost?: number;
        costIncreaseTime?: number;
        moveMultiplier?: number;
        steeringEnabled?: boolean;
        isTrainingLevel?: boolean;
        isHardTrainingLevel?: boolean;
        isPredefinedCardsSelectable?: boolean;
        maxPlayTime?: number;
        functionDisableMask?: string | number;
        configBlackBoard?: {
            key?: string;
            value?: number;
            valueStr?: string;
        }[];
    }>;
    levelId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    mapId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    bgmEvent: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    environmentSe: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    mapData: z.ZodObject<{
        map: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
        tiles: z.ZodArray<z.ZodObject<{
            tileKey: z.ZodString;
            heightType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            buildableType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            passableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            playerSideMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
            blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                value?: number;
                valueStr?: string;
            }, {
                key?: string;
                value?: number;
                valueStr?: string;
            }>, "many">, z.ZodNull]>;
            effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                offset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                    z: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x?: number;
                    y?: number;
                    z?: number;
                }, {
                    x?: number;
                    y?: number;
                    z?: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }, {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }>, "many">, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            tileKey?: string;
            heightType?: string | number;
            buildableType?: string | number;
            passableMask?: string | number;
            playerSideMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
        }, {
            tileKey?: string;
            heightType?: string | number;
            buildableType?: string | number;
            passableMask?: string | number;
            playerSideMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
        }>, "many">;
        blockEdges: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodNull]>;
        tags: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
        effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            offset: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
                z: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                x?: number;
                y?: number;
                z?: number;
            }, {
                x?: number;
                y?: number;
                z?: number;
            }>;
            direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
        }, "strict", z.ZodTypeAny, {
            key?: string;
            offset?: {
                x?: number;
                y?: number;
                z?: number;
            };
            direction?: string | number;
        }, {
            key?: string;
            offset?: {
                x?: number;
                y?: number;
                z?: number;
            };
            direction?: string | number;
        }>, "many">, z.ZodNull]>;
        layerRects: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
        width: z.ZodOptional<z.ZodNumber>;
        height: z.ZodOptional<z.ZodNumber>;
    }, "strict", z.ZodTypeAny, {
        map?: number[][];
        tiles?: {
            tileKey?: string;
            heightType?: string | number;
            buildableType?: string | number;
            passableMask?: string | number;
            playerSideMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
        }[];
        blockEdges?: any[];
        tags?: string[];
        effects?: {
            key?: string;
            offset?: {
                x?: number;
                y?: number;
                z?: number;
            };
            direction?: string | number;
        }[];
        layerRects?: null;
        width?: number;
        height?: number;
    }, {
        map?: number[][];
        tiles?: {
            tileKey?: string;
            heightType?: string | number;
            buildableType?: string | number;
            passableMask?: string | number;
            playerSideMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
        }[];
        blockEdges?: any[];
        tags?: string[];
        effects?: {
            key?: string;
            offset?: {
                x?: number;
                y?: number;
                z?: number;
            };
            direction?: string | number;
        }[];
        layerRects?: null;
        width?: number;
        height?: number;
    }>;
    tilesDisallowToLocate: z.ZodArray<z.ZodAny, "many">;
    runes: z.ZodUnion<[z.ZodArray<z.ZodObject<{
        difficultyMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
        key: z.ZodString;
        professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
        buildableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
        blackboard: z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
            valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            key?: string;
            value?: number;
            valueStr?: string;
        }, {
            key?: string;
            value?: number;
            valueStr?: string;
        }>, "many">;
    }, "strict", z.ZodTypeAny, {
        difficultyMask?: string | number;
        key?: string;
        professionMask?: string | number;
        buildableMask?: string | number;
        blackboard?: {
            key?: string;
            value?: number;
            valueStr?: string;
        }[];
    }, {
        difficultyMask?: string | number;
        key?: string;
        professionMask?: string | number;
        buildableMask?: string | number;
        blackboard?: {
            key?: string;
            value?: number;
            valueStr?: string;
        }[];
    }>, "many">, z.ZodNull]>;
    globalBuffs: z.ZodUnion<[z.ZodArray<z.ZodObject<{
        prefabKey: z.ZodString;
        blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
            valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            key?: string;
            value?: number;
            valueStr?: string;
        }, {
            key?: string;
            value?: number;
            valueStr?: string;
        }>, "many">, z.ZodNull]>;
        overrideCameraEffect: z.ZodNull;
        passProfessionMaskFlag: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
        professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
        useExtraData: z.ZodOptional<z.ZodBoolean>;
    }, "strict", z.ZodTypeAny, {
        prefabKey?: string;
        blackboard?: {
            key?: string;
            value?: number;
            valueStr?: string;
        }[];
        overrideCameraEffect?: null;
        passProfessionMaskFlag?: boolean;
        professionMask?: string | number;
        useExtraData?: boolean;
    }, {
        prefabKey?: string;
        blackboard?: {
            key?: string;
            value?: number;
            valueStr?: string;
        }[];
        overrideCameraEffect?: null;
        passProfessionMaskFlag?: boolean;
        professionMask?: string | number;
        useExtraData?: boolean;
    }>, "many">, z.ZodNull]>;
    routes: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        motionMode: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
        startPosition: z.ZodObject<{
            row: z.ZodNumber;
            col: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            row?: number;
            col?: number;
        }, {
            row?: number;
            col?: number;
        }>;
        endPosition: z.ZodObject<{
            row: z.ZodNumber;
            col: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            row?: number;
            col?: number;
        }, {
            row?: number;
            col?: number;
        }>;
        spawnRandomRange: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            x?: number;
            y?: number;
        }, {
            x?: number;
            y?: number;
        }>;
        spawnOffset: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            x?: number;
            y?: number;
        }, {
            x?: number;
            y?: number;
        }>;
        checkpoints: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            type: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            time: z.ZodNumber;
            position: z.ZodObject<{
                row: z.ZodNumber;
                col: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                row?: number;
                col?: number;
            }, {
                row?: number;
                col?: number;
            }>;
            reachOffset: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                x?: number;
                y?: number;
            }, {
                x?: number;
                y?: number;
            }>;
            randomizeReachOffset: z.ZodBoolean;
            reachDistance: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            type?: string | number;
            time?: number;
            position?: {
                row?: number;
                col?: number;
            };
            reachOffset?: {
                x?: number;
                y?: number;
            };
            randomizeReachOffset?: boolean;
            reachDistance?: number;
        }, {
            type?: string | number;
            time?: number;
            position?: {
                row?: number;
                col?: number;
            };
            reachOffset?: {
                x?: number;
                y?: number;
            };
            randomizeReachOffset?: boolean;
            reachDistance?: number;
        }>, "many">, z.ZodNull]>;
        allowDiagonalMove: z.ZodBoolean;
        visitEveryTileCenter: z.ZodBoolean;
        visitEveryNodeCenter: z.ZodBoolean;
        visitEveryCheckPoint: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
    }, "strict", z.ZodTypeAny, {
        motionMode?: string | number;
        startPosition?: {
            row?: number;
            col?: number;
        };
        endPosition?: {
            row?: number;
            col?: number;
        };
        spawnRandomRange?: {
            x?: number;
            y?: number;
        };
        spawnOffset?: {
            x?: number;
            y?: number;
        };
        checkpoints?: {
            type?: string | number;
            time?: number;
            position?: {
                row?: number;
                col?: number;
            };
            reachOffset?: {
                x?: number;
                y?: number;
            };
            randomizeReachOffset?: boolean;
            reachDistance?: number;
        }[];
        allowDiagonalMove?: boolean;
        visitEveryTileCenter?: boolean;
        visitEveryNodeCenter?: boolean;
        visitEveryCheckPoint?: boolean;
    }, {
        motionMode?: string | number;
        startPosition?: {
            row?: number;
            col?: number;
        };
        endPosition?: {
            row?: number;
            col?: number;
        };
        spawnRandomRange?: {
            x?: number;
            y?: number;
        };
        spawnOffset?: {
            x?: number;
            y?: number;
        };
        checkpoints?: {
            type?: string | number;
            time?: number;
            position?: {
                row?: number;
                col?: number;
            };
            reachOffset?: {
                x?: number;
                y?: number;
            };
            randomizeReachOffset?: boolean;
            reachDistance?: number;
        }[];
        allowDiagonalMove?: boolean;
        visitEveryTileCenter?: boolean;
        visitEveryNodeCenter?: boolean;
        visitEveryCheckPoint?: boolean;
    }>, z.ZodNull]>, "many">;
    extraRoutes: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodUndefined]>;
    enemies: z.ZodArray<z.ZodAny, "many">;
    enemyDbRefs: z.ZodArray<z.ZodObject<{
        useDb: z.ZodBoolean;
        id: z.ZodString;
        level: z.ZodNumber;
        overwrittenData: z.ZodUnion<[z.ZodObject<{
            name: z.ZodObject<{
                m_defined: z.ZodBoolean;
                m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                m_defined?: boolean;
                m_value?: string;
            }, {
                m_defined?: boolean;
                m_value?: string;
            }>;
            description: z.ZodObject<{
                m_defined: z.ZodBoolean;
                m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                m_defined?: boolean;
                m_value?: string;
            }, {
                m_defined?: boolean;
                m_value?: string;
            }>;
            prefabKey: z.ZodObject<{
                m_defined: z.ZodBoolean;
                m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                m_defined?: boolean;
                m_value?: string;
            }, {
                m_defined?: boolean;
                m_value?: string;
            }>;
            attributes: z.ZodObject<{
                maxHp: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>;
                atk: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>;
                def: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>;
                magicResistance: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>;
                cost: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>;
                blockCnt: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>;
                moveSpeed: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>;
                attackSpeed: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>;
                baseAttackTime: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>;
                respawnTime: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>;
                hpRecoveryPerSec: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>;
                spRecoveryPerSec: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>;
                maxDeployCount: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>;
                massLevel: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>;
                baseForceLevel: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>;
                tauntLevel: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>, z.ZodUndefined]>;
                epDamageResistance: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>, z.ZodUndefined]>;
                epResistance: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>, z.ZodUndefined]>;
                stunImmune: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodBoolean;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: boolean;
                }, {
                    m_defined?: boolean;
                    m_value?: boolean;
                }>;
                silenceImmune: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodBoolean;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: boolean;
                }, {
                    m_defined?: boolean;
                    m_value?: boolean;
                }>;
                sleepImmune: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodBoolean;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: boolean;
                }, {
                    m_defined?: boolean;
                    m_value?: boolean;
                }>, z.ZodUndefined]>;
                frozenImmune: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodBoolean;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: boolean;
                }, {
                    m_defined?: boolean;
                    m_value?: boolean;
                }>, z.ZodUndefined]>;
                levitateImmune: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodBoolean;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: boolean;
                }, {
                    m_defined?: boolean;
                    m_value?: boolean;
                }>, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                maxHp?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                atk?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                def?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                magicResistance?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                cost?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                blockCnt?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                moveSpeed?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                attackSpeed?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                baseAttackTime?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                respawnTime?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                hpRecoveryPerSec?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                spRecoveryPerSec?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                maxDeployCount?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                massLevel?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                baseForceLevel?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                tauntLevel?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                epDamageResistance?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                epResistance?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                stunImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                silenceImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                sleepImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                frozenImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                levitateImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
            }, {
                maxHp?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                atk?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                def?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                magicResistance?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                cost?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                blockCnt?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                moveSpeed?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                attackSpeed?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                baseAttackTime?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                respawnTime?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                hpRecoveryPerSec?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                spRecoveryPerSec?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                maxDeployCount?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                massLevel?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                baseForceLevel?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                tauntLevel?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                epDamageResistance?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                epResistance?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                stunImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                silenceImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                sleepImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                frozenImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                levitateImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
            }>;
            applyWay: z.ZodUnion<[z.ZodObject<{
                m_defined: z.ZodBoolean;
                m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                m_defined?: boolean;
                m_value?: string;
            }, {
                m_defined?: boolean;
                m_value?: string;
            }>, z.ZodUndefined]>;
            motion: z.ZodUnion<[z.ZodObject<{
                m_defined: z.ZodBoolean;
                m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                m_defined?: boolean;
                m_value?: string;
            }, {
                m_defined?: boolean;
                m_value?: string;
            }>, z.ZodUndefined]>;
            enemyTags: z.ZodUnion<[z.ZodObject<{
                m_defined: z.ZodBoolean;
                m_value: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                m_defined?: boolean;
                m_value?: string[];
            }, {
                m_defined?: boolean;
                m_value?: string[];
            }>, z.ZodUndefined]>;
            lifePointReduce: z.ZodObject<{
                m_defined: z.ZodBoolean;
                m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                m_defined?: boolean;
                m_value?: number;
            }, {
                m_defined?: boolean;
                m_value?: number;
            }>;
            levelType: z.ZodUnion<[z.ZodObject<{
                m_defined: z.ZodBoolean;
                m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                m_defined?: boolean;
                m_value?: string;
            }, {
                m_defined?: boolean;
                m_value?: string;
            }>, z.ZodObject<{
                m_defined: z.ZodBoolean;
                m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                m_defined?: boolean;
                m_value?: number;
            }, {
                m_defined?: boolean;
                m_value?: number;
            }>, z.ZodUndefined]>;
            rangeRadius: z.ZodObject<{
                m_defined: z.ZodBoolean;
                m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                m_defined?: boolean;
                m_value?: number;
            }, {
                m_defined?: boolean;
                m_value?: number;
            }>;
            numOfExtraDrops: z.ZodUnion<[z.ZodObject<{
                m_defined: z.ZodBoolean;
                m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                m_defined?: boolean;
                m_value?: number;
            }, {
                m_defined?: boolean;
                m_value?: number;
            }>, z.ZodUndefined]>;
            viewRadius: z.ZodUnion<[z.ZodObject<{
                m_defined: z.ZodBoolean;
                m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                m_defined?: boolean;
                m_value?: number;
            }, {
                m_defined?: boolean;
                m_value?: number;
            }>, z.ZodUndefined]>;
            notCountInTotal: z.ZodUnion<[z.ZodObject<{
                m_defined: z.ZodBoolean;
                m_value: z.ZodBoolean;
            }, "strict", z.ZodTypeAny, {
                m_defined?: boolean;
                m_value?: boolean;
            }, {
                m_defined?: boolean;
                m_value?: boolean;
            }>, z.ZodUndefined]>;
            talentBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                value?: number;
                valueStr?: string;
            }, {
                key?: string;
                value?: number;
                valueStr?: string;
            }>, "many">, z.ZodNull]>;
            skills: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                prefabKey: z.ZodString;
                priority: z.ZodNumber;
                cooldown: z.ZodNumber;
                initCooldown: z.ZodNumber;
                spCost: z.ZodNumber;
                blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                prefabKey?: string;
                priority?: number;
                cooldown?: number;
                initCooldown?: number;
                spCost?: number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }, {
                prefabKey?: string;
                priority?: number;
                cooldown?: number;
                initCooldown?: number;
                spCost?: number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }>, "many">, z.ZodNull]>;
            spData: z.ZodUnion<[z.ZodObject<{
                spType: z.ZodString;
                maxSp: z.ZodNumber;
                initSp: z.ZodNumber;
                increment: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                spType?: string;
                maxSp?: number;
                initSp?: number;
                increment?: number;
            }, {
                spType?: string;
                maxSp?: number;
                initSp?: number;
                increment?: number;
            }>, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            name?: {
                m_defined?: boolean;
                m_value?: string;
            };
            description?: {
                m_defined?: boolean;
                m_value?: string;
            };
            prefabKey?: {
                m_defined?: boolean;
                m_value?: string;
            };
            attributes?: {
                maxHp?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                atk?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                def?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                magicResistance?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                cost?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                blockCnt?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                moveSpeed?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                attackSpeed?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                baseAttackTime?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                respawnTime?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                hpRecoveryPerSec?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                spRecoveryPerSec?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                maxDeployCount?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                massLevel?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                baseForceLevel?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                tauntLevel?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                epDamageResistance?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                epResistance?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                stunImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                silenceImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                sleepImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                frozenImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                levitateImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
            };
            applyWay?: {
                m_defined?: boolean;
                m_value?: string;
            };
            motion?: {
                m_defined?: boolean;
                m_value?: string;
            };
            enemyTags?: {
                m_defined?: boolean;
                m_value?: string[];
            };
            lifePointReduce?: {
                m_defined?: boolean;
                m_value?: number;
            };
            levelType?: {
                m_defined?: boolean;
                m_value?: string;
            } | {
                m_defined?: boolean;
                m_value?: number;
            };
            rangeRadius?: {
                m_defined?: boolean;
                m_value?: number;
            };
            numOfExtraDrops?: {
                m_defined?: boolean;
                m_value?: number;
            };
            viewRadius?: {
                m_defined?: boolean;
                m_value?: number;
            };
            notCountInTotal?: {
                m_defined?: boolean;
                m_value?: boolean;
            };
            talentBlackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            skills?: {
                prefabKey?: string;
                priority?: number;
                cooldown?: number;
                initCooldown?: number;
                spCost?: number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            spData?: {
                spType?: string;
                maxSp?: number;
                initSp?: number;
                increment?: number;
            };
        }, {
            name?: {
                m_defined?: boolean;
                m_value?: string;
            };
            description?: {
                m_defined?: boolean;
                m_value?: string;
            };
            prefabKey?: {
                m_defined?: boolean;
                m_value?: string;
            };
            attributes?: {
                maxHp?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                atk?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                def?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                magicResistance?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                cost?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                blockCnt?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                moveSpeed?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                attackSpeed?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                baseAttackTime?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                respawnTime?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                hpRecoveryPerSec?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                spRecoveryPerSec?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                maxDeployCount?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                massLevel?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                baseForceLevel?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                tauntLevel?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                epDamageResistance?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                epResistance?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                stunImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                silenceImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                sleepImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                frozenImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                levitateImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
            };
            applyWay?: {
                m_defined?: boolean;
                m_value?: string;
            };
            motion?: {
                m_defined?: boolean;
                m_value?: string;
            };
            enemyTags?: {
                m_defined?: boolean;
                m_value?: string[];
            };
            lifePointReduce?: {
                m_defined?: boolean;
                m_value?: number;
            };
            levelType?: {
                m_defined?: boolean;
                m_value?: string;
            } | {
                m_defined?: boolean;
                m_value?: number;
            };
            rangeRadius?: {
                m_defined?: boolean;
                m_value?: number;
            };
            numOfExtraDrops?: {
                m_defined?: boolean;
                m_value?: number;
            };
            viewRadius?: {
                m_defined?: boolean;
                m_value?: number;
            };
            notCountInTotal?: {
                m_defined?: boolean;
                m_value?: boolean;
            };
            talentBlackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            skills?: {
                prefabKey?: string;
                priority?: number;
                cooldown?: number;
                initCooldown?: number;
                spCost?: number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            spData?: {
                spType?: string;
                maxSp?: number;
                initSp?: number;
                increment?: number;
            };
        }>, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        useDb?: boolean;
        id?: string;
        level?: number;
        overwrittenData?: {
            name?: {
                m_defined?: boolean;
                m_value?: string;
            };
            description?: {
                m_defined?: boolean;
                m_value?: string;
            };
            prefabKey?: {
                m_defined?: boolean;
                m_value?: string;
            };
            attributes?: {
                maxHp?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                atk?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                def?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                magicResistance?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                cost?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                blockCnt?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                moveSpeed?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                attackSpeed?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                baseAttackTime?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                respawnTime?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                hpRecoveryPerSec?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                spRecoveryPerSec?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                maxDeployCount?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                massLevel?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                baseForceLevel?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                tauntLevel?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                epDamageResistance?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                epResistance?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                stunImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                silenceImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                sleepImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                frozenImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                levitateImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
            };
            applyWay?: {
                m_defined?: boolean;
                m_value?: string;
            };
            motion?: {
                m_defined?: boolean;
                m_value?: string;
            };
            enemyTags?: {
                m_defined?: boolean;
                m_value?: string[];
            };
            lifePointReduce?: {
                m_defined?: boolean;
                m_value?: number;
            };
            levelType?: {
                m_defined?: boolean;
                m_value?: string;
            } | {
                m_defined?: boolean;
                m_value?: number;
            };
            rangeRadius?: {
                m_defined?: boolean;
                m_value?: number;
            };
            numOfExtraDrops?: {
                m_defined?: boolean;
                m_value?: number;
            };
            viewRadius?: {
                m_defined?: boolean;
                m_value?: number;
            };
            notCountInTotal?: {
                m_defined?: boolean;
                m_value?: boolean;
            };
            talentBlackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            skills?: {
                prefabKey?: string;
                priority?: number;
                cooldown?: number;
                initCooldown?: number;
                spCost?: number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            spData?: {
                spType?: string;
                maxSp?: number;
                initSp?: number;
                increment?: number;
            };
        };
    }, {
        useDb?: boolean;
        id?: string;
        level?: number;
        overwrittenData?: {
            name?: {
                m_defined?: boolean;
                m_value?: string;
            };
            description?: {
                m_defined?: boolean;
                m_value?: string;
            };
            prefabKey?: {
                m_defined?: boolean;
                m_value?: string;
            };
            attributes?: {
                maxHp?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                atk?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                def?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                magicResistance?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                cost?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                blockCnt?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                moveSpeed?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                attackSpeed?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                baseAttackTime?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                respawnTime?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                hpRecoveryPerSec?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                spRecoveryPerSec?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                maxDeployCount?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                massLevel?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                baseForceLevel?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                tauntLevel?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                epDamageResistance?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                epResistance?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                stunImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                silenceImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                sleepImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                frozenImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                levitateImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
            };
            applyWay?: {
                m_defined?: boolean;
                m_value?: string;
            };
            motion?: {
                m_defined?: boolean;
                m_value?: string;
            };
            enemyTags?: {
                m_defined?: boolean;
                m_value?: string[];
            };
            lifePointReduce?: {
                m_defined?: boolean;
                m_value?: number;
            };
            levelType?: {
                m_defined?: boolean;
                m_value?: string;
            } | {
                m_defined?: boolean;
                m_value?: number;
            };
            rangeRadius?: {
                m_defined?: boolean;
                m_value?: number;
            };
            numOfExtraDrops?: {
                m_defined?: boolean;
                m_value?: number;
            };
            viewRadius?: {
                m_defined?: boolean;
                m_value?: number;
            };
            notCountInTotal?: {
                m_defined?: boolean;
                m_value?: boolean;
            };
            talentBlackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            skills?: {
                prefabKey?: string;
                priority?: number;
                cooldown?: number;
                initCooldown?: number;
                spCost?: number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            spData?: {
                spType?: string;
                maxSp?: number;
                initSp?: number;
                increment?: number;
            };
        };
    }>, "many">;
    waves: z.ZodArray<z.ZodObject<{
        preDelay: z.ZodNumber;
        postDelay: z.ZodNumber;
        maxTimeWaitingForNextWave: z.ZodNumber;
        fragments: z.ZodArray<z.ZodObject<{
            preDelay: z.ZodNumber;
            actions: z.ZodArray<z.ZodObject<{
                actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                managedByScheduler: z.ZodBoolean;
                key: z.ZodString;
                count: z.ZodNumber;
                preDelay: z.ZodNumber;
                interval: z.ZodNumber;
                routeIndex: z.ZodNumber;
                blockFragment: z.ZodBoolean;
                autoPreviewRoute: z.ZodBoolean;
                autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                actionType?: string | number;
                managedByScheduler?: boolean;
                key?: string;
                count?: number;
                preDelay?: number;
                interval?: number;
                routeIndex?: number;
                blockFragment?: boolean;
                autoPreviewRoute?: boolean;
                autoDisplayEnemyInfo?: boolean;
                isUnharmfulAndAlwaysCountAsKilled?: boolean;
                hiddenGroup?: string;
                randomSpawnGroupKey?: string;
                randomSpawnGroupPackKey?: string;
                randomType?: string | number;
                weight?: number;
                dontBlockWave?: boolean;
                isValid?: boolean;
                extraMeta?: null;
            }, {
                actionType?: string | number;
                managedByScheduler?: boolean;
                key?: string;
                count?: number;
                preDelay?: number;
                interval?: number;
                routeIndex?: number;
                blockFragment?: boolean;
                autoPreviewRoute?: boolean;
                autoDisplayEnemyInfo?: boolean;
                isUnharmfulAndAlwaysCountAsKilled?: boolean;
                hiddenGroup?: string;
                randomSpawnGroupKey?: string;
                randomSpawnGroupPackKey?: string;
                randomType?: string | number;
                weight?: number;
                dontBlockWave?: boolean;
                isValid?: boolean;
                extraMeta?: null;
            }>, "many">;
            name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strict", z.ZodTypeAny, {
            preDelay?: number;
            actions?: {
                actionType?: string | number;
                managedByScheduler?: boolean;
                key?: string;
                count?: number;
                preDelay?: number;
                interval?: number;
                routeIndex?: number;
                blockFragment?: boolean;
                autoPreviewRoute?: boolean;
                autoDisplayEnemyInfo?: boolean;
                isUnharmfulAndAlwaysCountAsKilled?: boolean;
                hiddenGroup?: string;
                randomSpawnGroupKey?: string;
                randomSpawnGroupPackKey?: string;
                randomType?: string | number;
                weight?: number;
                dontBlockWave?: boolean;
                isValid?: boolean;
                extraMeta?: null;
            }[];
            name?: string;
        }, {
            preDelay?: number;
            actions?: {
                actionType?: string | number;
                managedByScheduler?: boolean;
                key?: string;
                count?: number;
                preDelay?: number;
                interval?: number;
                routeIndex?: number;
                blockFragment?: boolean;
                autoPreviewRoute?: boolean;
                autoDisplayEnemyInfo?: boolean;
                isUnharmfulAndAlwaysCountAsKilled?: boolean;
                hiddenGroup?: string;
                randomSpawnGroupKey?: string;
                randomSpawnGroupPackKey?: string;
                randomType?: string | number;
                weight?: number;
                dontBlockWave?: boolean;
                isValid?: boolean;
                extraMeta?: null;
            }[];
            name?: string;
        }>, "many">;
        advancedWaveTag: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strict", z.ZodTypeAny, {
        preDelay?: number;
        postDelay?: number;
        maxTimeWaitingForNextWave?: number;
        fragments?: {
            preDelay?: number;
            actions?: {
                actionType?: string | number;
                managedByScheduler?: boolean;
                key?: string;
                count?: number;
                preDelay?: number;
                interval?: number;
                routeIndex?: number;
                blockFragment?: boolean;
                autoPreviewRoute?: boolean;
                autoDisplayEnemyInfo?: boolean;
                isUnharmfulAndAlwaysCountAsKilled?: boolean;
                hiddenGroup?: string;
                randomSpawnGroupKey?: string;
                randomSpawnGroupPackKey?: string;
                randomType?: string | number;
                weight?: number;
                dontBlockWave?: boolean;
                isValid?: boolean;
                extraMeta?: null;
            }[];
            name?: string;
        }[];
        advancedWaveTag?: string;
        name?: string;
    }, {
        preDelay?: number;
        postDelay?: number;
        maxTimeWaitingForNextWave?: number;
        fragments?: {
            preDelay?: number;
            actions?: {
                actionType?: string | number;
                managedByScheduler?: boolean;
                key?: string;
                count?: number;
                preDelay?: number;
                interval?: number;
                routeIndex?: number;
                blockFragment?: boolean;
                autoPreviewRoute?: boolean;
                autoDisplayEnemyInfo?: boolean;
                isUnharmfulAndAlwaysCountAsKilled?: boolean;
                hiddenGroup?: string;
                randomSpawnGroupKey?: string;
                randomSpawnGroupPackKey?: string;
                randomType?: string | number;
                weight?: number;
                dontBlockWave?: boolean;
                isValid?: boolean;
                extraMeta?: null;
            }[];
            name?: string;
        }[];
        advancedWaveTag?: string;
        name?: string;
    }>, "many">;
    branches: z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodObject<{
        phases: z.ZodArray<z.ZodObject<{
            preDelay: z.ZodNumber;
            actions: z.ZodArray<z.ZodObject<{
                actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                managedByScheduler: z.ZodBoolean;
                key: z.ZodString;
                count: z.ZodNumber;
                preDelay: z.ZodNumber;
                interval: z.ZodNumber;
                routeIndex: z.ZodNumber;
                blockFragment: z.ZodBoolean;
                autoPreviewRoute: z.ZodBoolean;
                autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                actionType?: string | number;
                managedByScheduler?: boolean;
                key?: string;
                count?: number;
                preDelay?: number;
                interval?: number;
                routeIndex?: number;
                blockFragment?: boolean;
                autoPreviewRoute?: boolean;
                autoDisplayEnemyInfo?: boolean;
                isUnharmfulAndAlwaysCountAsKilled?: boolean;
                hiddenGroup?: string;
                randomSpawnGroupKey?: string;
                randomSpawnGroupPackKey?: string;
                randomType?: string | number;
                weight?: number;
                dontBlockWave?: boolean;
                isValid?: boolean;
                extraMeta?: null;
            }, {
                actionType?: string | number;
                managedByScheduler?: boolean;
                key?: string;
                count?: number;
                preDelay?: number;
                interval?: number;
                routeIndex?: number;
                blockFragment?: boolean;
                autoPreviewRoute?: boolean;
                autoDisplayEnemyInfo?: boolean;
                isUnharmfulAndAlwaysCountAsKilled?: boolean;
                hiddenGroup?: string;
                randomSpawnGroupKey?: string;
                randomSpawnGroupPackKey?: string;
                randomType?: string | number;
                weight?: number;
                dontBlockWave?: boolean;
                isValid?: boolean;
                extraMeta?: null;
            }>, "many">;
            m_randomActionGroups: z.ZodOptional<z.ZodNull>;
            m_actionWithRandomSpawn: z.ZodOptional<z.ZodNull>;
            m_validActionPackKeys: z.ZodOptional<z.ZodNull>;
        }, "strict", z.ZodTypeAny, {
            preDelay?: number;
            actions?: {
                actionType?: string | number;
                managedByScheduler?: boolean;
                key?: string;
                count?: number;
                preDelay?: number;
                interval?: number;
                routeIndex?: number;
                blockFragment?: boolean;
                autoPreviewRoute?: boolean;
                autoDisplayEnemyInfo?: boolean;
                isUnharmfulAndAlwaysCountAsKilled?: boolean;
                hiddenGroup?: string;
                randomSpawnGroupKey?: string;
                randomSpawnGroupPackKey?: string;
                randomType?: string | number;
                weight?: number;
                dontBlockWave?: boolean;
                isValid?: boolean;
                extraMeta?: null;
            }[];
            m_randomActionGroups?: null;
            m_actionWithRandomSpawn?: null;
            m_validActionPackKeys?: null;
        }, {
            preDelay?: number;
            actions?: {
                actionType?: string | number;
                managedByScheduler?: boolean;
                key?: string;
                count?: number;
                preDelay?: number;
                interval?: number;
                routeIndex?: number;
                blockFragment?: boolean;
                autoPreviewRoute?: boolean;
                autoDisplayEnemyInfo?: boolean;
                isUnharmfulAndAlwaysCountAsKilled?: boolean;
                hiddenGroup?: string;
                randomSpawnGroupKey?: string;
                randomSpawnGroupPackKey?: string;
                randomType?: string | number;
                weight?: number;
                dontBlockWave?: boolean;
                isValid?: boolean;
                extraMeta?: null;
            }[];
            m_randomActionGroups?: null;
            m_actionWithRandomSpawn?: null;
            m_validActionPackKeys?: null;
        }>, "many">;
    }, "strict", z.ZodTypeAny, {
        phases?: {
            preDelay?: number;
            actions?: {
                actionType?: string | number;
                managedByScheduler?: boolean;
                key?: string;
                count?: number;
                preDelay?: number;
                interval?: number;
                routeIndex?: number;
                blockFragment?: boolean;
                autoPreviewRoute?: boolean;
                autoDisplayEnemyInfo?: boolean;
                isUnharmfulAndAlwaysCountAsKilled?: boolean;
                hiddenGroup?: string;
                randomSpawnGroupKey?: string;
                randomSpawnGroupPackKey?: string;
                randomType?: string | number;
                weight?: number;
                dontBlockWave?: boolean;
                isValid?: boolean;
                extraMeta?: null;
            }[];
            m_randomActionGroups?: null;
            m_actionWithRandomSpawn?: null;
            m_validActionPackKeys?: null;
        }[];
    }, {
        phases?: {
            preDelay?: number;
            actions?: {
                actionType?: string | number;
                managedByScheduler?: boolean;
                key?: string;
                count?: number;
                preDelay?: number;
                interval?: number;
                routeIndex?: number;
                blockFragment?: boolean;
                autoPreviewRoute?: boolean;
                autoDisplayEnemyInfo?: boolean;
                isUnharmfulAndAlwaysCountAsKilled?: boolean;
                hiddenGroup?: string;
                randomSpawnGroupKey?: string;
                randomSpawnGroupPackKey?: string;
                randomType?: string | number;
                weight?: number;
                dontBlockWave?: boolean;
                isValid?: boolean;
                extraMeta?: null;
            }[];
            m_randomActionGroups?: null;
            m_actionWithRandomSpawn?: null;
            m_validActionPackKeys?: null;
        }[];
    }>>, z.ZodNull]>;
    predefines: z.ZodUnion<[z.ZodObject<{
        characterInsts: z.ZodArray<z.ZodAny, "many">;
        tokenInsts: z.ZodArray<z.ZodObject<{
            position: z.ZodObject<{
                row: z.ZodNumber;
                col: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                row?: number;
                col?: number;
            }, {
                row?: number;
                col?: number;
            }>;
            direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            hidden: z.ZodBoolean;
            alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                level: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                level?: number;
            }, {
                key?: string;
                level?: number;
            }>, "many">, z.ZodNull, z.ZodUndefined]>;
            inst: z.ZodObject<{
                characterKey: z.ZodString;
                level: z.ZodNumber;
                phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                favorPoint: z.ZodNumber;
                potentialRank: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                characterKey?: string;
                level?: number;
                phase?: string | number;
                favorPoint?: number;
                potentialRank?: number;
            }, {
                characterKey?: string;
                level?: number;
                phase?: string | number;
                favorPoint?: number;
                potentialRank?: number;
            }>;
            skillIndex: z.ZodNumber;
            mainSkillLvl: z.ZodNumber;
            skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                value?: number;
                valueStr?: string;
            }, {
                key?: string;
                value?: number;
                valueStr?: string;
            }>, "many">, z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            position?: {
                row?: number;
                col?: number;
            };
            direction?: string | number;
            hidden?: boolean;
            alias?: string;
            uniEquipIds?: {
                key?: string;
                level?: number;
            }[];
            inst?: {
                characterKey?: string;
                level?: number;
                phase?: string | number;
                favorPoint?: number;
                potentialRank?: number;
            };
            skillIndex?: number;
            mainSkillLvl?: number;
            skinId?: string;
            tmplId?: string;
            overrideSkillBlackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }, {
            position?: {
                row?: number;
                col?: number;
            };
            direction?: string | number;
            hidden?: boolean;
            alias?: string;
            uniEquipIds?: {
                key?: string;
                level?: number;
            }[];
            inst?: {
                characterKey?: string;
                level?: number;
                phase?: string | number;
                favorPoint?: number;
                potentialRank?: number;
            };
            skillIndex?: number;
            mainSkillLvl?: number;
            skinId?: string;
            tmplId?: string;
            overrideSkillBlackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }>, "many">;
        characterCards: z.ZodArray<z.ZodAny, "many">;
        tokenCards: z.ZodArray<z.ZodAny, "many">;
    }, "strict", z.ZodTypeAny, {
        characterInsts?: any[];
        tokenInsts?: {
            position?: {
                row?: number;
                col?: number;
            };
            direction?: string | number;
            hidden?: boolean;
            alias?: string;
            uniEquipIds?: {
                key?: string;
                level?: number;
            }[];
            inst?: {
                characterKey?: string;
                level?: number;
                phase?: string | number;
                favorPoint?: number;
                potentialRank?: number;
            };
            skillIndex?: number;
            mainSkillLvl?: number;
            skinId?: string;
            tmplId?: string;
            overrideSkillBlackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
        characterCards?: any[];
        tokenCards?: any[];
    }, {
        characterInsts?: any[];
        tokenInsts?: {
            position?: {
                row?: number;
                col?: number;
            };
            direction?: string | number;
            hidden?: boolean;
            alias?: string;
            uniEquipIds?: {
                key?: string;
                level?: number;
            }[];
            inst?: {
                characterKey?: string;
                level?: number;
                phase?: string | number;
                favorPoint?: number;
                potentialRank?: number;
            };
            skillIndex?: number;
            mainSkillLvl?: number;
            skinId?: string;
            tmplId?: string;
            overrideSkillBlackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
        characterCards?: any[];
        tokenCards?: any[];
    }>, z.ZodNull]>;
    hardPredefines: z.ZodUnion<[z.ZodObject<{
        characterInsts: z.ZodArray<z.ZodAny, "many">;
        tokenInsts: z.ZodArray<z.ZodObject<{
            position: z.ZodObject<{
                row: z.ZodNumber;
                col: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                row?: number;
                col?: number;
            }, {
                row?: number;
                col?: number;
            }>;
            direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            hidden: z.ZodBoolean;
            alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                level: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                level?: number;
            }, {
                key?: string;
                level?: number;
            }>, "many">, z.ZodNull, z.ZodUndefined]>;
            inst: z.ZodObject<{
                characterKey: z.ZodString;
                level: z.ZodNumber;
                phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                favorPoint: z.ZodNumber;
                potentialRank: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                characterKey?: string;
                level?: number;
                phase?: string | number;
                favorPoint?: number;
                potentialRank?: number;
            }, {
                characterKey?: string;
                level?: number;
                phase?: string | number;
                favorPoint?: number;
                potentialRank?: number;
            }>;
            skillIndex: z.ZodNumber;
            mainSkillLvl: z.ZodNumber;
            skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                value?: number;
                valueStr?: string;
            }, {
                key?: string;
                value?: number;
                valueStr?: string;
            }>, "many">, z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            position?: {
                row?: number;
                col?: number;
            };
            direction?: string | number;
            hidden?: boolean;
            alias?: string;
            uniEquipIds?: {
                key?: string;
                level?: number;
            }[];
            inst?: {
                characterKey?: string;
                level?: number;
                phase?: string | number;
                favorPoint?: number;
                potentialRank?: number;
            };
            skillIndex?: number;
            mainSkillLvl?: number;
            skinId?: string;
            tmplId?: string;
            overrideSkillBlackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }, {
            position?: {
                row?: number;
                col?: number;
            };
            direction?: string | number;
            hidden?: boolean;
            alias?: string;
            uniEquipIds?: {
                key?: string;
                level?: number;
            }[];
            inst?: {
                characterKey?: string;
                level?: number;
                phase?: string | number;
                favorPoint?: number;
                potentialRank?: number;
            };
            skillIndex?: number;
            mainSkillLvl?: number;
            skinId?: string;
            tmplId?: string;
            overrideSkillBlackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }>, "many">;
        characterCards: z.ZodArray<z.ZodAny, "many">;
        tokenCards: z.ZodArray<z.ZodAny, "many">;
    }, "strict", z.ZodTypeAny, {
        characterInsts?: any[];
        tokenInsts?: {
            position?: {
                row?: number;
                col?: number;
            };
            direction?: string | number;
            hidden?: boolean;
            alias?: string;
            uniEquipIds?: {
                key?: string;
                level?: number;
            }[];
            inst?: {
                characterKey?: string;
                level?: number;
                phase?: string | number;
                favorPoint?: number;
                potentialRank?: number;
            };
            skillIndex?: number;
            mainSkillLvl?: number;
            skinId?: string;
            tmplId?: string;
            overrideSkillBlackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
        characterCards?: any[];
        tokenCards?: any[];
    }, {
        characterInsts?: any[];
        tokenInsts?: {
            position?: {
                row?: number;
                col?: number;
            };
            direction?: string | number;
            hidden?: boolean;
            alias?: string;
            uniEquipIds?: {
                key?: string;
                level?: number;
            }[];
            inst?: {
                characterKey?: string;
                level?: number;
                phase?: string | number;
                favorPoint?: number;
                potentialRank?: number;
            };
            skillIndex?: number;
            mainSkillLvl?: number;
            skinId?: string;
            tmplId?: string;
            overrideSkillBlackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
        characterCards?: any[];
        tokenCards?: any[];
    }>, z.ZodNull, z.ZodUndefined]>;
    excludeCharIdList: z.ZodNull;
    randomSeed: z.ZodNumber;
    operaConfig: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
    runtimeData: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
}, "strict", z.ZodTypeAny, {
    options?: {
        characterLimit?: number;
        maxLifePoint?: number;
        initialCost?: number;
        maxCost?: number;
        costIncreaseTime?: number;
        moveMultiplier?: number;
        steeringEnabled?: boolean;
        isTrainingLevel?: boolean;
        isHardTrainingLevel?: boolean;
        isPredefinedCardsSelectable?: boolean;
        maxPlayTime?: number;
        functionDisableMask?: string | number;
        configBlackBoard?: {
            key?: string;
            value?: number;
            valueStr?: string;
        }[];
    };
    levelId?: string;
    mapId?: string;
    bgmEvent?: string;
    environmentSe?: string;
    mapData?: {
        map?: number[][];
        tiles?: {
            tileKey?: string;
            heightType?: string | number;
            buildableType?: string | number;
            passableMask?: string | number;
            playerSideMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
        }[];
        blockEdges?: any[];
        tags?: string[];
        effects?: {
            key?: string;
            offset?: {
                x?: number;
                y?: number;
                z?: number;
            };
            direction?: string | number;
        }[];
        layerRects?: null;
        width?: number;
        height?: number;
    };
    tilesDisallowToLocate?: any[];
    runes?: {
        difficultyMask?: string | number;
        key?: string;
        professionMask?: string | number;
        buildableMask?: string | number;
        blackboard?: {
            key?: string;
            value?: number;
            valueStr?: string;
        }[];
    }[];
    globalBuffs?: {
        prefabKey?: string;
        blackboard?: {
            key?: string;
            value?: number;
            valueStr?: string;
        }[];
        overrideCameraEffect?: null;
        passProfessionMaskFlag?: boolean;
        professionMask?: string | number;
        useExtraData?: boolean;
    }[];
    routes?: {
        motionMode?: string | number;
        startPosition?: {
            row?: number;
            col?: number;
        };
        endPosition?: {
            row?: number;
            col?: number;
        };
        spawnRandomRange?: {
            x?: number;
            y?: number;
        };
        spawnOffset?: {
            x?: number;
            y?: number;
        };
        checkpoints?: {
            type?: string | number;
            time?: number;
            position?: {
                row?: number;
                col?: number;
            };
            reachOffset?: {
                x?: number;
                y?: number;
            };
            randomizeReachOffset?: boolean;
            reachDistance?: number;
        }[];
        allowDiagonalMove?: boolean;
        visitEveryTileCenter?: boolean;
        visitEveryNodeCenter?: boolean;
        visitEveryCheckPoint?: boolean;
    }[];
    extraRoutes?: any[];
    enemies?: any[];
    enemyDbRefs?: {
        useDb?: boolean;
        id?: string;
        level?: number;
        overwrittenData?: {
            name?: {
                m_defined?: boolean;
                m_value?: string;
            };
            description?: {
                m_defined?: boolean;
                m_value?: string;
            };
            prefabKey?: {
                m_defined?: boolean;
                m_value?: string;
            };
            attributes?: {
                maxHp?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                atk?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                def?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                magicResistance?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                cost?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                blockCnt?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                moveSpeed?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                attackSpeed?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                baseAttackTime?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                respawnTime?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                hpRecoveryPerSec?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                spRecoveryPerSec?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                maxDeployCount?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                massLevel?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                baseForceLevel?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                tauntLevel?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                epDamageResistance?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                epResistance?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                stunImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                silenceImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                sleepImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                frozenImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                levitateImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
            };
            applyWay?: {
                m_defined?: boolean;
                m_value?: string;
            };
            motion?: {
                m_defined?: boolean;
                m_value?: string;
            };
            enemyTags?: {
                m_defined?: boolean;
                m_value?: string[];
            };
            lifePointReduce?: {
                m_defined?: boolean;
                m_value?: number;
            };
            levelType?: {
                m_defined?: boolean;
                m_value?: string;
            } | {
                m_defined?: boolean;
                m_value?: number;
            };
            rangeRadius?: {
                m_defined?: boolean;
                m_value?: number;
            };
            numOfExtraDrops?: {
                m_defined?: boolean;
                m_value?: number;
            };
            viewRadius?: {
                m_defined?: boolean;
                m_value?: number;
            };
            notCountInTotal?: {
                m_defined?: boolean;
                m_value?: boolean;
            };
            talentBlackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            skills?: {
                prefabKey?: string;
                priority?: number;
                cooldown?: number;
                initCooldown?: number;
                spCost?: number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            spData?: {
                spType?: string;
                maxSp?: number;
                initSp?: number;
                increment?: number;
            };
        };
    }[];
    waves?: {
        preDelay?: number;
        postDelay?: number;
        maxTimeWaitingForNextWave?: number;
        fragments?: {
            preDelay?: number;
            actions?: {
                actionType?: string | number;
                managedByScheduler?: boolean;
                key?: string;
                count?: number;
                preDelay?: number;
                interval?: number;
                routeIndex?: number;
                blockFragment?: boolean;
                autoPreviewRoute?: boolean;
                autoDisplayEnemyInfo?: boolean;
                isUnharmfulAndAlwaysCountAsKilled?: boolean;
                hiddenGroup?: string;
                randomSpawnGroupKey?: string;
                randomSpawnGroupPackKey?: string;
                randomType?: string | number;
                weight?: number;
                dontBlockWave?: boolean;
                isValid?: boolean;
                extraMeta?: null;
            }[];
            name?: string;
        }[];
        advancedWaveTag?: string;
        name?: string;
    }[];
    branches?: Record<string, {
        phases?: {
            preDelay?: number;
            actions?: {
                actionType?: string | number;
                managedByScheduler?: boolean;
                key?: string;
                count?: number;
                preDelay?: number;
                interval?: number;
                routeIndex?: number;
                blockFragment?: boolean;
                autoPreviewRoute?: boolean;
                autoDisplayEnemyInfo?: boolean;
                isUnharmfulAndAlwaysCountAsKilled?: boolean;
                hiddenGroup?: string;
                randomSpawnGroupKey?: string;
                randomSpawnGroupPackKey?: string;
                randomType?: string | number;
                weight?: number;
                dontBlockWave?: boolean;
                isValid?: boolean;
                extraMeta?: null;
            }[];
            m_randomActionGroups?: null;
            m_actionWithRandomSpawn?: null;
            m_validActionPackKeys?: null;
        }[];
    }>;
    predefines?: {
        characterInsts?: any[];
        tokenInsts?: {
            position?: {
                row?: number;
                col?: number;
            };
            direction?: string | number;
            hidden?: boolean;
            alias?: string;
            uniEquipIds?: {
                key?: string;
                level?: number;
            }[];
            inst?: {
                characterKey?: string;
                level?: number;
                phase?: string | number;
                favorPoint?: number;
                potentialRank?: number;
            };
            skillIndex?: number;
            mainSkillLvl?: number;
            skinId?: string;
            tmplId?: string;
            overrideSkillBlackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
        characterCards?: any[];
        tokenCards?: any[];
    };
    hardPredefines?: {
        characterInsts?: any[];
        tokenInsts?: {
            position?: {
                row?: number;
                col?: number;
            };
            direction?: string | number;
            hidden?: boolean;
            alias?: string;
            uniEquipIds?: {
                key?: string;
                level?: number;
            }[];
            inst?: {
                characterKey?: string;
                level?: number;
                phase?: string | number;
                favorPoint?: number;
                potentialRank?: number;
            };
            skillIndex?: number;
            mainSkillLvl?: number;
            skinId?: string;
            tmplId?: string;
            overrideSkillBlackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
        characterCards?: any[];
        tokenCards?: any[];
    };
    excludeCharIdList?: null;
    randomSeed?: number;
    operaConfig?: string;
    runtimeData?: null;
}, {
    options?: {
        characterLimit?: number;
        maxLifePoint?: number;
        initialCost?: number;
        maxCost?: number;
        costIncreaseTime?: number;
        moveMultiplier?: number;
        steeringEnabled?: boolean;
        isTrainingLevel?: boolean;
        isHardTrainingLevel?: boolean;
        isPredefinedCardsSelectable?: boolean;
        maxPlayTime?: number;
        functionDisableMask?: string | number;
        configBlackBoard?: {
            key?: string;
            value?: number;
            valueStr?: string;
        }[];
    };
    levelId?: string;
    mapId?: string;
    bgmEvent?: string;
    environmentSe?: string;
    mapData?: {
        map?: number[][];
        tiles?: {
            tileKey?: string;
            heightType?: string | number;
            buildableType?: string | number;
            passableMask?: string | number;
            playerSideMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
        }[];
        blockEdges?: any[];
        tags?: string[];
        effects?: {
            key?: string;
            offset?: {
                x?: number;
                y?: number;
                z?: number;
            };
            direction?: string | number;
        }[];
        layerRects?: null;
        width?: number;
        height?: number;
    };
    tilesDisallowToLocate?: any[];
    runes?: {
        difficultyMask?: string | number;
        key?: string;
        professionMask?: string | number;
        buildableMask?: string | number;
        blackboard?: {
            key?: string;
            value?: number;
            valueStr?: string;
        }[];
    }[];
    globalBuffs?: {
        prefabKey?: string;
        blackboard?: {
            key?: string;
            value?: number;
            valueStr?: string;
        }[];
        overrideCameraEffect?: null;
        passProfessionMaskFlag?: boolean;
        professionMask?: string | number;
        useExtraData?: boolean;
    }[];
    routes?: {
        motionMode?: string | number;
        startPosition?: {
            row?: number;
            col?: number;
        };
        endPosition?: {
            row?: number;
            col?: number;
        };
        spawnRandomRange?: {
            x?: number;
            y?: number;
        };
        spawnOffset?: {
            x?: number;
            y?: number;
        };
        checkpoints?: {
            type?: string | number;
            time?: number;
            position?: {
                row?: number;
                col?: number;
            };
            reachOffset?: {
                x?: number;
                y?: number;
            };
            randomizeReachOffset?: boolean;
            reachDistance?: number;
        }[];
        allowDiagonalMove?: boolean;
        visitEveryTileCenter?: boolean;
        visitEveryNodeCenter?: boolean;
        visitEveryCheckPoint?: boolean;
    }[];
    extraRoutes?: any[];
    enemies?: any[];
    enemyDbRefs?: {
        useDb?: boolean;
        id?: string;
        level?: number;
        overwrittenData?: {
            name?: {
                m_defined?: boolean;
                m_value?: string;
            };
            description?: {
                m_defined?: boolean;
                m_value?: string;
            };
            prefabKey?: {
                m_defined?: boolean;
                m_value?: string;
            };
            attributes?: {
                maxHp?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                atk?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                def?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                magicResistance?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                cost?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                blockCnt?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                moveSpeed?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                attackSpeed?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                baseAttackTime?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                respawnTime?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                hpRecoveryPerSec?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                spRecoveryPerSec?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                maxDeployCount?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                massLevel?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                baseForceLevel?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                tauntLevel?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                epDamageResistance?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                epResistance?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                stunImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                silenceImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                sleepImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                frozenImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                levitateImmune?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
            };
            applyWay?: {
                m_defined?: boolean;
                m_value?: string;
            };
            motion?: {
                m_defined?: boolean;
                m_value?: string;
            };
            enemyTags?: {
                m_defined?: boolean;
                m_value?: string[];
            };
            lifePointReduce?: {
                m_defined?: boolean;
                m_value?: number;
            };
            levelType?: {
                m_defined?: boolean;
                m_value?: string;
            } | {
                m_defined?: boolean;
                m_value?: number;
            };
            rangeRadius?: {
                m_defined?: boolean;
                m_value?: number;
            };
            numOfExtraDrops?: {
                m_defined?: boolean;
                m_value?: number;
            };
            viewRadius?: {
                m_defined?: boolean;
                m_value?: number;
            };
            notCountInTotal?: {
                m_defined?: boolean;
                m_value?: boolean;
            };
            talentBlackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            skills?: {
                prefabKey?: string;
                priority?: number;
                cooldown?: number;
                initCooldown?: number;
                spCost?: number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            spData?: {
                spType?: string;
                maxSp?: number;
                initSp?: number;
                increment?: number;
            };
        };
    }[];
    waves?: {
        preDelay?: number;
        postDelay?: number;
        maxTimeWaitingForNextWave?: number;
        fragments?: {
            preDelay?: number;
            actions?: {
                actionType?: string | number;
                managedByScheduler?: boolean;
                key?: string;
                count?: number;
                preDelay?: number;
                interval?: number;
                routeIndex?: number;
                blockFragment?: boolean;
                autoPreviewRoute?: boolean;
                autoDisplayEnemyInfo?: boolean;
                isUnharmfulAndAlwaysCountAsKilled?: boolean;
                hiddenGroup?: string;
                randomSpawnGroupKey?: string;
                randomSpawnGroupPackKey?: string;
                randomType?: string | number;
                weight?: number;
                dontBlockWave?: boolean;
                isValid?: boolean;
                extraMeta?: null;
            }[];
            name?: string;
        }[];
        advancedWaveTag?: string;
        name?: string;
    }[];
    branches?: Record<string, {
        phases?: {
            preDelay?: number;
            actions?: {
                actionType?: string | number;
                managedByScheduler?: boolean;
                key?: string;
                count?: number;
                preDelay?: number;
                interval?: number;
                routeIndex?: number;
                blockFragment?: boolean;
                autoPreviewRoute?: boolean;
                autoDisplayEnemyInfo?: boolean;
                isUnharmfulAndAlwaysCountAsKilled?: boolean;
                hiddenGroup?: string;
                randomSpawnGroupKey?: string;
                randomSpawnGroupPackKey?: string;
                randomType?: string | number;
                weight?: number;
                dontBlockWave?: boolean;
                isValid?: boolean;
                extraMeta?: null;
            }[];
            m_randomActionGroups?: null;
            m_actionWithRandomSpawn?: null;
            m_validActionPackKeys?: null;
        }[];
    }>;
    predefines?: {
        characterInsts?: any[];
        tokenInsts?: {
            position?: {
                row?: number;
                col?: number;
            };
            direction?: string | number;
            hidden?: boolean;
            alias?: string;
            uniEquipIds?: {
                key?: string;
                level?: number;
            }[];
            inst?: {
                characterKey?: string;
                level?: number;
                phase?: string | number;
                favorPoint?: number;
                potentialRank?: number;
            };
            skillIndex?: number;
            mainSkillLvl?: number;
            skinId?: string;
            tmplId?: string;
            overrideSkillBlackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
        characterCards?: any[];
        tokenCards?: any[];
    };
    hardPredefines?: {
        characterInsts?: any[];
        tokenInsts?: {
            position?: {
                row?: number;
                col?: number;
            };
            direction?: string | number;
            hidden?: boolean;
            alias?: string;
            uniEquipIds?: {
                key?: string;
                level?: number;
            }[];
            inst?: {
                characterKey?: string;
                level?: number;
                phase?: string | number;
                favorPoint?: number;
                potentialRank?: number;
            };
            skillIndex?: number;
            mainSkillLvl?: number;
            skinId?: string;
            tmplId?: string;
            overrideSkillBlackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
        characterCards?: any[];
        tokenCards?: any[];
    };
    excludeCharIdList?: null;
    randomSeed?: number;
    operaConfig?: string;
    runtimeData?: null;
}>;
declare const RogueRelicZod: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    description: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    usage: z.ZodString;
    obtainApproach: z.ZodString;
    iconId: z.ZodString;
    type: z.ZodString;
    subType: z.ZodString;
    rarity: z.ZodString;
    value: z.ZodNumber;
    sortId: z.ZodNumber;
    canSacrifice: z.ZodBoolean;
    unlockCondDesc: z.ZodUnion<[z.ZodString, z.ZodNull]>;
}, "strict", z.ZodTypeAny, {
    id?: string;
    name?: string;
    description?: string;
    usage?: string;
    obtainApproach?: string;
    iconId?: string;
    type?: string;
    subType?: string;
    rarity?: string;
    value?: number;
    sortId?: number;
    canSacrifice?: boolean;
    unlockCondDesc?: string;
}, {
    id?: string;
    name?: string;
    description?: string;
    usage?: string;
    obtainApproach?: string;
    iconId?: string;
    type?: string;
    subType?: string;
    rarity?: string;
    value?: number;
    sortId?: number;
    canSacrifice?: boolean;
    unlockCondDesc?: string;
}>;
declare const RogueStageZod: z.ZodObject<{
    excel: z.ZodObject<{
        id: z.ZodString;
        linkedStageId: z.ZodString;
        levelId: z.ZodString;
        code: z.ZodString;
        name: z.ZodString;
        loadingPicId: z.ZodString;
        description: z.ZodString;
        eliteDesc: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        isBoss: z.ZodNumber;
        isElite: z.ZodNumber;
        difficulty: z.ZodString;
        capsulePool: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        capsuleProb: z.ZodNumber;
        vutresProb: z.ZodArray<z.ZodNumber, "many">;
        boxProb: z.ZodArray<z.ZodNumber, "many">;
        specialNodeId: z.ZodNullable<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        id?: string;
        linkedStageId?: string;
        levelId?: string;
        code?: string;
        name?: string;
        loadingPicId?: string;
        description?: string;
        eliteDesc?: string;
        isBoss?: number;
        isElite?: number;
        difficulty?: string;
        capsulePool?: string;
        capsuleProb?: number;
        vutresProb?: number[];
        boxProb?: number[];
        specialNodeId?: string;
    }, {
        id?: string;
        linkedStageId?: string;
        levelId?: string;
        code?: string;
        name?: string;
        loadingPicId?: string;
        description?: string;
        eliteDesc?: string;
        isBoss?: number;
        isElite?: number;
        difficulty?: string;
        capsulePool?: string;
        capsuleProb?: number;
        vutresProb?: number[];
        boxProb?: number[];
        specialNodeId?: string;
    }>;
    levels: z.ZodObject<{
        options: z.ZodObject<{
            characterLimit: z.ZodNumber;
            maxLifePoint: z.ZodNumber;
            initialCost: z.ZodNumber;
            maxCost: z.ZodNumber;
            costIncreaseTime: z.ZodNumber;
            moveMultiplier: z.ZodNumber;
            steeringEnabled: z.ZodBoolean;
            isTrainingLevel: z.ZodBoolean;
            isHardTrainingLevel: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            isPredefinedCardsSelectable: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            maxPlayTime: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
            functionDisableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            configBlackBoard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                value?: number;
                valueStr?: string;
            }, {
                key?: string;
                value?: number;
                valueStr?: string;
            }>, "many">, z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }, {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }>;
        levelId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        mapId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        bgmEvent: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        environmentSe: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        mapData: z.ZodObject<{
            map: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
            tiles: z.ZodArray<z.ZodObject<{
                tileKey: z.ZodString;
                heightType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                buildableType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                passableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                playerSideMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull]>;
                effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    offset: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                        z: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        x?: number;
                        y?: number;
                        z?: number;
                    }, {
                        x?: number;
                        y?: number;
                        z?: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }, {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }>, "many">, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }, {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }>, "many">;
            blockEdges: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodNull]>;
            tags: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
            effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                offset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                    z: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x?: number;
                    y?: number;
                    z?: number;
                }, {
                    x?: number;
                    y?: number;
                    z?: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }, {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }>, "many">, z.ZodNull]>;
            layerRects: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
            width: z.ZodOptional<z.ZodNumber>;
            height: z.ZodOptional<z.ZodNumber>;
        }, "strict", z.ZodTypeAny, {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        }, {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        }>;
        tilesDisallowToLocate: z.ZodArray<z.ZodAny, "many">;
        runes: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            difficultyMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            key: z.ZodString;
            professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
            buildableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            blackboard: z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                value?: number;
                valueStr?: string;
            }, {
                key?: string;
                value?: number;
                valueStr?: string;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }, {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }>, "many">, z.ZodNull]>;
        globalBuffs: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            prefabKey: z.ZodString;
            blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                value?: number;
                valueStr?: string;
            }, {
                key?: string;
                value?: number;
                valueStr?: string;
            }>, "many">, z.ZodNull]>;
            overrideCameraEffect: z.ZodNull;
            passProfessionMaskFlag: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
            useExtraData: z.ZodOptional<z.ZodBoolean>;
        }, "strict", z.ZodTypeAny, {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }, {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }>, "many">, z.ZodNull]>;
        routes: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            motionMode: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            startPosition: z.ZodObject<{
                row: z.ZodNumber;
                col: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                row?: number;
                col?: number;
            }, {
                row?: number;
                col?: number;
            }>;
            endPosition: z.ZodObject<{
                row: z.ZodNumber;
                col: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                row?: number;
                col?: number;
            }, {
                row?: number;
                col?: number;
            }>;
            spawnRandomRange: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                x?: number;
                y?: number;
            }, {
                x?: number;
                y?: number;
            }>;
            spawnOffset: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                x?: number;
                y?: number;
            }, {
                x?: number;
                y?: number;
            }>;
            checkpoints: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                type: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                time: z.ZodNumber;
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    row?: number;
                    col?: number;
                }, {
                    row?: number;
                    col?: number;
                }>;
                reachOffset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x?: number;
                    y?: number;
                }, {
                    x?: number;
                    y?: number;
                }>;
                randomizeReachOffset: z.ZodBoolean;
                reachDistance: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }, {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }>, "many">, z.ZodNull]>;
            allowDiagonalMove: z.ZodBoolean;
            visitEveryTileCenter: z.ZodBoolean;
            visitEveryNodeCenter: z.ZodBoolean;
            visitEveryCheckPoint: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }, {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }>, z.ZodNull]>, "many">;
        extraRoutes: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodUndefined]>;
        enemies: z.ZodArray<z.ZodAny, "many">;
        enemyDbRefs: z.ZodArray<z.ZodObject<{
            useDb: z.ZodBoolean;
            id: z.ZodString;
            level: z.ZodNumber;
            overwrittenData: z.ZodUnion<[z.ZodObject<{
                name: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>;
                description: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>;
                prefabKey: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>;
                attributes: z.ZodObject<{
                    maxHp: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    atk: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    def: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    magicResistance: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    cost: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    blockCnt: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    moveSpeed: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    attackSpeed: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    baseAttackTime: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    respawnTime: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    hpRecoveryPerSec: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    spRecoveryPerSec: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    maxDeployCount: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    massLevel: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    baseForceLevel: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    tauntLevel: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    epDamageResistance: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    epResistance: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    stunImmune: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>;
                    silenceImmune: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>;
                    sleepImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>, z.ZodUndefined]>;
                    frozenImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>, z.ZodUndefined]>;
                    levitateImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                }, {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                }>;
                applyWay: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>, z.ZodUndefined]>;
                motion: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>, z.ZodUndefined]>;
                enemyTags: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string[];
                }, {
                    m_defined?: boolean;
                    m_value?: string[];
                }>, z.ZodUndefined]>;
                lifePointReduce: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>;
                levelType: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>, z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>, z.ZodUndefined]>;
                rangeRadius: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>;
                numOfExtraDrops: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>, z.ZodUndefined]>;
                viewRadius: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>, z.ZodUndefined]>;
                notCountInTotal: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodBoolean;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: boolean;
                }, {
                    m_defined?: boolean;
                    m_value?: boolean;
                }>, z.ZodUndefined]>;
                talentBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull]>;
                skills: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    prefabKey: z.ZodString;
                    priority: z.ZodNumber;
                    cooldown: z.ZodNumber;
                    initCooldown: z.ZodNumber;
                    spCost: z.ZodNumber;
                    blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }>, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }, {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }>, "many">, z.ZodNull]>;
                spData: z.ZodUnion<[z.ZodObject<{
                    spType: z.ZodString;
                    maxSp: z.ZodNumber;
                    initSp: z.ZodNumber;
                    increment: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                }, {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                }>, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            }, {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            }>, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }, {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }>, "many">;
        waves: z.ZodArray<z.ZodObject<{
            preDelay: z.ZodNumber;
            postDelay: z.ZodNumber;
            maxTimeWaitingForNextWave: z.ZodNumber;
            fragments: z.ZodArray<z.ZodObject<{
                preDelay: z.ZodNumber;
                actions: z.ZodArray<z.ZodObject<{
                    actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    managedByScheduler: z.ZodBoolean;
                    key: z.ZodString;
                    count: z.ZodNumber;
                    preDelay: z.ZodNumber;
                    interval: z.ZodNumber;
                    routeIndex: z.ZodNumber;
                    blockFragment: z.ZodBoolean;
                    autoPreviewRoute: z.ZodBoolean;
                    autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                    hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                    weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                    dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }, {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }>, "many">;
                name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strict", z.ZodTypeAny, {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }, {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }>, "many">;
            advancedWaveTag: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strict", z.ZodTypeAny, {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }, {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }>, "many">;
        branches: z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodObject<{
            phases: z.ZodArray<z.ZodObject<{
                preDelay: z.ZodNumber;
                actions: z.ZodArray<z.ZodObject<{
                    actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    managedByScheduler: z.ZodBoolean;
                    key: z.ZodString;
                    count: z.ZodNumber;
                    preDelay: z.ZodNumber;
                    interval: z.ZodNumber;
                    routeIndex: z.ZodNumber;
                    blockFragment: z.ZodBoolean;
                    autoPreviewRoute: z.ZodBoolean;
                    autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                    hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                    weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                    dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }, {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }>, "many">;
                m_randomActionGroups: z.ZodOptional<z.ZodNull>;
                m_actionWithRandomSpawn: z.ZodOptional<z.ZodNull>;
                m_validActionPackKeys: z.ZodOptional<z.ZodNull>;
            }, "strict", z.ZodTypeAny, {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }, {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }>>, z.ZodNull]>;
        predefines: z.ZodUnion<[z.ZodObject<{
            characterInsts: z.ZodArray<z.ZodAny, "many">;
            tokenInsts: z.ZodArray<z.ZodObject<{
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    row?: number;
                    col?: number;
                }, {
                    row?: number;
                    col?: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                hidden: z.ZodBoolean;
                alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    level: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    level?: number;
                }, {
                    key?: string;
                    level?: number;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
                inst: z.ZodObject<{
                    characterKey: z.ZodString;
                    level: z.ZodNumber;
                    phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    favorPoint: z.ZodNumber;
                    potentialRank: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                }, {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                }>;
                skillIndex: z.ZodNumber;
                mainSkillLvl: z.ZodNumber;
                skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }, {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }>, "many">;
            characterCards: z.ZodArray<z.ZodAny, "many">;
            tokenCards: z.ZodArray<z.ZodAny, "many">;
        }, "strict", z.ZodTypeAny, {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        }, {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        }>, z.ZodNull]>;
        hardPredefines: z.ZodUnion<[z.ZodObject<{
            characterInsts: z.ZodArray<z.ZodAny, "many">;
            tokenInsts: z.ZodArray<z.ZodObject<{
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    row?: number;
                    col?: number;
                }, {
                    row?: number;
                    col?: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                hidden: z.ZodBoolean;
                alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    level: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    level?: number;
                }, {
                    key?: string;
                    level?: number;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
                inst: z.ZodObject<{
                    characterKey: z.ZodString;
                    level: z.ZodNumber;
                    phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    favorPoint: z.ZodNumber;
                    potentialRank: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                }, {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                }>;
                skillIndex: z.ZodNumber;
                mainSkillLvl: z.ZodNumber;
                skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }, {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }>, "many">;
            characterCards: z.ZodArray<z.ZodAny, "many">;
            tokenCards: z.ZodArray<z.ZodAny, "many">;
        }, "strict", z.ZodTypeAny, {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        }, {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        }>, z.ZodNull, z.ZodUndefined]>;
        excludeCharIdList: z.ZodNull;
        randomSeed: z.ZodNumber;
        operaConfig: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        runtimeData: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
    }, "strict", z.ZodTypeAny, {
        options?: {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        };
        levelId?: string;
        mapId?: string;
        bgmEvent?: string;
        environmentSe?: string;
        mapData?: {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        };
        tilesDisallowToLocate?: any[];
        runes?: {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
        globalBuffs?: {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }[];
        routes?: {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }[];
        extraRoutes?: any[];
        enemies?: any[];
        enemyDbRefs?: {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }[];
        waves?: {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }[];
        branches?: Record<string, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }>;
        predefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        hardPredefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        excludeCharIdList?: null;
        randomSeed?: number;
        operaConfig?: string;
        runtimeData?: null;
    }, {
        options?: {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        };
        levelId?: string;
        mapId?: string;
        bgmEvent?: string;
        environmentSe?: string;
        mapData?: {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        };
        tilesDisallowToLocate?: any[];
        runes?: {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
        globalBuffs?: {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }[];
        routes?: {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }[];
        extraRoutes?: any[];
        enemies?: any[];
        enemyDbRefs?: {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }[];
        waves?: {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }[];
        branches?: Record<string, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }>;
        predefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        hardPredefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        excludeCharIdList?: null;
        randomSeed?: number;
        operaConfig?: string;
        runtimeData?: null;
    }>;
}, "strict", z.ZodTypeAny, {
    excel?: {
        id?: string;
        linkedStageId?: string;
        levelId?: string;
        code?: string;
        name?: string;
        loadingPicId?: string;
        description?: string;
        eliteDesc?: string;
        isBoss?: number;
        isElite?: number;
        difficulty?: string;
        capsulePool?: string;
        capsuleProb?: number;
        vutresProb?: number[];
        boxProb?: number[];
        specialNodeId?: string;
    };
    levels?: {
        options?: {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        };
        levelId?: string;
        mapId?: string;
        bgmEvent?: string;
        environmentSe?: string;
        mapData?: {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        };
        tilesDisallowToLocate?: any[];
        runes?: {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
        globalBuffs?: {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }[];
        routes?: {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }[];
        extraRoutes?: any[];
        enemies?: any[];
        enemyDbRefs?: {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }[];
        waves?: {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }[];
        branches?: Record<string, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }>;
        predefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        hardPredefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        excludeCharIdList?: null;
        randomSeed?: number;
        operaConfig?: string;
        runtimeData?: null;
    };
}, {
    excel?: {
        id?: string;
        linkedStageId?: string;
        levelId?: string;
        code?: string;
        name?: string;
        loadingPicId?: string;
        description?: string;
        eliteDesc?: string;
        isBoss?: number;
        isElite?: number;
        difficulty?: string;
        capsulePool?: string;
        capsuleProb?: number;
        vutresProb?: number[];
        boxProb?: number[];
        specialNodeId?: string;
    };
    levels?: {
        options?: {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        };
        levelId?: string;
        mapId?: string;
        bgmEvent?: string;
        environmentSe?: string;
        mapData?: {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        };
        tilesDisallowToLocate?: any[];
        runes?: {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
        globalBuffs?: {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }[];
        routes?: {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }[];
        extraRoutes?: any[];
        enemies?: any[];
        enemyDbRefs?: {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }[];
        waves?: {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }[];
        branches?: Record<string, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }>;
        predefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        hardPredefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        excludeCharIdList?: null;
        randomSeed?: number;
        operaConfig?: string;
        runtimeData?: null;
    };
}>;
declare const RogueVariationZod: z.ZodObject<{
    id: z.ZodString;
    type: z.ZodString;
    outerName: z.ZodString;
    innerName: z.ZodString;
    functionDesc: z.ZodString;
    desc: z.ZodString;
    iconId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    sound: z.ZodUnion<[z.ZodString, z.ZodNull]>;
}, "strict", z.ZodTypeAny, {
    id?: string;
    type?: string;
    outerName?: string;
    innerName?: string;
    functionDesc?: string;
    desc?: string;
    iconId?: string;
    sound?: string;
}, {
    id?: string;
    type?: string;
    outerName?: string;
    innerName?: string;
    functionDesc?: string;
    desc?: string;
    iconId?: string;
    sound?: string;
}>;
declare const SandboxStageZod: z.ZodObject<{
    excel: z.ZodObject<{
        stageId: z.ZodString;
        levelId: z.ZodString;
        code: z.ZodString;
        name: z.ZodString;
        loadingPicId: z.ZodString;
        description: z.ZodString;
        actionCost: z.ZodNumber;
        powerCost: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        stageId?: string;
        levelId?: string;
        code?: string;
        name?: string;
        loadingPicId?: string;
        description?: string;
        actionCost?: number;
        powerCost?: number;
    }, {
        stageId?: string;
        levelId?: string;
        code?: string;
        name?: string;
        loadingPicId?: string;
        description?: string;
        actionCost?: number;
        powerCost?: number;
    }>;
    levels: z.ZodObject<{
        options: z.ZodObject<{
            characterLimit: z.ZodNumber;
            maxLifePoint: z.ZodNumber;
            initialCost: z.ZodNumber;
            maxCost: z.ZodNumber;
            costIncreaseTime: z.ZodNumber;
            moveMultiplier: z.ZodNumber;
            steeringEnabled: z.ZodBoolean;
            isTrainingLevel: z.ZodBoolean;
            isHardTrainingLevel: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            isPredefinedCardsSelectable: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            maxPlayTime: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
            functionDisableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            configBlackBoard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                value?: number;
                valueStr?: string;
            }, {
                key?: string;
                value?: number;
                valueStr?: string;
            }>, "many">, z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }, {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }>;
        levelId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        mapId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        bgmEvent: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        environmentSe: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        mapData: z.ZodObject<{
            map: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
            tiles: z.ZodArray<z.ZodObject<{
                tileKey: z.ZodString;
                heightType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                buildableType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                passableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                playerSideMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull]>;
                effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    offset: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                        z: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        x?: number;
                        y?: number;
                        z?: number;
                    }, {
                        x?: number;
                        y?: number;
                        z?: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }, {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }>, "many">, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }, {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }>, "many">;
            blockEdges: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodNull]>;
            tags: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
            effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                offset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                    z: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x?: number;
                    y?: number;
                    z?: number;
                }, {
                    x?: number;
                    y?: number;
                    z?: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }, {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }>, "many">, z.ZodNull]>;
            layerRects: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
            width: z.ZodOptional<z.ZodNumber>;
            height: z.ZodOptional<z.ZodNumber>;
        }, "strict", z.ZodTypeAny, {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        }, {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        }>;
        tilesDisallowToLocate: z.ZodArray<z.ZodAny, "many">;
        runes: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            difficultyMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            key: z.ZodString;
            professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
            buildableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            blackboard: z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                value?: number;
                valueStr?: string;
            }, {
                key?: string;
                value?: number;
                valueStr?: string;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }, {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }>, "many">, z.ZodNull]>;
        globalBuffs: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            prefabKey: z.ZodString;
            blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                value?: number;
                valueStr?: string;
            }, {
                key?: string;
                value?: number;
                valueStr?: string;
            }>, "many">, z.ZodNull]>;
            overrideCameraEffect: z.ZodNull;
            passProfessionMaskFlag: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
            useExtraData: z.ZodOptional<z.ZodBoolean>;
        }, "strict", z.ZodTypeAny, {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }, {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }>, "many">, z.ZodNull]>;
        routes: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            motionMode: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            startPosition: z.ZodObject<{
                row: z.ZodNumber;
                col: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                row?: number;
                col?: number;
            }, {
                row?: number;
                col?: number;
            }>;
            endPosition: z.ZodObject<{
                row: z.ZodNumber;
                col: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                row?: number;
                col?: number;
            }, {
                row?: number;
                col?: number;
            }>;
            spawnRandomRange: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                x?: number;
                y?: number;
            }, {
                x?: number;
                y?: number;
            }>;
            spawnOffset: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                x?: number;
                y?: number;
            }, {
                x?: number;
                y?: number;
            }>;
            checkpoints: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                type: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                time: z.ZodNumber;
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    row?: number;
                    col?: number;
                }, {
                    row?: number;
                    col?: number;
                }>;
                reachOffset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x?: number;
                    y?: number;
                }, {
                    x?: number;
                    y?: number;
                }>;
                randomizeReachOffset: z.ZodBoolean;
                reachDistance: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }, {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }>, "many">, z.ZodNull]>;
            allowDiagonalMove: z.ZodBoolean;
            visitEveryTileCenter: z.ZodBoolean;
            visitEveryNodeCenter: z.ZodBoolean;
            visitEveryCheckPoint: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }, {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }>, z.ZodNull]>, "many">;
        extraRoutes: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodUndefined]>;
        enemies: z.ZodArray<z.ZodAny, "many">;
        enemyDbRefs: z.ZodArray<z.ZodObject<{
            useDb: z.ZodBoolean;
            id: z.ZodString;
            level: z.ZodNumber;
            overwrittenData: z.ZodUnion<[z.ZodObject<{
                name: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>;
                description: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>;
                prefabKey: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>;
                attributes: z.ZodObject<{
                    maxHp: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    atk: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    def: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    magicResistance: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    cost: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    blockCnt: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    moveSpeed: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    attackSpeed: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    baseAttackTime: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    respawnTime: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    hpRecoveryPerSec: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    spRecoveryPerSec: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    maxDeployCount: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    massLevel: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    baseForceLevel: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    tauntLevel: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    epDamageResistance: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    epResistance: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    stunImmune: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>;
                    silenceImmune: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>;
                    sleepImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>, z.ZodUndefined]>;
                    frozenImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>, z.ZodUndefined]>;
                    levitateImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                }, {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                }>;
                applyWay: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>, z.ZodUndefined]>;
                motion: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>, z.ZodUndefined]>;
                enemyTags: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string[];
                }, {
                    m_defined?: boolean;
                    m_value?: string[];
                }>, z.ZodUndefined]>;
                lifePointReduce: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>;
                levelType: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>, z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>, z.ZodUndefined]>;
                rangeRadius: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>;
                numOfExtraDrops: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>, z.ZodUndefined]>;
                viewRadius: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>, z.ZodUndefined]>;
                notCountInTotal: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodBoolean;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: boolean;
                }, {
                    m_defined?: boolean;
                    m_value?: boolean;
                }>, z.ZodUndefined]>;
                talentBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull]>;
                skills: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    prefabKey: z.ZodString;
                    priority: z.ZodNumber;
                    cooldown: z.ZodNumber;
                    initCooldown: z.ZodNumber;
                    spCost: z.ZodNumber;
                    blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }>, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }, {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }>, "many">, z.ZodNull]>;
                spData: z.ZodUnion<[z.ZodObject<{
                    spType: z.ZodString;
                    maxSp: z.ZodNumber;
                    initSp: z.ZodNumber;
                    increment: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                }, {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                }>, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            }, {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            }>, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }, {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }>, "many">;
        waves: z.ZodArray<z.ZodObject<{
            preDelay: z.ZodNumber;
            postDelay: z.ZodNumber;
            maxTimeWaitingForNextWave: z.ZodNumber;
            fragments: z.ZodArray<z.ZodObject<{
                preDelay: z.ZodNumber;
                actions: z.ZodArray<z.ZodObject<{
                    actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    managedByScheduler: z.ZodBoolean;
                    key: z.ZodString;
                    count: z.ZodNumber;
                    preDelay: z.ZodNumber;
                    interval: z.ZodNumber;
                    routeIndex: z.ZodNumber;
                    blockFragment: z.ZodBoolean;
                    autoPreviewRoute: z.ZodBoolean;
                    autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                    hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                    weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                    dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }, {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }>, "many">;
                name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strict", z.ZodTypeAny, {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }, {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }>, "many">;
            advancedWaveTag: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strict", z.ZodTypeAny, {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }, {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }>, "many">;
        branches: z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodObject<{
            phases: z.ZodArray<z.ZodObject<{
                preDelay: z.ZodNumber;
                actions: z.ZodArray<z.ZodObject<{
                    actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    managedByScheduler: z.ZodBoolean;
                    key: z.ZodString;
                    count: z.ZodNumber;
                    preDelay: z.ZodNumber;
                    interval: z.ZodNumber;
                    routeIndex: z.ZodNumber;
                    blockFragment: z.ZodBoolean;
                    autoPreviewRoute: z.ZodBoolean;
                    autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                    hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                    weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                    dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }, {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }>, "many">;
                m_randomActionGroups: z.ZodOptional<z.ZodNull>;
                m_actionWithRandomSpawn: z.ZodOptional<z.ZodNull>;
                m_validActionPackKeys: z.ZodOptional<z.ZodNull>;
            }, "strict", z.ZodTypeAny, {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }, {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }>>, z.ZodNull]>;
        predefines: z.ZodUnion<[z.ZodObject<{
            characterInsts: z.ZodArray<z.ZodAny, "many">;
            tokenInsts: z.ZodArray<z.ZodObject<{
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    row?: number;
                    col?: number;
                }, {
                    row?: number;
                    col?: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                hidden: z.ZodBoolean;
                alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    level: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    level?: number;
                }, {
                    key?: string;
                    level?: number;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
                inst: z.ZodObject<{
                    characterKey: z.ZodString;
                    level: z.ZodNumber;
                    phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    favorPoint: z.ZodNumber;
                    potentialRank: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                }, {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                }>;
                skillIndex: z.ZodNumber;
                mainSkillLvl: z.ZodNumber;
                skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }, {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }>, "many">;
            characterCards: z.ZodArray<z.ZodAny, "many">;
            tokenCards: z.ZodArray<z.ZodAny, "many">;
        }, "strict", z.ZodTypeAny, {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        }, {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        }>, z.ZodNull]>;
        hardPredefines: z.ZodUnion<[z.ZodObject<{
            characterInsts: z.ZodArray<z.ZodAny, "many">;
            tokenInsts: z.ZodArray<z.ZodObject<{
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    row?: number;
                    col?: number;
                }, {
                    row?: number;
                    col?: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                hidden: z.ZodBoolean;
                alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    level: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    level?: number;
                }, {
                    key?: string;
                    level?: number;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
                inst: z.ZodObject<{
                    characterKey: z.ZodString;
                    level: z.ZodNumber;
                    phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    favorPoint: z.ZodNumber;
                    potentialRank: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                }, {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                }>;
                skillIndex: z.ZodNumber;
                mainSkillLvl: z.ZodNumber;
                skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }, {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }>, "many">;
            characterCards: z.ZodArray<z.ZodAny, "many">;
            tokenCards: z.ZodArray<z.ZodAny, "many">;
        }, "strict", z.ZodTypeAny, {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        }, {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        }>, z.ZodNull, z.ZodUndefined]>;
        excludeCharIdList: z.ZodNull;
        randomSeed: z.ZodNumber;
        operaConfig: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        runtimeData: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
    }, "strict", z.ZodTypeAny, {
        options?: {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        };
        levelId?: string;
        mapId?: string;
        bgmEvent?: string;
        environmentSe?: string;
        mapData?: {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        };
        tilesDisallowToLocate?: any[];
        runes?: {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
        globalBuffs?: {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }[];
        routes?: {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }[];
        extraRoutes?: any[];
        enemies?: any[];
        enemyDbRefs?: {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }[];
        waves?: {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }[];
        branches?: Record<string, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }>;
        predefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        hardPredefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        excludeCharIdList?: null;
        randomSeed?: number;
        operaConfig?: string;
        runtimeData?: null;
    }, {
        options?: {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        };
        levelId?: string;
        mapId?: string;
        bgmEvent?: string;
        environmentSe?: string;
        mapData?: {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        };
        tilesDisallowToLocate?: any[];
        runes?: {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
        globalBuffs?: {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }[];
        routes?: {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }[];
        extraRoutes?: any[];
        enemies?: any[];
        enemyDbRefs?: {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }[];
        waves?: {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }[];
        branches?: Record<string, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }>;
        predefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        hardPredefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        excludeCharIdList?: null;
        randomSeed?: number;
        operaConfig?: string;
        runtimeData?: null;
    }>;
}, "strict", z.ZodTypeAny, {
    excel?: {
        stageId?: string;
        levelId?: string;
        code?: string;
        name?: string;
        loadingPicId?: string;
        description?: string;
        actionCost?: number;
        powerCost?: number;
    };
    levels?: {
        options?: {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        };
        levelId?: string;
        mapId?: string;
        bgmEvent?: string;
        environmentSe?: string;
        mapData?: {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        };
        tilesDisallowToLocate?: any[];
        runes?: {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
        globalBuffs?: {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }[];
        routes?: {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }[];
        extraRoutes?: any[];
        enemies?: any[];
        enemyDbRefs?: {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }[];
        waves?: {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }[];
        branches?: Record<string, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }>;
        predefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        hardPredefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        excludeCharIdList?: null;
        randomSeed?: number;
        operaConfig?: string;
        runtimeData?: null;
    };
}, {
    excel?: {
        stageId?: string;
        levelId?: string;
        code?: string;
        name?: string;
        loadingPicId?: string;
        description?: string;
        actionCost?: number;
        powerCost?: number;
    };
    levels?: {
        options?: {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        };
        levelId?: string;
        mapId?: string;
        bgmEvent?: string;
        environmentSe?: string;
        mapData?: {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        };
        tilesDisallowToLocate?: any[];
        runes?: {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
        globalBuffs?: {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }[];
        routes?: {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }[];
        extraRoutes?: any[];
        enemies?: any[];
        enemyDbRefs?: {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }[];
        waves?: {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }[];
        branches?: Record<string, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }>;
        predefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        hardPredefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        excludeCharIdList?: null;
        randomSeed?: number;
        operaConfig?: string;
        runtimeData?: null;
    };
}>;
export declare const BaseZod: z.ZodObject<{
    buffId: z.ZodString;
    buffName: z.ZodString;
    buffIcon: z.ZodString;
    skillIcon: z.ZodString;
    sortId: z.ZodNumber;
    buffColor: z.ZodString;
    textColor: z.ZodString;
    buffCategory: z.ZodString;
    roomType: z.ZodString;
    description: z.ZodString;
}, "strict", z.ZodTypeAny, {
    buffId?: string;
    buffName?: string;
    buffIcon?: string;
    skillIcon?: string;
    sortId?: number;
    buffColor?: string;
    textColor?: string;
    buffCategory?: string;
    roomType?: string;
    description?: string;
}, {
    buffId?: string;
    buffName?: string;
    buffIcon?: string;
    skillIcon?: string;
    sortId?: number;
    buffColor?: string;
    textColor?: string;
    buffCategory?: string;
    roomType?: string;
    description?: string;
}>;
export declare const CCStageZod: z.ZodObject<{
    const: z.ZodObject<{
        levelId: z.ZodString;
        location: z.ZodString;
        name: z.ZodString;
        description: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        levelId?: string;
        location?: string;
        name?: string;
        description?: string;
    }, {
        levelId?: string;
        location?: string;
        name?: string;
        description?: string;
    }>;
    levels: z.ZodObject<{
        options: z.ZodObject<{
            characterLimit: z.ZodNumber;
            maxLifePoint: z.ZodNumber;
            initialCost: z.ZodNumber;
            maxCost: z.ZodNumber;
            costIncreaseTime: z.ZodNumber;
            moveMultiplier: z.ZodNumber;
            steeringEnabled: z.ZodBoolean;
            isTrainingLevel: z.ZodBoolean;
            isHardTrainingLevel: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            isPredefinedCardsSelectable: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            maxPlayTime: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
            functionDisableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            configBlackBoard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                value?: number;
                valueStr?: string;
            }, {
                key?: string;
                value?: number;
                valueStr?: string;
            }>, "many">, z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }, {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }>;
        levelId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        mapId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        bgmEvent: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        environmentSe: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        mapData: z.ZodObject<{
            map: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
            tiles: z.ZodArray<z.ZodObject<{
                tileKey: z.ZodString;
                heightType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                buildableType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                passableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                playerSideMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull]>;
                effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    offset: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                        z: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        x?: number;
                        y?: number;
                        z?: number;
                    }, {
                        x?: number;
                        y?: number;
                        z?: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }, {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }>, "many">, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }, {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }>, "many">;
            blockEdges: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodNull]>;
            tags: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
            effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                offset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                    z: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x?: number;
                    y?: number;
                    z?: number;
                }, {
                    x?: number;
                    y?: number;
                    z?: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }, {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }>, "many">, z.ZodNull]>;
            layerRects: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
            width: z.ZodOptional<z.ZodNumber>;
            height: z.ZodOptional<z.ZodNumber>;
        }, "strict", z.ZodTypeAny, {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        }, {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        }>;
        tilesDisallowToLocate: z.ZodArray<z.ZodAny, "many">;
        runes: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            difficultyMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            key: z.ZodString;
            professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
            buildableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            blackboard: z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                value?: number;
                valueStr?: string;
            }, {
                key?: string;
                value?: number;
                valueStr?: string;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }, {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }>, "many">, z.ZodNull]>;
        globalBuffs: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            prefabKey: z.ZodString;
            blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                value?: number;
                valueStr?: string;
            }, {
                key?: string;
                value?: number;
                valueStr?: string;
            }>, "many">, z.ZodNull]>;
            overrideCameraEffect: z.ZodNull;
            passProfessionMaskFlag: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
            useExtraData: z.ZodOptional<z.ZodBoolean>;
        }, "strict", z.ZodTypeAny, {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }, {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }>, "many">, z.ZodNull]>;
        routes: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            motionMode: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            startPosition: z.ZodObject<{
                row: z.ZodNumber;
                col: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                row?: number;
                col?: number;
            }, {
                row?: number;
                col?: number;
            }>;
            endPosition: z.ZodObject<{
                row: z.ZodNumber;
                col: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                row?: number;
                col?: number;
            }, {
                row?: number;
                col?: number;
            }>;
            spawnRandomRange: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                x?: number;
                y?: number;
            }, {
                x?: number;
                y?: number;
            }>;
            spawnOffset: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                x?: number;
                y?: number;
            }, {
                x?: number;
                y?: number;
            }>;
            checkpoints: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                type: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                time: z.ZodNumber;
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    row?: number;
                    col?: number;
                }, {
                    row?: number;
                    col?: number;
                }>;
                reachOffset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x?: number;
                    y?: number;
                }, {
                    x?: number;
                    y?: number;
                }>;
                randomizeReachOffset: z.ZodBoolean;
                reachDistance: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }, {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }>, "many">, z.ZodNull]>;
            allowDiagonalMove: z.ZodBoolean;
            visitEveryTileCenter: z.ZodBoolean;
            visitEveryNodeCenter: z.ZodBoolean;
            visitEveryCheckPoint: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }, {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }>, z.ZodNull]>, "many">;
        extraRoutes: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodUndefined]>;
        enemies: z.ZodArray<z.ZodAny, "many">;
        enemyDbRefs: z.ZodArray<z.ZodObject<{
            useDb: z.ZodBoolean;
            id: z.ZodString;
            level: z.ZodNumber;
            overwrittenData: z.ZodUnion<[z.ZodObject<{
                name: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>;
                description: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>;
                prefabKey: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>;
                attributes: z.ZodObject<{
                    maxHp: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    atk: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    def: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    magicResistance: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    cost: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    blockCnt: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    moveSpeed: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    attackSpeed: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    baseAttackTime: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    respawnTime: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    hpRecoveryPerSec: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    spRecoveryPerSec: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    maxDeployCount: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    massLevel: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    baseForceLevel: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    tauntLevel: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    epDamageResistance: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    epResistance: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    stunImmune: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>;
                    silenceImmune: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>;
                    sleepImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>, z.ZodUndefined]>;
                    frozenImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>, z.ZodUndefined]>;
                    levitateImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                }, {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                }>;
                applyWay: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>, z.ZodUndefined]>;
                motion: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>, z.ZodUndefined]>;
                enemyTags: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string[];
                }, {
                    m_defined?: boolean;
                    m_value?: string[];
                }>, z.ZodUndefined]>;
                lifePointReduce: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>;
                levelType: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>, z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>, z.ZodUndefined]>;
                rangeRadius: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>;
                numOfExtraDrops: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>, z.ZodUndefined]>;
                viewRadius: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>, z.ZodUndefined]>;
                notCountInTotal: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodBoolean;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: boolean;
                }, {
                    m_defined?: boolean;
                    m_value?: boolean;
                }>, z.ZodUndefined]>;
                talentBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull]>;
                skills: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    prefabKey: z.ZodString;
                    priority: z.ZodNumber;
                    cooldown: z.ZodNumber;
                    initCooldown: z.ZodNumber;
                    spCost: z.ZodNumber;
                    blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }>, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }, {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }>, "many">, z.ZodNull]>;
                spData: z.ZodUnion<[z.ZodObject<{
                    spType: z.ZodString;
                    maxSp: z.ZodNumber;
                    initSp: z.ZodNumber;
                    increment: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                }, {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                }>, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            }, {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            }>, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }, {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }>, "many">;
        waves: z.ZodArray<z.ZodObject<{
            preDelay: z.ZodNumber;
            postDelay: z.ZodNumber;
            maxTimeWaitingForNextWave: z.ZodNumber;
            fragments: z.ZodArray<z.ZodObject<{
                preDelay: z.ZodNumber;
                actions: z.ZodArray<z.ZodObject<{
                    actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    managedByScheduler: z.ZodBoolean;
                    key: z.ZodString;
                    count: z.ZodNumber;
                    preDelay: z.ZodNumber;
                    interval: z.ZodNumber;
                    routeIndex: z.ZodNumber;
                    blockFragment: z.ZodBoolean;
                    autoPreviewRoute: z.ZodBoolean;
                    autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                    hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                    weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                    dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }, {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }>, "many">;
                name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strict", z.ZodTypeAny, {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }, {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }>, "many">;
            advancedWaveTag: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strict", z.ZodTypeAny, {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }, {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }>, "many">;
        branches: z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodObject<{
            phases: z.ZodArray<z.ZodObject<{
                preDelay: z.ZodNumber;
                actions: z.ZodArray<z.ZodObject<{
                    actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    managedByScheduler: z.ZodBoolean;
                    key: z.ZodString;
                    count: z.ZodNumber;
                    preDelay: z.ZodNumber;
                    interval: z.ZodNumber;
                    routeIndex: z.ZodNumber;
                    blockFragment: z.ZodBoolean;
                    autoPreviewRoute: z.ZodBoolean;
                    autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                    hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                    weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                    dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }, {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }>, "many">;
                m_randomActionGroups: z.ZodOptional<z.ZodNull>;
                m_actionWithRandomSpawn: z.ZodOptional<z.ZodNull>;
                m_validActionPackKeys: z.ZodOptional<z.ZodNull>;
            }, "strict", z.ZodTypeAny, {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }, {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }>>, z.ZodNull]>;
        predefines: z.ZodUnion<[z.ZodObject<{
            characterInsts: z.ZodArray<z.ZodAny, "many">;
            tokenInsts: z.ZodArray<z.ZodObject<{
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    row?: number;
                    col?: number;
                }, {
                    row?: number;
                    col?: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                hidden: z.ZodBoolean;
                alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    level: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    level?: number;
                }, {
                    key?: string;
                    level?: number;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
                inst: z.ZodObject<{
                    characterKey: z.ZodString;
                    level: z.ZodNumber;
                    phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    favorPoint: z.ZodNumber;
                    potentialRank: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                }, {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                }>;
                skillIndex: z.ZodNumber;
                mainSkillLvl: z.ZodNumber;
                skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }, {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }>, "many">;
            characterCards: z.ZodArray<z.ZodAny, "many">;
            tokenCards: z.ZodArray<z.ZodAny, "many">;
        }, "strict", z.ZodTypeAny, {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        }, {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        }>, z.ZodNull]>;
        hardPredefines: z.ZodUnion<[z.ZodObject<{
            characterInsts: z.ZodArray<z.ZodAny, "many">;
            tokenInsts: z.ZodArray<z.ZodObject<{
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    row?: number;
                    col?: number;
                }, {
                    row?: number;
                    col?: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                hidden: z.ZodBoolean;
                alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    level: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    level?: number;
                }, {
                    key?: string;
                    level?: number;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
                inst: z.ZodObject<{
                    characterKey: z.ZodString;
                    level: z.ZodNumber;
                    phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    favorPoint: z.ZodNumber;
                    potentialRank: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                }, {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                }>;
                skillIndex: z.ZodNumber;
                mainSkillLvl: z.ZodNumber;
                skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }, {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }>, "many">;
            characterCards: z.ZodArray<z.ZodAny, "many">;
            tokenCards: z.ZodArray<z.ZodAny, "many">;
        }, "strict", z.ZodTypeAny, {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        }, {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        }>, z.ZodNull, z.ZodUndefined]>;
        excludeCharIdList: z.ZodNull;
        randomSeed: z.ZodNumber;
        operaConfig: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        runtimeData: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
    }, "strict", z.ZodTypeAny, {
        options?: {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        };
        levelId?: string;
        mapId?: string;
        bgmEvent?: string;
        environmentSe?: string;
        mapData?: {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        };
        tilesDisallowToLocate?: any[];
        runes?: {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
        globalBuffs?: {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }[];
        routes?: {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }[];
        extraRoutes?: any[];
        enemies?: any[];
        enemyDbRefs?: {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }[];
        waves?: {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }[];
        branches?: Record<string, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }>;
        predefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        hardPredefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        excludeCharIdList?: null;
        randomSeed?: number;
        operaConfig?: string;
        runtimeData?: null;
    }, {
        options?: {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        };
        levelId?: string;
        mapId?: string;
        bgmEvent?: string;
        environmentSe?: string;
        mapData?: {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        };
        tilesDisallowToLocate?: any[];
        runes?: {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
        globalBuffs?: {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }[];
        routes?: {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }[];
        extraRoutes?: any[];
        enemies?: any[];
        enemyDbRefs?: {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }[];
        waves?: {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }[];
        branches?: Record<string, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }>;
        predefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        hardPredefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        excludeCharIdList?: null;
        randomSeed?: number;
        operaConfig?: string;
        runtimeData?: null;
    }>;
}, "strict", z.ZodTypeAny, {
    const?: {
        levelId?: string;
        location?: string;
        name?: string;
        description?: string;
    };
    levels?: {
        options?: {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        };
        levelId?: string;
        mapId?: string;
        bgmEvent?: string;
        environmentSe?: string;
        mapData?: {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        };
        tilesDisallowToLocate?: any[];
        runes?: {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
        globalBuffs?: {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }[];
        routes?: {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }[];
        extraRoutes?: any[];
        enemies?: any[];
        enemyDbRefs?: {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }[];
        waves?: {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }[];
        branches?: Record<string, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }>;
        predefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        hardPredefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        excludeCharIdList?: null;
        randomSeed?: number;
        operaConfig?: string;
        runtimeData?: null;
    };
}, {
    const?: {
        levelId?: string;
        location?: string;
        name?: string;
        description?: string;
    };
    levels?: {
        options?: {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        };
        levelId?: string;
        mapId?: string;
        bgmEvent?: string;
        environmentSe?: string;
        mapData?: {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        };
        tilesDisallowToLocate?: any[];
        runes?: {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
        globalBuffs?: {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }[];
        routes?: {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }[];
        extraRoutes?: any[];
        enemies?: any[];
        enemyDbRefs?: {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }[];
        waves?: {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }[];
        branches?: Record<string, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }>;
        predefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        hardPredefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        excludeCharIdList?: null;
        randomSeed?: number;
        operaConfig?: string;
        runtimeData?: null;
    };
}>;
export declare const DefinitionZod: z.ZodObject<{
    termId: z.ZodString;
    termName: z.ZodString;
    description: z.ZodString;
}, "strict", z.ZodTypeAny, {
    termId?: string;
    termName?: string;
    description?: string;
}, {
    termId?: string;
    termName?: string;
    description?: string;
}>;
export declare const EnemyZod: z.ZodObject<{
    excel: z.ZodObject<{
        enemyId: z.ZodString;
        enemyIndex: z.ZodString;
        enemyTags: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
        sortId: z.ZodNumber;
        name: z.ZodString;
        enemyLevel: z.ZodEnum<["NORMAL", "ELITE", "BOSS"]>;
        description: z.ZodString;
        attackType: z.ZodNull;
        ability: z.ZodNull;
        isInvalidKilled: z.ZodBoolean;
        overrideKillCntInfos: z.ZodRecord<z.ZodString, z.ZodAny>;
        hideInHandbook: z.ZodBoolean;
        abilityList: z.ZodArray<z.ZodObject<{
            text: z.ZodString;
            textFormat: z.ZodEnum<["NORMAL", "SILENCE", "TITLE"]>;
        }, "strict", z.ZodTypeAny, {
            text?: string;
            textFormat?: "NORMAL" | "SILENCE" | "TITLE";
        }, {
            text?: string;
            textFormat?: "NORMAL" | "SILENCE" | "TITLE";
        }>, "many">;
        linkEnemies: z.ZodArray<z.ZodString, "many">;
        damageType: z.ZodArray<z.ZodEnum<["PHYSIC", "MAGIC", "NO_DAMAGE", "HEAL"]>, "many">;
        invisibleDetail: z.ZodBoolean;
    }, "strict", z.ZodTypeAny, {
        enemyId?: string;
        enemyIndex?: string;
        enemyTags?: string[];
        sortId?: number;
        name?: string;
        enemyLevel?: "NORMAL" | "ELITE" | "BOSS";
        description?: string;
        attackType?: null;
        ability?: null;
        isInvalidKilled?: boolean;
        overrideKillCntInfos?: Record<string, any>;
        hideInHandbook?: boolean;
        abilityList?: {
            text?: string;
            textFormat?: "NORMAL" | "SILENCE" | "TITLE";
        }[];
        linkEnemies?: string[];
        damageType?: ("PHYSIC" | "MAGIC" | "NO_DAMAGE" | "HEAL")[];
        invisibleDetail?: boolean;
    }, {
        enemyId?: string;
        enemyIndex?: string;
        enemyTags?: string[];
        sortId?: number;
        name?: string;
        enemyLevel?: "NORMAL" | "ELITE" | "BOSS";
        description?: string;
        attackType?: null;
        ability?: null;
        isInvalidKilled?: boolean;
        overrideKillCntInfos?: Record<string, any>;
        hideInHandbook?: boolean;
        abilityList?: {
            text?: string;
            textFormat?: "NORMAL" | "SILENCE" | "TITLE";
        }[];
        linkEnemies?: string[];
        damageType?: ("PHYSIC" | "MAGIC" | "NO_DAMAGE" | "HEAL")[];
        invisibleDetail?: boolean;
    }>;
    levels: z.ZodObject<{
        Key: z.ZodString;
        Value: z.ZodArray<z.ZodObject<{
            level: z.ZodNumber;
            enemyData: z.ZodObject<{
                name: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>;
                description: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>;
                prefabKey: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>;
                attributes: z.ZodObject<{
                    maxHp: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    atk: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    def: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    magicResistance: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    cost: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    blockCnt: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    moveSpeed: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    attackSpeed: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    baseAttackTime: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    respawnTime: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    hpRecoveryPerSec: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    spRecoveryPerSec: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    maxDeployCount: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    massLevel: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    baseForceLevel: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    tauntLevel: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    epDamageResistance: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    epResistance: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    stunImmune: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>;
                    silenceImmune: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>;
                    sleepImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>, z.ZodUndefined]>;
                    frozenImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>, z.ZodUndefined]>;
                    levitateImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                }, {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                }>;
                applyWay: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>, z.ZodUndefined]>;
                motion: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>, z.ZodUndefined]>;
                enemyTags: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string[];
                }, {
                    m_defined?: boolean;
                    m_value?: string[];
                }>, z.ZodUndefined]>;
                lifePointReduce: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>;
                levelType: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>, z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>, z.ZodUndefined]>;
                rangeRadius: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>;
                numOfExtraDrops: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>, z.ZodUndefined]>;
                viewRadius: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>, z.ZodUndefined]>;
                notCountInTotal: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodBoolean;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: boolean;
                }, {
                    m_defined?: boolean;
                    m_value?: boolean;
                }>, z.ZodUndefined]>;
                talentBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull]>;
                skills: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    prefabKey: z.ZodString;
                    priority: z.ZodNumber;
                    cooldown: z.ZodNumber;
                    initCooldown: z.ZodNumber;
                    spCost: z.ZodNumber;
                    blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }>, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }, {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }>, "many">, z.ZodNull]>;
                spData: z.ZodUnion<[z.ZodObject<{
                    spType: z.ZodString;
                    maxSp: z.ZodNumber;
                    initSp: z.ZodNumber;
                    increment: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                }, {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                }>, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            }, {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            }>;
        }, "strict", z.ZodTypeAny, {
            level?: number;
            enemyData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }, {
            level?: number;
            enemyData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }>, "many">;
    }, "strict", z.ZodTypeAny, {
        Key?: string;
        Value?: {
            level?: number;
            enemyData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }[];
    }, {
        Key?: string;
        Value?: {
            level?: number;
            enemyData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }[];
    }>;
}, "strict", z.ZodTypeAny, {
    excel?: {
        enemyId?: string;
        enemyIndex?: string;
        enemyTags?: string[];
        sortId?: number;
        name?: string;
        enemyLevel?: "NORMAL" | "ELITE" | "BOSS";
        description?: string;
        attackType?: null;
        ability?: null;
        isInvalidKilled?: boolean;
        overrideKillCntInfos?: Record<string, any>;
        hideInHandbook?: boolean;
        abilityList?: {
            text?: string;
            textFormat?: "NORMAL" | "SILENCE" | "TITLE";
        }[];
        linkEnemies?: string[];
        damageType?: ("PHYSIC" | "MAGIC" | "NO_DAMAGE" | "HEAL")[];
        invisibleDetail?: boolean;
    };
    levels?: {
        Key?: string;
        Value?: {
            level?: number;
            enemyData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }[];
    };
}, {
    excel?: {
        enemyId?: string;
        enemyIndex?: string;
        enemyTags?: string[];
        sortId?: number;
        name?: string;
        enemyLevel?: "NORMAL" | "ELITE" | "BOSS";
        description?: string;
        attackType?: null;
        ability?: null;
        isInvalidKilled?: boolean;
        overrideKillCntInfos?: Record<string, any>;
        hideInHandbook?: boolean;
        abilityList?: {
            text?: string;
            textFormat?: "NORMAL" | "SILENCE" | "TITLE";
        }[];
        linkEnemies?: string[];
        damageType?: ("PHYSIC" | "MAGIC" | "NO_DAMAGE" | "HEAL")[];
        invisibleDetail?: boolean;
    };
    levels?: {
        Key?: string;
        Value?: {
            level?: number;
            enemyData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }[];
    };
}>;
export declare const GameEventZod: z.ZodObject<{
    id: z.ZodString;
    type: z.ZodString;
    displayType: z.ZodString;
    name: z.ZodString;
    startTime: z.ZodNumber;
    endTime: z.ZodNumber;
    rewardEndTime: z.ZodNumber;
    displayOnHome: z.ZodBoolean;
    hasStage: z.ZodBoolean;
    templateShopId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    medalGroupId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    ungroupedMedalIds: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
    isReplicate: z.ZodBoolean;
    needFixedSync: z.ZodBoolean;
}, "strict", z.ZodTypeAny, {
    id?: string;
    type?: string;
    displayType?: string;
    name?: string;
    startTime?: number;
    endTime?: number;
    rewardEndTime?: number;
    displayOnHome?: boolean;
    hasStage?: boolean;
    templateShopId?: string;
    medalGroupId?: string;
    ungroupedMedalIds?: string[];
    isReplicate?: boolean;
    needFixedSync?: boolean;
}, {
    id?: string;
    type?: string;
    displayType?: string;
    name?: string;
    startTime?: number;
    endTime?: number;
    rewardEndTime?: number;
    displayOnHome?: boolean;
    hasStage?: boolean;
    templateShopId?: string;
    medalGroupId?: string;
    ungroupedMedalIds?: string[];
    isReplicate?: boolean;
    needFixedSync?: boolean;
}>;
export declare const GridRangeZod: z.ZodObject<{
    id: z.ZodString;
    direction: z.ZodNumber;
    grids: z.ZodArray<z.ZodObject<{
        row: z.ZodNumber;
        col: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        row?: number;
        col?: number;
    }, {
        row?: number;
        col?: number;
    }>, "many">;
}, "strict", z.ZodTypeAny, {
    id?: string;
    direction?: number;
    grids?: {
        row?: number;
        col?: number;
    }[];
}, {
    id?: string;
    direction?: number;
    grids?: {
        row?: number;
        col?: number;
    }[];
}>;
export declare const ItemZod: z.ZodObject<{
    data: z.ZodObject<{
        itemId: z.ZodString;
        name: z.ZodString;
        description: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        rarity: z.ZodString;
        iconId: z.ZodString;
        overrideBkg: z.ZodNull;
        stackIconId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        sortId: z.ZodNumber;
        usage: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        obtainApproach: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        hideInItemGet: z.ZodBoolean;
        classifyType: z.ZodString;
        itemType: z.ZodString;
        stageDropList: z.ZodArray<z.ZodObject<{
            stageId: z.ZodString;
            occPer: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            stageId?: string;
            occPer?: string;
        }, {
            stageId?: string;
            occPer?: string;
        }>, "many">;
        buildingProductList: z.ZodArray<z.ZodObject<{
            roomType: z.ZodString;
            formulaId: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            roomType?: string;
            formulaId?: string;
        }, {
            roomType?: string;
            formulaId?: string;
        }>, "many">;
    }, "strict", z.ZodTypeAny, {
        itemId?: string;
        name?: string;
        description?: string;
        rarity?: string;
        iconId?: string;
        overrideBkg?: null;
        stackIconId?: string;
        sortId?: number;
        usage?: string;
        obtainApproach?: string;
        hideInItemGet?: boolean;
        classifyType?: string;
        itemType?: string;
        stageDropList?: {
            stageId?: string;
            occPer?: string;
        }[];
        buildingProductList?: {
            roomType?: string;
            formulaId?: string;
        }[];
    }, {
        itemId?: string;
        name?: string;
        description?: string;
        rarity?: string;
        iconId?: string;
        overrideBkg?: null;
        stackIconId?: string;
        sortId?: number;
        usage?: string;
        obtainApproach?: string;
        hideInItemGet?: boolean;
        classifyType?: string;
        itemType?: string;
        stageDropList?: {
            stageId?: string;
            occPer?: string;
        }[];
        buildingProductList?: {
            roomType?: string;
            formulaId?: string;
        }[];
    }>;
    formula: z.ZodUnion<[z.ZodObject<{
        formulaId: z.ZodString;
        itemId: z.ZodString;
        count: z.ZodNumber;
        weight: z.ZodNumber;
        costPoint: z.ZodNumber;
        formulaType: z.ZodString;
        buffType: z.ZodString;
        costs: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            count: z.ZodNumber;
            type: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            id?: string;
            count?: number;
            type?: string;
        }, {
            id?: string;
            count?: number;
            type?: string;
        }>, "many">;
        requireRooms: z.ZodArray<z.ZodObject<{
            roomId: z.ZodString;
            roomLevel: z.ZodNumber;
            roomCount: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            roomId?: string;
            roomLevel?: number;
            roomCount?: number;
        }, {
            roomId?: string;
            roomLevel?: number;
            roomCount?: number;
        }>, "many">;
        requireStages: z.ZodArray<z.ZodObject<{
            stageId: z.ZodString;
            rank: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            stageId?: string;
            rank?: number;
        }, {
            stageId?: string;
            rank?: number;
        }>, "many">;
    }, "strict", z.ZodTypeAny, {
        formulaId?: string;
        itemId?: string;
        count?: number;
        weight?: number;
        costPoint?: number;
        formulaType?: string;
        buffType?: string;
        costs?: {
            id?: string;
            count?: number;
            type?: string;
        }[];
        requireRooms?: {
            roomId?: string;
            roomLevel?: number;
            roomCount?: number;
        }[];
        requireStages?: {
            stageId?: string;
            rank?: number;
        }[];
    }, {
        formulaId?: string;
        itemId?: string;
        count?: number;
        weight?: number;
        costPoint?: number;
        formulaType?: string;
        buffType?: string;
        costs?: {
            id?: string;
            count?: number;
            type?: string;
        }[];
        requireRooms?: {
            roomId?: string;
            roomLevel?: number;
            roomCount?: number;
        }[];
        requireStages?: {
            stageId?: string;
            rank?: number;
        }[];
    }>, z.ZodObject<{
        sortId: z.ZodNumber;
        formulaId: z.ZodString;
        rarity: z.ZodNumber;
        itemId: z.ZodString;
        count: z.ZodNumber;
        goldCost: z.ZodNumber;
        apCost: z.ZodNumber;
        formulaType: z.ZodString;
        buffType: z.ZodString;
        extraOutcomeRate: z.ZodNumber;
        extraOutcomeGroup: z.ZodArray<z.ZodObject<{
            weight: z.ZodNumber;
            itemId: z.ZodString;
            itemCount: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            weight?: number;
            itemId?: string;
            itemCount?: number;
        }, {
            weight?: number;
            itemId?: string;
            itemCount?: number;
        }>, "many">;
        costs: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            count: z.ZodNumber;
            type: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            id?: string;
            count?: number;
            type?: string;
        }, {
            id?: string;
            count?: number;
            type?: string;
        }>, "many">;
        requireRooms: z.ZodArray<z.ZodObject<{
            roomId: z.ZodString;
            roomLevel: z.ZodNumber;
            roomCount: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            roomId?: string;
            roomLevel?: number;
            roomCount?: number;
        }, {
            roomId?: string;
            roomLevel?: number;
            roomCount?: number;
        }>, "many">;
        requireStages: z.ZodArray<z.ZodObject<{
            stageId: z.ZodString;
            rank: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            stageId?: string;
            rank?: number;
        }, {
            stageId?: string;
            rank?: number;
        }>, "many">;
    }, "strict", z.ZodTypeAny, {
        sortId?: number;
        formulaId?: string;
        rarity?: number;
        itemId?: string;
        count?: number;
        goldCost?: number;
        apCost?: number;
        formulaType?: string;
        buffType?: string;
        extraOutcomeRate?: number;
        extraOutcomeGroup?: {
            weight?: number;
            itemId?: string;
            itemCount?: number;
        }[];
        costs?: {
            id?: string;
            count?: number;
            type?: string;
        }[];
        requireRooms?: {
            roomId?: string;
            roomLevel?: number;
            roomCount?: number;
        }[];
        requireStages?: {
            stageId?: string;
            rank?: number;
        }[];
    }, {
        sortId?: number;
        formulaId?: string;
        rarity?: number;
        itemId?: string;
        count?: number;
        goldCost?: number;
        apCost?: number;
        formulaType?: string;
        buffType?: string;
        extraOutcomeRate?: number;
        extraOutcomeGroup?: {
            weight?: number;
            itemId?: string;
            itemCount?: number;
        }[];
        costs?: {
            id?: string;
            count?: number;
            type?: string;
        }[];
        requireRooms?: {
            roomId?: string;
            roomLevel?: number;
            roomCount?: number;
        }[];
        requireStages?: {
            stageId?: string;
            rank?: number;
        }[];
    }>, z.ZodNull]>;
}, "strict", z.ZodTypeAny, {
    data?: {
        itemId?: string;
        name?: string;
        description?: string;
        rarity?: string;
        iconId?: string;
        overrideBkg?: null;
        stackIconId?: string;
        sortId?: number;
        usage?: string;
        obtainApproach?: string;
        hideInItemGet?: boolean;
        classifyType?: string;
        itemType?: string;
        stageDropList?: {
            stageId?: string;
            occPer?: string;
        }[];
        buildingProductList?: {
            roomType?: string;
            formulaId?: string;
        }[];
    };
    formula?: {
        formulaId?: string;
        itemId?: string;
        count?: number;
        weight?: number;
        costPoint?: number;
        formulaType?: string;
        buffType?: string;
        costs?: {
            id?: string;
            count?: number;
            type?: string;
        }[];
        requireRooms?: {
            roomId?: string;
            roomLevel?: number;
            roomCount?: number;
        }[];
        requireStages?: {
            stageId?: string;
            rank?: number;
        }[];
    } | {
        sortId?: number;
        formulaId?: string;
        rarity?: number;
        itemId?: string;
        count?: number;
        goldCost?: number;
        apCost?: number;
        formulaType?: string;
        buffType?: string;
        extraOutcomeRate?: number;
        extraOutcomeGroup?: {
            weight?: number;
            itemId?: string;
            itemCount?: number;
        }[];
        costs?: {
            id?: string;
            count?: number;
            type?: string;
        }[];
        requireRooms?: {
            roomId?: string;
            roomLevel?: number;
            roomCount?: number;
        }[];
        requireStages?: {
            stageId?: string;
            rank?: number;
        }[];
    };
}, {
    data?: {
        itemId?: string;
        name?: string;
        description?: string;
        rarity?: string;
        iconId?: string;
        overrideBkg?: null;
        stackIconId?: string;
        sortId?: number;
        usage?: string;
        obtainApproach?: string;
        hideInItemGet?: boolean;
        classifyType?: string;
        itemType?: string;
        stageDropList?: {
            stageId?: string;
            occPer?: string;
        }[];
        buildingProductList?: {
            roomType?: string;
            formulaId?: string;
        }[];
    };
    formula?: {
        formulaId?: string;
        itemId?: string;
        count?: number;
        weight?: number;
        costPoint?: number;
        formulaType?: string;
        buffType?: string;
        costs?: {
            id?: string;
            count?: number;
            type?: string;
        }[];
        requireRooms?: {
            roomId?: string;
            roomLevel?: number;
            roomCount?: number;
        }[];
        requireStages?: {
            stageId?: string;
            rank?: number;
        }[];
    } | {
        sortId?: number;
        formulaId?: string;
        rarity?: number;
        itemId?: string;
        count?: number;
        goldCost?: number;
        apCost?: number;
        formulaType?: string;
        buffType?: string;
        extraOutcomeRate?: number;
        extraOutcomeGroup?: {
            weight?: number;
            itemId?: string;
            itemCount?: number;
        }[];
        costs?: {
            id?: string;
            count?: number;
            type?: string;
        }[];
        requireRooms?: {
            roomId?: string;
            roomLevel?: number;
            roomCount?: number;
        }[];
        requireStages?: {
            stageId?: string;
            rank?: number;
        }[];
    };
}>;
export declare const ModuleZod: z.ZodObject<{
    info: z.ZodObject<{
        uniEquipId: z.ZodString;
        uniEquipName: z.ZodString;
        uniEquipIcon: z.ZodString;
        uniEquipDesc: z.ZodString;
        typeIcon: z.ZodString;
        typeName1: z.ZodString;
        typeName2: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        equipShiningColor: z.ZodString;
        showEvolvePhase: z.ZodString;
        unlockEvolvePhase: z.ZodString;
        charId: z.ZodString;
        tmplId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        showLevel: z.ZodNumber;
        unlockLevel: z.ZodNumber;
        unlockFavorPoint: z.ZodNumber;
        missionList: z.ZodArray<z.ZodString, "many">;
        itemCost: z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            count: z.ZodNumber;
            type: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            id?: string;
            count?: number;
            type?: string;
        }, {
            id?: string;
            count?: number;
            type?: string;
        }>, "many">>, z.ZodNull]>;
        type: z.ZodString;
        uniEquipGetTime: z.ZodNumber;
        charEquipOrder: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        uniEquipId?: string;
        uniEquipName?: string;
        uniEquipIcon?: string;
        uniEquipDesc?: string;
        typeIcon?: string;
        typeName1?: string;
        typeName2?: string;
        equipShiningColor?: string;
        showEvolvePhase?: string;
        unlockEvolvePhase?: string;
        charId?: string;
        tmplId?: string;
        showLevel?: number;
        unlockLevel?: number;
        unlockFavorPoint?: number;
        missionList?: string[];
        itemCost?: Record<string, {
            id?: string;
            count?: number;
            type?: string;
        }[]>;
        type?: string;
        uniEquipGetTime?: number;
        charEquipOrder?: number;
    }, {
        uniEquipId?: string;
        uniEquipName?: string;
        uniEquipIcon?: string;
        uniEquipDesc?: string;
        typeIcon?: string;
        typeName1?: string;
        typeName2?: string;
        equipShiningColor?: string;
        showEvolvePhase?: string;
        unlockEvolvePhase?: string;
        charId?: string;
        tmplId?: string;
        showLevel?: number;
        unlockLevel?: number;
        unlockFavorPoint?: number;
        missionList?: string[];
        itemCost?: Record<string, {
            id?: string;
            count?: number;
            type?: string;
        }[]>;
        type?: string;
        uniEquipGetTime?: number;
        charEquipOrder?: number;
    }>;
    data: z.ZodUnion<[z.ZodObject<{
        phases: z.ZodArray<z.ZodObject<{
            equipLevel: z.ZodNumber;
            parts: z.ZodArray<z.ZodObject<{
                resKey: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                target: z.ZodString;
                isToken: z.ZodBoolean;
                addOrOverrideTalentDataBundle: z.ZodObject<{
                    candidates: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        displayRangeId: z.ZodBoolean;
                        upgradeDescription: z.ZodString;
                        talentIndex: z.ZodNumber;
                        unlockCondition: z.ZodObject<{
                            phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                            level: z.ZodNumber;
                        }, "strict", z.ZodTypeAny, {
                            phase?: string | number;
                            level?: number;
                        }, {
                            phase?: string | number;
                            level?: number;
                        }>;
                        requiredPotentialRank: z.ZodNumber;
                        prefabKey: z.ZodString;
                        name: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        description: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        rangeId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        blackboard: z.ZodArray<z.ZodObject<{
                            key: z.ZodString;
                            value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                            valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        }, "strict", z.ZodTypeAny, {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }, {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }>, "many">;
                        tokenKey: z.ZodOptional<z.ZodString>;
                    }, "strict", z.ZodTypeAny, {
                        displayRangeId?: boolean;
                        upgradeDescription?: string;
                        talentIndex?: number;
                        unlockCondition?: {
                            phase?: string | number;
                            level?: number;
                        };
                        requiredPotentialRank?: number;
                        prefabKey?: string;
                        name?: string;
                        description?: string;
                        rangeId?: string;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                        tokenKey?: string;
                    }, {
                        displayRangeId?: boolean;
                        upgradeDescription?: string;
                        talentIndex?: number;
                        unlockCondition?: {
                            phase?: string | number;
                            level?: number;
                        };
                        requiredPotentialRank?: number;
                        prefabKey?: string;
                        name?: string;
                        description?: string;
                        rangeId?: string;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                        tokenKey?: string;
                    }>, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    candidates?: {
                        displayRangeId?: boolean;
                        upgradeDescription?: string;
                        talentIndex?: number;
                        unlockCondition?: {
                            phase?: string | number;
                            level?: number;
                        };
                        requiredPotentialRank?: number;
                        prefabKey?: string;
                        name?: string;
                        description?: string;
                        rangeId?: string;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                        tokenKey?: string;
                    }[];
                }, {
                    candidates?: {
                        displayRangeId?: boolean;
                        upgradeDescription?: string;
                        talentIndex?: number;
                        unlockCondition?: {
                            phase?: string | number;
                            level?: number;
                        };
                        requiredPotentialRank?: number;
                        prefabKey?: string;
                        name?: string;
                        description?: string;
                        rangeId?: string;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                        tokenKey?: string;
                    }[];
                }>;
                overrideTraitDataBundle: z.ZodObject<{
                    candidates: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        additionalDescription: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        unlockCondition: z.ZodObject<{
                            phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                            level: z.ZodNumber;
                        }, "strict", z.ZodTypeAny, {
                            phase?: string | number;
                            level?: number;
                        }, {
                            phase?: string | number;
                            level?: number;
                        }>;
                        requiredPotentialRank: z.ZodNumber;
                        blackboard: z.ZodArray<z.ZodObject<{
                            key: z.ZodString;
                            value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                            valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        }, "strict", z.ZodTypeAny, {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }, {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }>, "many">;
                        overrideDescripton: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        prefabKey: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        rangeId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        additionalDescription?: string;
                        unlockCondition?: {
                            phase?: string | number;
                            level?: number;
                        };
                        requiredPotentialRank?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                        overrideDescripton?: string;
                        prefabKey?: string;
                        rangeId?: string;
                    }, {
                        additionalDescription?: string;
                        unlockCondition?: {
                            phase?: string | number;
                            level?: number;
                        };
                        requiredPotentialRank?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                        overrideDescripton?: string;
                        prefabKey?: string;
                        rangeId?: string;
                    }>, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    candidates?: {
                        additionalDescription?: string;
                        unlockCondition?: {
                            phase?: string | number;
                            level?: number;
                        };
                        requiredPotentialRank?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                        overrideDescripton?: string;
                        prefabKey?: string;
                        rangeId?: string;
                    }[];
                }, {
                    candidates?: {
                        additionalDescription?: string;
                        unlockCondition?: {
                            phase?: string | number;
                            level?: number;
                        };
                        requiredPotentialRank?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                        overrideDescripton?: string;
                        prefabKey?: string;
                        rangeId?: string;
                    }[];
                }>;
            }, "strict", z.ZodTypeAny, {
                resKey?: string;
                target?: string;
                isToken?: boolean;
                addOrOverrideTalentDataBundle?: {
                    candidates?: {
                        displayRangeId?: boolean;
                        upgradeDescription?: string;
                        talentIndex?: number;
                        unlockCondition?: {
                            phase?: string | number;
                            level?: number;
                        };
                        requiredPotentialRank?: number;
                        prefabKey?: string;
                        name?: string;
                        description?: string;
                        rangeId?: string;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                        tokenKey?: string;
                    }[];
                };
                overrideTraitDataBundle?: {
                    candidates?: {
                        additionalDescription?: string;
                        unlockCondition?: {
                            phase?: string | number;
                            level?: number;
                        };
                        requiredPotentialRank?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                        overrideDescripton?: string;
                        prefabKey?: string;
                        rangeId?: string;
                    }[];
                };
            }, {
                resKey?: string;
                target?: string;
                isToken?: boolean;
                addOrOverrideTalentDataBundle?: {
                    candidates?: {
                        displayRangeId?: boolean;
                        upgradeDescription?: string;
                        talentIndex?: number;
                        unlockCondition?: {
                            phase?: string | number;
                            level?: number;
                        };
                        requiredPotentialRank?: number;
                        prefabKey?: string;
                        name?: string;
                        description?: string;
                        rangeId?: string;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                        tokenKey?: string;
                    }[];
                };
                overrideTraitDataBundle?: {
                    candidates?: {
                        additionalDescription?: string;
                        unlockCondition?: {
                            phase?: string | number;
                            level?: number;
                        };
                        requiredPotentialRank?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                        overrideDescripton?: string;
                        prefabKey?: string;
                        rangeId?: string;
                    }[];
                };
            }>, "many">;
            attributeBlackboard: z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                value?: number;
                valueStr?: string;
            }, {
                key?: string;
                value?: number;
                valueStr?: string;
            }>, "many">;
            tokenAttributeBlackboard: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                value?: number;
                valueStr?: string;
            }, {
                key?: string;
                value?: number;
                valueStr?: string;
            }>, "many">>;
        }, "strict", z.ZodTypeAny, {
            equipLevel?: number;
            parts?: {
                resKey?: string;
                target?: string;
                isToken?: boolean;
                addOrOverrideTalentDataBundle?: {
                    candidates?: {
                        displayRangeId?: boolean;
                        upgradeDescription?: string;
                        talentIndex?: number;
                        unlockCondition?: {
                            phase?: string | number;
                            level?: number;
                        };
                        requiredPotentialRank?: number;
                        prefabKey?: string;
                        name?: string;
                        description?: string;
                        rangeId?: string;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                        tokenKey?: string;
                    }[];
                };
                overrideTraitDataBundle?: {
                    candidates?: {
                        additionalDescription?: string;
                        unlockCondition?: {
                            phase?: string | number;
                            level?: number;
                        };
                        requiredPotentialRank?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                        overrideDescripton?: string;
                        prefabKey?: string;
                        rangeId?: string;
                    }[];
                };
            }[];
            attributeBlackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            tokenAttributeBlackboard?: Record<string, {
                key?: string;
                value?: number;
                valueStr?: string;
            }[]>;
        }, {
            equipLevel?: number;
            parts?: {
                resKey?: string;
                target?: string;
                isToken?: boolean;
                addOrOverrideTalentDataBundle?: {
                    candidates?: {
                        displayRangeId?: boolean;
                        upgradeDescription?: string;
                        talentIndex?: number;
                        unlockCondition?: {
                            phase?: string | number;
                            level?: number;
                        };
                        requiredPotentialRank?: number;
                        prefabKey?: string;
                        name?: string;
                        description?: string;
                        rangeId?: string;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                        tokenKey?: string;
                    }[];
                };
                overrideTraitDataBundle?: {
                    candidates?: {
                        additionalDescription?: string;
                        unlockCondition?: {
                            phase?: string | number;
                            level?: number;
                        };
                        requiredPotentialRank?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                        overrideDescripton?: string;
                        prefabKey?: string;
                        rangeId?: string;
                    }[];
                };
            }[];
            attributeBlackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            tokenAttributeBlackboard?: Record<string, {
                key?: string;
                value?: number;
                valueStr?: string;
            }[]>;
        }>, "many">;
    }, "strict", z.ZodTypeAny, {
        phases?: {
            equipLevel?: number;
            parts?: {
                resKey?: string;
                target?: string;
                isToken?: boolean;
                addOrOverrideTalentDataBundle?: {
                    candidates?: {
                        displayRangeId?: boolean;
                        upgradeDescription?: string;
                        talentIndex?: number;
                        unlockCondition?: {
                            phase?: string | number;
                            level?: number;
                        };
                        requiredPotentialRank?: number;
                        prefabKey?: string;
                        name?: string;
                        description?: string;
                        rangeId?: string;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                        tokenKey?: string;
                    }[];
                };
                overrideTraitDataBundle?: {
                    candidates?: {
                        additionalDescription?: string;
                        unlockCondition?: {
                            phase?: string | number;
                            level?: number;
                        };
                        requiredPotentialRank?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                        overrideDescripton?: string;
                        prefabKey?: string;
                        rangeId?: string;
                    }[];
                };
            }[];
            attributeBlackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            tokenAttributeBlackboard?: Record<string, {
                key?: string;
                value?: number;
                valueStr?: string;
            }[]>;
        }[];
    }, {
        phases?: {
            equipLevel?: number;
            parts?: {
                resKey?: string;
                target?: string;
                isToken?: boolean;
                addOrOverrideTalentDataBundle?: {
                    candidates?: {
                        displayRangeId?: boolean;
                        upgradeDescription?: string;
                        talentIndex?: number;
                        unlockCondition?: {
                            phase?: string | number;
                            level?: number;
                        };
                        requiredPotentialRank?: number;
                        prefabKey?: string;
                        name?: string;
                        description?: string;
                        rangeId?: string;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                        tokenKey?: string;
                    }[];
                };
                overrideTraitDataBundle?: {
                    candidates?: {
                        additionalDescription?: string;
                        unlockCondition?: {
                            phase?: string | number;
                            level?: number;
                        };
                        requiredPotentialRank?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                        overrideDescripton?: string;
                        prefabKey?: string;
                        rangeId?: string;
                    }[];
                };
            }[];
            attributeBlackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            tokenAttributeBlackboard?: Record<string, {
                key?: string;
                value?: number;
                valueStr?: string;
            }[]>;
        }[];
    }>, z.ZodNull]>;
}, "strict", z.ZodTypeAny, {
    info?: {
        uniEquipId?: string;
        uniEquipName?: string;
        uniEquipIcon?: string;
        uniEquipDesc?: string;
        typeIcon?: string;
        typeName1?: string;
        typeName2?: string;
        equipShiningColor?: string;
        showEvolvePhase?: string;
        unlockEvolvePhase?: string;
        charId?: string;
        tmplId?: string;
        showLevel?: number;
        unlockLevel?: number;
        unlockFavorPoint?: number;
        missionList?: string[];
        itemCost?: Record<string, {
            id?: string;
            count?: number;
            type?: string;
        }[]>;
        type?: string;
        uniEquipGetTime?: number;
        charEquipOrder?: number;
    };
    data?: {
        phases?: {
            equipLevel?: number;
            parts?: {
                resKey?: string;
                target?: string;
                isToken?: boolean;
                addOrOverrideTalentDataBundle?: {
                    candidates?: {
                        displayRangeId?: boolean;
                        upgradeDescription?: string;
                        talentIndex?: number;
                        unlockCondition?: {
                            phase?: string | number;
                            level?: number;
                        };
                        requiredPotentialRank?: number;
                        prefabKey?: string;
                        name?: string;
                        description?: string;
                        rangeId?: string;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                        tokenKey?: string;
                    }[];
                };
                overrideTraitDataBundle?: {
                    candidates?: {
                        additionalDescription?: string;
                        unlockCondition?: {
                            phase?: string | number;
                            level?: number;
                        };
                        requiredPotentialRank?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                        overrideDescripton?: string;
                        prefabKey?: string;
                        rangeId?: string;
                    }[];
                };
            }[];
            attributeBlackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            tokenAttributeBlackboard?: Record<string, {
                key?: string;
                value?: number;
                valueStr?: string;
            }[]>;
        }[];
    };
}, {
    info?: {
        uniEquipId?: string;
        uniEquipName?: string;
        uniEquipIcon?: string;
        uniEquipDesc?: string;
        typeIcon?: string;
        typeName1?: string;
        typeName2?: string;
        equipShiningColor?: string;
        showEvolvePhase?: string;
        unlockEvolvePhase?: string;
        charId?: string;
        tmplId?: string;
        showLevel?: number;
        unlockLevel?: number;
        unlockFavorPoint?: number;
        missionList?: string[];
        itemCost?: Record<string, {
            id?: string;
            count?: number;
            type?: string;
        }[]>;
        type?: string;
        uniEquipGetTime?: number;
        charEquipOrder?: number;
    };
    data?: {
        phases?: {
            equipLevel?: number;
            parts?: {
                resKey?: string;
                target?: string;
                isToken?: boolean;
                addOrOverrideTalentDataBundle?: {
                    candidates?: {
                        displayRangeId?: boolean;
                        upgradeDescription?: string;
                        talentIndex?: number;
                        unlockCondition?: {
                            phase?: string | number;
                            level?: number;
                        };
                        requiredPotentialRank?: number;
                        prefabKey?: string;
                        name?: string;
                        description?: string;
                        rangeId?: string;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                        tokenKey?: string;
                    }[];
                };
                overrideTraitDataBundle?: {
                    candidates?: {
                        additionalDescription?: string;
                        unlockCondition?: {
                            phase?: string | number;
                            level?: number;
                        };
                        requiredPotentialRank?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                        overrideDescripton?: string;
                        prefabKey?: string;
                        rangeId?: string;
                    }[];
                };
            }[];
            attributeBlackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            tokenAttributeBlackboard?: Record<string, {
                key?: string;
                value?: number;
                valueStr?: string;
            }[]>;
        }[];
    };
}>;
export declare const ParadoxZod: z.ZodObject<{
    excel: z.ZodObject<{
        charId: z.ZodString;
        stageId: z.ZodString;
        levelId: z.ZodString;
        zoneId: z.ZodString;
        code: z.ZodString;
        name: z.ZodString;
        loadingPicId: z.ZodString;
        description: z.ZodString;
        unlockParam: z.ZodArray<z.ZodObject<{
            unlockType: z.ZodString;
            unlockParam1: z.ZodString;
            unlockParam2: z.ZodString;
            unlockParam3: z.ZodNull;
        }, "strict", z.ZodTypeAny, {
            unlockType?: string;
            unlockParam1?: string;
            unlockParam2?: string;
            unlockParam3?: null;
        }, {
            unlockType?: string;
            unlockParam1?: string;
            unlockParam2?: string;
            unlockParam3?: null;
        }>, "many">;
        rewardItem: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            count: z.ZodNumber;
            type: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            id?: string;
            count?: number;
            type?: string;
        }, {
            id?: string;
            count?: number;
            type?: string;
        }>, "many">;
        stageNameForShow: z.ZodString;
        zoneNameForShow: z.ZodString;
        picId: z.ZodString;
        stageGetTime: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        charId?: string;
        stageId?: string;
        levelId?: string;
        zoneId?: string;
        code?: string;
        name?: string;
        loadingPicId?: string;
        description?: string;
        unlockParam?: {
            unlockType?: string;
            unlockParam1?: string;
            unlockParam2?: string;
            unlockParam3?: null;
        }[];
        rewardItem?: {
            id?: string;
            count?: number;
            type?: string;
        }[];
        stageNameForShow?: string;
        zoneNameForShow?: string;
        picId?: string;
        stageGetTime?: number;
    }, {
        charId?: string;
        stageId?: string;
        levelId?: string;
        zoneId?: string;
        code?: string;
        name?: string;
        loadingPicId?: string;
        description?: string;
        unlockParam?: {
            unlockType?: string;
            unlockParam1?: string;
            unlockParam2?: string;
            unlockParam3?: null;
        }[];
        rewardItem?: {
            id?: string;
            count?: number;
            type?: string;
        }[];
        stageNameForShow?: string;
        zoneNameForShow?: string;
        picId?: string;
        stageGetTime?: number;
    }>;
    levels: z.ZodObject<{
        options: z.ZodObject<{
            characterLimit: z.ZodNumber;
            maxLifePoint: z.ZodNumber;
            initialCost: z.ZodNumber;
            maxCost: z.ZodNumber;
            costIncreaseTime: z.ZodNumber;
            moveMultiplier: z.ZodNumber;
            steeringEnabled: z.ZodBoolean;
            isTrainingLevel: z.ZodBoolean;
            isHardTrainingLevel: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            isPredefinedCardsSelectable: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            maxPlayTime: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
            functionDisableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            configBlackBoard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                value?: number;
                valueStr?: string;
            }, {
                key?: string;
                value?: number;
                valueStr?: string;
            }>, "many">, z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }, {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }>;
        levelId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        mapId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        bgmEvent: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        environmentSe: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        mapData: z.ZodObject<{
            map: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
            tiles: z.ZodArray<z.ZodObject<{
                tileKey: z.ZodString;
                heightType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                buildableType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                passableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                playerSideMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull]>;
                effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    offset: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                        z: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        x?: number;
                        y?: number;
                        z?: number;
                    }, {
                        x?: number;
                        y?: number;
                        z?: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }, {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }>, "many">, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }, {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }>, "many">;
            blockEdges: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodNull]>;
            tags: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
            effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                offset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                    z: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x?: number;
                    y?: number;
                    z?: number;
                }, {
                    x?: number;
                    y?: number;
                    z?: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }, {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }>, "many">, z.ZodNull]>;
            layerRects: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
            width: z.ZodOptional<z.ZodNumber>;
            height: z.ZodOptional<z.ZodNumber>;
        }, "strict", z.ZodTypeAny, {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        }, {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        }>;
        tilesDisallowToLocate: z.ZodArray<z.ZodAny, "many">;
        runes: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            difficultyMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            key: z.ZodString;
            professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
            buildableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            blackboard: z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                value?: number;
                valueStr?: string;
            }, {
                key?: string;
                value?: number;
                valueStr?: string;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }, {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }>, "many">, z.ZodNull]>;
        globalBuffs: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            prefabKey: z.ZodString;
            blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                value?: number;
                valueStr?: string;
            }, {
                key?: string;
                value?: number;
                valueStr?: string;
            }>, "many">, z.ZodNull]>;
            overrideCameraEffect: z.ZodNull;
            passProfessionMaskFlag: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
            useExtraData: z.ZodOptional<z.ZodBoolean>;
        }, "strict", z.ZodTypeAny, {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }, {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }>, "many">, z.ZodNull]>;
        routes: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            motionMode: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            startPosition: z.ZodObject<{
                row: z.ZodNumber;
                col: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                row?: number;
                col?: number;
            }, {
                row?: number;
                col?: number;
            }>;
            endPosition: z.ZodObject<{
                row: z.ZodNumber;
                col: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                row?: number;
                col?: number;
            }, {
                row?: number;
                col?: number;
            }>;
            spawnRandomRange: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                x?: number;
                y?: number;
            }, {
                x?: number;
                y?: number;
            }>;
            spawnOffset: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                x?: number;
                y?: number;
            }, {
                x?: number;
                y?: number;
            }>;
            checkpoints: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                type: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                time: z.ZodNumber;
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    row?: number;
                    col?: number;
                }, {
                    row?: number;
                    col?: number;
                }>;
                reachOffset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x?: number;
                    y?: number;
                }, {
                    x?: number;
                    y?: number;
                }>;
                randomizeReachOffset: z.ZodBoolean;
                reachDistance: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }, {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }>, "many">, z.ZodNull]>;
            allowDiagonalMove: z.ZodBoolean;
            visitEveryTileCenter: z.ZodBoolean;
            visitEveryNodeCenter: z.ZodBoolean;
            visitEveryCheckPoint: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }, {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }>, z.ZodNull]>, "many">;
        extraRoutes: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodUndefined]>;
        enemies: z.ZodArray<z.ZodAny, "many">;
        enemyDbRefs: z.ZodArray<z.ZodObject<{
            useDb: z.ZodBoolean;
            id: z.ZodString;
            level: z.ZodNumber;
            overwrittenData: z.ZodUnion<[z.ZodObject<{
                name: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>;
                description: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>;
                prefabKey: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>;
                attributes: z.ZodObject<{
                    maxHp: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    atk: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    def: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    magicResistance: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    cost: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    blockCnt: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    moveSpeed: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    attackSpeed: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    baseAttackTime: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    respawnTime: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    hpRecoveryPerSec: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    spRecoveryPerSec: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    maxDeployCount: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    massLevel: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    baseForceLevel: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    tauntLevel: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    epDamageResistance: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    epResistance: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    stunImmune: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>;
                    silenceImmune: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>;
                    sleepImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>, z.ZodUndefined]>;
                    frozenImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>, z.ZodUndefined]>;
                    levitateImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                }, {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                }>;
                applyWay: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>, z.ZodUndefined]>;
                motion: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>, z.ZodUndefined]>;
                enemyTags: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string[];
                }, {
                    m_defined?: boolean;
                    m_value?: string[];
                }>, z.ZodUndefined]>;
                lifePointReduce: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>;
                levelType: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>, z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>, z.ZodUndefined]>;
                rangeRadius: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>;
                numOfExtraDrops: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>, z.ZodUndefined]>;
                viewRadius: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>, z.ZodUndefined]>;
                notCountInTotal: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodBoolean;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: boolean;
                }, {
                    m_defined?: boolean;
                    m_value?: boolean;
                }>, z.ZodUndefined]>;
                talentBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull]>;
                skills: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    prefabKey: z.ZodString;
                    priority: z.ZodNumber;
                    cooldown: z.ZodNumber;
                    initCooldown: z.ZodNumber;
                    spCost: z.ZodNumber;
                    blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }>, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }, {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }>, "many">, z.ZodNull]>;
                spData: z.ZodUnion<[z.ZodObject<{
                    spType: z.ZodString;
                    maxSp: z.ZodNumber;
                    initSp: z.ZodNumber;
                    increment: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                }, {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                }>, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            }, {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            }>, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }, {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }>, "many">;
        waves: z.ZodArray<z.ZodObject<{
            preDelay: z.ZodNumber;
            postDelay: z.ZodNumber;
            maxTimeWaitingForNextWave: z.ZodNumber;
            fragments: z.ZodArray<z.ZodObject<{
                preDelay: z.ZodNumber;
                actions: z.ZodArray<z.ZodObject<{
                    actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    managedByScheduler: z.ZodBoolean;
                    key: z.ZodString;
                    count: z.ZodNumber;
                    preDelay: z.ZodNumber;
                    interval: z.ZodNumber;
                    routeIndex: z.ZodNumber;
                    blockFragment: z.ZodBoolean;
                    autoPreviewRoute: z.ZodBoolean;
                    autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                    hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                    weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                    dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }, {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }>, "many">;
                name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strict", z.ZodTypeAny, {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }, {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }>, "many">;
            advancedWaveTag: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strict", z.ZodTypeAny, {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }, {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }>, "many">;
        branches: z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodObject<{
            phases: z.ZodArray<z.ZodObject<{
                preDelay: z.ZodNumber;
                actions: z.ZodArray<z.ZodObject<{
                    actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    managedByScheduler: z.ZodBoolean;
                    key: z.ZodString;
                    count: z.ZodNumber;
                    preDelay: z.ZodNumber;
                    interval: z.ZodNumber;
                    routeIndex: z.ZodNumber;
                    blockFragment: z.ZodBoolean;
                    autoPreviewRoute: z.ZodBoolean;
                    autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                    hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                    weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                    dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }, {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }>, "many">;
                m_randomActionGroups: z.ZodOptional<z.ZodNull>;
                m_actionWithRandomSpawn: z.ZodOptional<z.ZodNull>;
                m_validActionPackKeys: z.ZodOptional<z.ZodNull>;
            }, "strict", z.ZodTypeAny, {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }, {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }>>, z.ZodNull]>;
        predefines: z.ZodUnion<[z.ZodObject<{
            characterInsts: z.ZodArray<z.ZodAny, "many">;
            tokenInsts: z.ZodArray<z.ZodObject<{
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    row?: number;
                    col?: number;
                }, {
                    row?: number;
                    col?: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                hidden: z.ZodBoolean;
                alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    level: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    level?: number;
                }, {
                    key?: string;
                    level?: number;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
                inst: z.ZodObject<{
                    characterKey: z.ZodString;
                    level: z.ZodNumber;
                    phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    favorPoint: z.ZodNumber;
                    potentialRank: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                }, {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                }>;
                skillIndex: z.ZodNumber;
                mainSkillLvl: z.ZodNumber;
                skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }, {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }>, "many">;
            characterCards: z.ZodArray<z.ZodAny, "many">;
            tokenCards: z.ZodArray<z.ZodAny, "many">;
        }, "strict", z.ZodTypeAny, {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        }, {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        }>, z.ZodNull]>;
        hardPredefines: z.ZodUnion<[z.ZodObject<{
            characterInsts: z.ZodArray<z.ZodAny, "many">;
            tokenInsts: z.ZodArray<z.ZodObject<{
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    row?: number;
                    col?: number;
                }, {
                    row?: number;
                    col?: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                hidden: z.ZodBoolean;
                alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    level: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    level?: number;
                }, {
                    key?: string;
                    level?: number;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
                inst: z.ZodObject<{
                    characterKey: z.ZodString;
                    level: z.ZodNumber;
                    phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    favorPoint: z.ZodNumber;
                    potentialRank: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                }, {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                }>;
                skillIndex: z.ZodNumber;
                mainSkillLvl: z.ZodNumber;
                skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }, {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }>, "many">;
            characterCards: z.ZodArray<z.ZodAny, "many">;
            tokenCards: z.ZodArray<z.ZodAny, "many">;
        }, "strict", z.ZodTypeAny, {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        }, {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        }>, z.ZodNull, z.ZodUndefined]>;
        excludeCharIdList: z.ZodNull;
        randomSeed: z.ZodNumber;
        operaConfig: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        runtimeData: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
    }, "strict", z.ZodTypeAny, {
        options?: {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        };
        levelId?: string;
        mapId?: string;
        bgmEvent?: string;
        environmentSe?: string;
        mapData?: {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        };
        tilesDisallowToLocate?: any[];
        runes?: {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
        globalBuffs?: {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }[];
        routes?: {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }[];
        extraRoutes?: any[];
        enemies?: any[];
        enemyDbRefs?: {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }[];
        waves?: {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }[];
        branches?: Record<string, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }>;
        predefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        hardPredefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        excludeCharIdList?: null;
        randomSeed?: number;
        operaConfig?: string;
        runtimeData?: null;
    }, {
        options?: {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        };
        levelId?: string;
        mapId?: string;
        bgmEvent?: string;
        environmentSe?: string;
        mapData?: {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        };
        tilesDisallowToLocate?: any[];
        runes?: {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
        globalBuffs?: {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }[];
        routes?: {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }[];
        extraRoutes?: any[];
        enemies?: any[];
        enemyDbRefs?: {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }[];
        waves?: {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }[];
        branches?: Record<string, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }>;
        predefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        hardPredefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        excludeCharIdList?: null;
        randomSeed?: number;
        operaConfig?: string;
        runtimeData?: null;
    }>;
}, "strict", z.ZodTypeAny, {
    excel?: {
        charId?: string;
        stageId?: string;
        levelId?: string;
        zoneId?: string;
        code?: string;
        name?: string;
        loadingPicId?: string;
        description?: string;
        unlockParam?: {
            unlockType?: string;
            unlockParam1?: string;
            unlockParam2?: string;
            unlockParam3?: null;
        }[];
        rewardItem?: {
            id?: string;
            count?: number;
            type?: string;
        }[];
        stageNameForShow?: string;
        zoneNameForShow?: string;
        picId?: string;
        stageGetTime?: number;
    };
    levels?: {
        options?: {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        };
        levelId?: string;
        mapId?: string;
        bgmEvent?: string;
        environmentSe?: string;
        mapData?: {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        };
        tilesDisallowToLocate?: any[];
        runes?: {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
        globalBuffs?: {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }[];
        routes?: {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }[];
        extraRoutes?: any[];
        enemies?: any[];
        enemyDbRefs?: {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }[];
        waves?: {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }[];
        branches?: Record<string, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }>;
        predefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        hardPredefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        excludeCharIdList?: null;
        randomSeed?: number;
        operaConfig?: string;
        runtimeData?: null;
    };
}, {
    excel?: {
        charId?: string;
        stageId?: string;
        levelId?: string;
        zoneId?: string;
        code?: string;
        name?: string;
        loadingPicId?: string;
        description?: string;
        unlockParam?: {
            unlockType?: string;
            unlockParam1?: string;
            unlockParam2?: string;
            unlockParam3?: null;
        }[];
        rewardItem?: {
            id?: string;
            count?: number;
            type?: string;
        }[];
        stageNameForShow?: string;
        zoneNameForShow?: string;
        picId?: string;
        stageGetTime?: number;
    };
    levels?: {
        options?: {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        };
        levelId?: string;
        mapId?: string;
        bgmEvent?: string;
        environmentSe?: string;
        mapData?: {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        };
        tilesDisallowToLocate?: any[];
        runes?: {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
        globalBuffs?: {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }[];
        routes?: {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }[];
        extraRoutes?: any[];
        enemies?: any[];
        enemyDbRefs?: {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }[];
        waves?: {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }[];
        branches?: Record<string, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }>;
        predefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        hardPredefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        excludeCharIdList?: null;
        randomSeed?: number;
        operaConfig?: string;
        runtimeData?: null;
    };
}>;
export declare const RogueThemeZod: z.ZodObject<{
    name: z.ZodString;
    stageDict: z.ZodRecord<z.ZodString, z.ZodObject<{
        excel: z.ZodObject<{
            id: z.ZodString;
            linkedStageId: z.ZodString;
            levelId: z.ZodString;
            code: z.ZodString;
            name: z.ZodString;
            loadingPicId: z.ZodString;
            description: z.ZodString;
            eliteDesc: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            isBoss: z.ZodNumber;
            isElite: z.ZodNumber;
            difficulty: z.ZodString;
            capsulePool: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            capsuleProb: z.ZodNumber;
            vutresProb: z.ZodArray<z.ZodNumber, "many">;
            boxProb: z.ZodArray<z.ZodNumber, "many">;
            specialNodeId: z.ZodNullable<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            id?: string;
            linkedStageId?: string;
            levelId?: string;
            code?: string;
            name?: string;
            loadingPicId?: string;
            description?: string;
            eliteDesc?: string;
            isBoss?: number;
            isElite?: number;
            difficulty?: string;
            capsulePool?: string;
            capsuleProb?: number;
            vutresProb?: number[];
            boxProb?: number[];
            specialNodeId?: string;
        }, {
            id?: string;
            linkedStageId?: string;
            levelId?: string;
            code?: string;
            name?: string;
            loadingPicId?: string;
            description?: string;
            eliteDesc?: string;
            isBoss?: number;
            isElite?: number;
            difficulty?: string;
            capsulePool?: string;
            capsuleProb?: number;
            vutresProb?: number[];
            boxProb?: number[];
            specialNodeId?: string;
        }>;
        levels: z.ZodObject<{
            options: z.ZodObject<{
                characterLimit: z.ZodNumber;
                maxLifePoint: z.ZodNumber;
                initialCost: z.ZodNumber;
                maxCost: z.ZodNumber;
                costIncreaseTime: z.ZodNumber;
                moveMultiplier: z.ZodNumber;
                steeringEnabled: z.ZodBoolean;
                isTrainingLevel: z.ZodBoolean;
                isHardTrainingLevel: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                isPredefinedCardsSelectable: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                maxPlayTime: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                functionDisableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                configBlackBoard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }, {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }>;
            levelId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            mapId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            bgmEvent: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            environmentSe: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            mapData: z.ZodObject<{
                map: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
                tiles: z.ZodArray<z.ZodObject<{
                    tileKey: z.ZodString;
                    heightType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    buildableType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    passableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    playerSideMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                    blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }>, "many">, z.ZodNull]>;
                    effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        offset: z.ZodObject<{
                            x: z.ZodNumber;
                            y: z.ZodNumber;
                            z: z.ZodNumber;
                        }, "strict", z.ZodTypeAny, {
                            x?: number;
                            y?: number;
                            z?: number;
                        }, {
                            x?: number;
                            y?: number;
                            z?: number;
                        }>;
                        direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }, {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }>, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }, {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }>, "many">;
                blockEdges: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodNull]>;
                tags: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
                effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    offset: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                        z: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        x?: number;
                        y?: number;
                        z?: number;
                    }, {
                        x?: number;
                        y?: number;
                        z?: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }, {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }>, "many">, z.ZodNull]>;
                layerRects: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                width: z.ZodOptional<z.ZodNumber>;
                height: z.ZodOptional<z.ZodNumber>;
            }, "strict", z.ZodTypeAny, {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            }, {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            }>;
            tilesDisallowToLocate: z.ZodArray<z.ZodAny, "many">;
            runes: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                difficultyMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                key: z.ZodString;
                professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                buildableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                blackboard: z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">;
            }, "strict", z.ZodTypeAny, {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }, {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }>, "many">, z.ZodNull]>;
            globalBuffs: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                prefabKey: z.ZodString;
                blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull]>;
                overrideCameraEffect: z.ZodNull;
                passProfessionMaskFlag: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                useExtraData: z.ZodOptional<z.ZodBoolean>;
            }, "strict", z.ZodTypeAny, {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }, {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }>, "many">, z.ZodNull]>;
            routes: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                motionMode: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                startPosition: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    row?: number;
                    col?: number;
                }, {
                    row?: number;
                    col?: number;
                }>;
                endPosition: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    row?: number;
                    col?: number;
                }, {
                    row?: number;
                    col?: number;
                }>;
                spawnRandomRange: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x?: number;
                    y?: number;
                }, {
                    x?: number;
                    y?: number;
                }>;
                spawnOffset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x?: number;
                    y?: number;
                }, {
                    x?: number;
                    y?: number;
                }>;
                checkpoints: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    time: z.ZodNumber;
                    position: z.ZodObject<{
                        row: z.ZodNumber;
                        col: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        row?: number;
                        col?: number;
                    }, {
                        row?: number;
                        col?: number;
                    }>;
                    reachOffset: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        x?: number;
                        y?: number;
                    }, {
                        x?: number;
                        y?: number;
                    }>;
                    randomizeReachOffset: z.ZodBoolean;
                    reachDistance: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }, {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }>, "many">, z.ZodNull]>;
                allowDiagonalMove: z.ZodBoolean;
                visitEveryTileCenter: z.ZodBoolean;
                visitEveryNodeCenter: z.ZodBoolean;
                visitEveryCheckPoint: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }, {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }>, z.ZodNull]>, "many">;
            extraRoutes: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodUndefined]>;
            enemies: z.ZodArray<z.ZodAny, "many">;
            enemyDbRefs: z.ZodArray<z.ZodObject<{
                useDb: z.ZodBoolean;
                id: z.ZodString;
                level: z.ZodNumber;
                overwrittenData: z.ZodUnion<[z.ZodObject<{
                    name: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: string;
                    }, {
                        m_defined?: boolean;
                        m_value?: string;
                    }>;
                    description: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: string;
                    }, {
                        m_defined?: boolean;
                        m_value?: string;
                    }>;
                    prefabKey: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: string;
                    }, {
                        m_defined?: boolean;
                        m_value?: string;
                    }>;
                    attributes: z.ZodObject<{
                        maxHp: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        atk: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        def: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        magicResistance: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        cost: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        blockCnt: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        moveSpeed: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        attackSpeed: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        baseAttackTime: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        respawnTime: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        hpRecoveryPerSec: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        spRecoveryPerSec: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        maxDeployCount: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        massLevel: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        baseForceLevel: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        tauntLevel: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>, z.ZodUndefined]>;
                        epDamageResistance: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>, z.ZodUndefined]>;
                        epResistance: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>, z.ZodUndefined]>;
                        stunImmune: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }>;
                        silenceImmune: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }>;
                        sleepImmune: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }>, z.ZodUndefined]>;
                        frozenImmune: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }>, z.ZodUndefined]>;
                        levitateImmune: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }>, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    }, {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    }>;
                    applyWay: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: string;
                    }, {
                        m_defined?: boolean;
                        m_value?: string;
                    }>, z.ZodUndefined]>;
                    motion: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: string;
                    }, {
                        m_defined?: boolean;
                        m_value?: string;
                    }>, z.ZodUndefined]>;
                    enemyTags: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: string[];
                    }, {
                        m_defined?: boolean;
                        m_value?: string[];
                    }>, z.ZodUndefined]>;
                    lifePointReduce: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    levelType: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: string;
                    }, {
                        m_defined?: boolean;
                        m_value?: string;
                    }>, z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    rangeRadius: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    numOfExtraDrops: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    viewRadius: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    notCountInTotal: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>, z.ZodUndefined]>;
                    talentBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }>, "many">, z.ZodNull]>;
                    skills: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        prefabKey: z.ZodString;
                        priority: z.ZodNumber;
                        cooldown: z.ZodNumber;
                        initCooldown: z.ZodNumber;
                        spCost: z.ZodNumber;
                        blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                            key: z.ZodString;
                            value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                            valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        }, "strict", z.ZodTypeAny, {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }, {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }>, "many">, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }, {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }>, "many">, z.ZodNull]>;
                    spData: z.ZodUnion<[z.ZodObject<{
                        spType: z.ZodString;
                        maxSp: z.ZodNumber;
                        initSp: z.ZodNumber;
                        increment: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    }, {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    }>, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                }, {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                }>, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }, {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }>, "many">;
            waves: z.ZodArray<z.ZodObject<{
                preDelay: z.ZodNumber;
                postDelay: z.ZodNumber;
                maxTimeWaitingForNextWave: z.ZodNumber;
                fragments: z.ZodArray<z.ZodObject<{
                    preDelay: z.ZodNumber;
                    actions: z.ZodArray<z.ZodObject<{
                        actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        managedByScheduler: z.ZodBoolean;
                        key: z.ZodString;
                        count: z.ZodNumber;
                        preDelay: z.ZodNumber;
                        interval: z.ZodNumber;
                        routeIndex: z.ZodNumber;
                        blockFragment: z.ZodBoolean;
                        autoPreviewRoute: z.ZodBoolean;
                        autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                        hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                        weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                        dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }, {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }>, "many">;
                    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                }, "strict", z.ZodTypeAny, {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }, {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }>, "many">;
                advancedWaveTag: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strict", z.ZodTypeAny, {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }, {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }>, "many">;
            branches: z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodObject<{
                phases: z.ZodArray<z.ZodObject<{
                    preDelay: z.ZodNumber;
                    actions: z.ZodArray<z.ZodObject<{
                        actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        managedByScheduler: z.ZodBoolean;
                        key: z.ZodString;
                        count: z.ZodNumber;
                        preDelay: z.ZodNumber;
                        interval: z.ZodNumber;
                        routeIndex: z.ZodNumber;
                        blockFragment: z.ZodBoolean;
                        autoPreviewRoute: z.ZodBoolean;
                        autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                        hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                        weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                        dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }, {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }>, "many">;
                    m_randomActionGroups: z.ZodOptional<z.ZodNull>;
                    m_actionWithRandomSpawn: z.ZodOptional<z.ZodNull>;
                    m_validActionPackKeys: z.ZodOptional<z.ZodNull>;
                }, "strict", z.ZodTypeAny, {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }, {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }>, "many">;
            }, "strict", z.ZodTypeAny, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }>>, z.ZodNull]>;
            predefines: z.ZodUnion<[z.ZodObject<{
                characterInsts: z.ZodArray<z.ZodAny, "many">;
                tokenInsts: z.ZodArray<z.ZodObject<{
                    position: z.ZodObject<{
                        row: z.ZodNumber;
                        col: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        row?: number;
                        col?: number;
                    }, {
                        row?: number;
                        col?: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    hidden: z.ZodBoolean;
                    alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        level: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        level?: number;
                    }, {
                        key?: string;
                        level?: number;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                    inst: z.ZodObject<{
                        characterKey: z.ZodString;
                        level: z.ZodNumber;
                        phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        favorPoint: z.ZodNumber;
                        potentialRank: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    }, {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    }>;
                    skillIndex: z.ZodNumber;
                    mainSkillLvl: z.ZodNumber;
                    skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }, {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }>, "many">;
                characterCards: z.ZodArray<z.ZodAny, "many">;
                tokenCards: z.ZodArray<z.ZodAny, "many">;
            }, "strict", z.ZodTypeAny, {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            }, {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            }>, z.ZodNull]>;
            hardPredefines: z.ZodUnion<[z.ZodObject<{
                characterInsts: z.ZodArray<z.ZodAny, "many">;
                tokenInsts: z.ZodArray<z.ZodObject<{
                    position: z.ZodObject<{
                        row: z.ZodNumber;
                        col: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        row?: number;
                        col?: number;
                    }, {
                        row?: number;
                        col?: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    hidden: z.ZodBoolean;
                    alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        level: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        level?: number;
                    }, {
                        key?: string;
                        level?: number;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                    inst: z.ZodObject<{
                        characterKey: z.ZodString;
                        level: z.ZodNumber;
                        phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        favorPoint: z.ZodNumber;
                        potentialRank: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    }, {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    }>;
                    skillIndex: z.ZodNumber;
                    mainSkillLvl: z.ZodNumber;
                    skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }, {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }>, "many">;
                characterCards: z.ZodArray<z.ZodAny, "many">;
                tokenCards: z.ZodArray<z.ZodAny, "many">;
            }, "strict", z.ZodTypeAny, {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            }, {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            }>, z.ZodNull, z.ZodUndefined]>;
            excludeCharIdList: z.ZodNull;
            randomSeed: z.ZodNumber;
            operaConfig: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            runtimeData: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            options?: {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            };
            levelId?: string;
            mapId?: string;
            bgmEvent?: string;
            environmentSe?: string;
            mapData?: {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            };
            tilesDisallowToLocate?: any[];
            runes?: {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            globalBuffs?: {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }[];
            routes?: {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }[];
            extraRoutes?: any[];
            enemies?: any[];
            enemyDbRefs?: {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }[];
            waves?: {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }[];
            branches?: Record<string, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }>;
            predefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            hardPredefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            excludeCharIdList?: null;
            randomSeed?: number;
            operaConfig?: string;
            runtimeData?: null;
        }, {
            options?: {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            };
            levelId?: string;
            mapId?: string;
            bgmEvent?: string;
            environmentSe?: string;
            mapData?: {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            };
            tilesDisallowToLocate?: any[];
            runes?: {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            globalBuffs?: {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }[];
            routes?: {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }[];
            extraRoutes?: any[];
            enemies?: any[];
            enemyDbRefs?: {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }[];
            waves?: {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }[];
            branches?: Record<string, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }>;
            predefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            hardPredefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            excludeCharIdList?: null;
            randomSeed?: number;
            operaConfig?: string;
            runtimeData?: null;
        }>;
    }, "strict", z.ZodTypeAny, {
        excel?: {
            id?: string;
            linkedStageId?: string;
            levelId?: string;
            code?: string;
            name?: string;
            loadingPicId?: string;
            description?: string;
            eliteDesc?: string;
            isBoss?: number;
            isElite?: number;
            difficulty?: string;
            capsulePool?: string;
            capsuleProb?: number;
            vutresProb?: number[];
            boxProb?: number[];
            specialNodeId?: string;
        };
        levels?: {
            options?: {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            };
            levelId?: string;
            mapId?: string;
            bgmEvent?: string;
            environmentSe?: string;
            mapData?: {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            };
            tilesDisallowToLocate?: any[];
            runes?: {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            globalBuffs?: {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }[];
            routes?: {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }[];
            extraRoutes?: any[];
            enemies?: any[];
            enemyDbRefs?: {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }[];
            waves?: {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }[];
            branches?: Record<string, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }>;
            predefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            hardPredefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            excludeCharIdList?: null;
            randomSeed?: number;
            operaConfig?: string;
            runtimeData?: null;
        };
    }, {
        excel?: {
            id?: string;
            linkedStageId?: string;
            levelId?: string;
            code?: string;
            name?: string;
            loadingPicId?: string;
            description?: string;
            eliteDesc?: string;
            isBoss?: number;
            isElite?: number;
            difficulty?: string;
            capsulePool?: string;
            capsuleProb?: number;
            vutresProb?: number[];
            boxProb?: number[];
            specialNodeId?: string;
        };
        levels?: {
            options?: {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            };
            levelId?: string;
            mapId?: string;
            bgmEvent?: string;
            environmentSe?: string;
            mapData?: {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            };
            tilesDisallowToLocate?: any[];
            runes?: {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            globalBuffs?: {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }[];
            routes?: {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }[];
            extraRoutes?: any[];
            enemies?: any[];
            enemyDbRefs?: {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }[];
            waves?: {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }[];
            branches?: Record<string, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }>;
            predefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            hardPredefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            excludeCharIdList?: null;
            randomSeed?: number;
            operaConfig?: string;
            runtimeData?: null;
        };
    }>>;
    toughStageDict: z.ZodRecord<z.ZodString, z.ZodObject<{
        excel: z.ZodObject<{
            id: z.ZodString;
            linkedStageId: z.ZodString;
            levelId: z.ZodString;
            code: z.ZodString;
            name: z.ZodString;
            loadingPicId: z.ZodString;
            description: z.ZodString;
            eliteDesc: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            isBoss: z.ZodNumber;
            isElite: z.ZodNumber;
            difficulty: z.ZodString;
            capsulePool: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            capsuleProb: z.ZodNumber;
            vutresProb: z.ZodArray<z.ZodNumber, "many">;
            boxProb: z.ZodArray<z.ZodNumber, "many">;
            specialNodeId: z.ZodNullable<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            id?: string;
            linkedStageId?: string;
            levelId?: string;
            code?: string;
            name?: string;
            loadingPicId?: string;
            description?: string;
            eliteDesc?: string;
            isBoss?: number;
            isElite?: number;
            difficulty?: string;
            capsulePool?: string;
            capsuleProb?: number;
            vutresProb?: number[];
            boxProb?: number[];
            specialNodeId?: string;
        }, {
            id?: string;
            linkedStageId?: string;
            levelId?: string;
            code?: string;
            name?: string;
            loadingPicId?: string;
            description?: string;
            eliteDesc?: string;
            isBoss?: number;
            isElite?: number;
            difficulty?: string;
            capsulePool?: string;
            capsuleProb?: number;
            vutresProb?: number[];
            boxProb?: number[];
            specialNodeId?: string;
        }>;
        levels: z.ZodObject<{
            options: z.ZodObject<{
                characterLimit: z.ZodNumber;
                maxLifePoint: z.ZodNumber;
                initialCost: z.ZodNumber;
                maxCost: z.ZodNumber;
                costIncreaseTime: z.ZodNumber;
                moveMultiplier: z.ZodNumber;
                steeringEnabled: z.ZodBoolean;
                isTrainingLevel: z.ZodBoolean;
                isHardTrainingLevel: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                isPredefinedCardsSelectable: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                maxPlayTime: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                functionDisableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                configBlackBoard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }, {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }>;
            levelId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            mapId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            bgmEvent: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            environmentSe: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            mapData: z.ZodObject<{
                map: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
                tiles: z.ZodArray<z.ZodObject<{
                    tileKey: z.ZodString;
                    heightType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    buildableType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    passableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    playerSideMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                    blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }>, "many">, z.ZodNull]>;
                    effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        offset: z.ZodObject<{
                            x: z.ZodNumber;
                            y: z.ZodNumber;
                            z: z.ZodNumber;
                        }, "strict", z.ZodTypeAny, {
                            x?: number;
                            y?: number;
                            z?: number;
                        }, {
                            x?: number;
                            y?: number;
                            z?: number;
                        }>;
                        direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }, {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }>, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }, {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }>, "many">;
                blockEdges: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodNull]>;
                tags: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
                effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    offset: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                        z: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        x?: number;
                        y?: number;
                        z?: number;
                    }, {
                        x?: number;
                        y?: number;
                        z?: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }, {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }>, "many">, z.ZodNull]>;
                layerRects: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                width: z.ZodOptional<z.ZodNumber>;
                height: z.ZodOptional<z.ZodNumber>;
            }, "strict", z.ZodTypeAny, {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            }, {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            }>;
            tilesDisallowToLocate: z.ZodArray<z.ZodAny, "many">;
            runes: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                difficultyMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                key: z.ZodString;
                professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                buildableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                blackboard: z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">;
            }, "strict", z.ZodTypeAny, {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }, {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }>, "many">, z.ZodNull]>;
            globalBuffs: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                prefabKey: z.ZodString;
                blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull]>;
                overrideCameraEffect: z.ZodNull;
                passProfessionMaskFlag: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                useExtraData: z.ZodOptional<z.ZodBoolean>;
            }, "strict", z.ZodTypeAny, {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }, {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }>, "many">, z.ZodNull]>;
            routes: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                motionMode: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                startPosition: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    row?: number;
                    col?: number;
                }, {
                    row?: number;
                    col?: number;
                }>;
                endPosition: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    row?: number;
                    col?: number;
                }, {
                    row?: number;
                    col?: number;
                }>;
                spawnRandomRange: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x?: number;
                    y?: number;
                }, {
                    x?: number;
                    y?: number;
                }>;
                spawnOffset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x?: number;
                    y?: number;
                }, {
                    x?: number;
                    y?: number;
                }>;
                checkpoints: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    time: z.ZodNumber;
                    position: z.ZodObject<{
                        row: z.ZodNumber;
                        col: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        row?: number;
                        col?: number;
                    }, {
                        row?: number;
                        col?: number;
                    }>;
                    reachOffset: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        x?: number;
                        y?: number;
                    }, {
                        x?: number;
                        y?: number;
                    }>;
                    randomizeReachOffset: z.ZodBoolean;
                    reachDistance: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }, {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }>, "many">, z.ZodNull]>;
                allowDiagonalMove: z.ZodBoolean;
                visitEveryTileCenter: z.ZodBoolean;
                visitEveryNodeCenter: z.ZodBoolean;
                visitEveryCheckPoint: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }, {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }>, z.ZodNull]>, "many">;
            extraRoutes: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodUndefined]>;
            enemies: z.ZodArray<z.ZodAny, "many">;
            enemyDbRefs: z.ZodArray<z.ZodObject<{
                useDb: z.ZodBoolean;
                id: z.ZodString;
                level: z.ZodNumber;
                overwrittenData: z.ZodUnion<[z.ZodObject<{
                    name: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: string;
                    }, {
                        m_defined?: boolean;
                        m_value?: string;
                    }>;
                    description: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: string;
                    }, {
                        m_defined?: boolean;
                        m_value?: string;
                    }>;
                    prefabKey: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: string;
                    }, {
                        m_defined?: boolean;
                        m_value?: string;
                    }>;
                    attributes: z.ZodObject<{
                        maxHp: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        atk: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        def: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        magicResistance: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        cost: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        blockCnt: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        moveSpeed: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        attackSpeed: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        baseAttackTime: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        respawnTime: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        hpRecoveryPerSec: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        spRecoveryPerSec: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        maxDeployCount: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        massLevel: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        baseForceLevel: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        tauntLevel: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>, z.ZodUndefined]>;
                        epDamageResistance: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>, z.ZodUndefined]>;
                        epResistance: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>, z.ZodUndefined]>;
                        stunImmune: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }>;
                        silenceImmune: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }>;
                        sleepImmune: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }>, z.ZodUndefined]>;
                        frozenImmune: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }>, z.ZodUndefined]>;
                        levitateImmune: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }>, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    }, {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    }>;
                    applyWay: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: string;
                    }, {
                        m_defined?: boolean;
                        m_value?: string;
                    }>, z.ZodUndefined]>;
                    motion: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: string;
                    }, {
                        m_defined?: boolean;
                        m_value?: string;
                    }>, z.ZodUndefined]>;
                    enemyTags: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: string[];
                    }, {
                        m_defined?: boolean;
                        m_value?: string[];
                    }>, z.ZodUndefined]>;
                    lifePointReduce: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    levelType: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: string;
                    }, {
                        m_defined?: boolean;
                        m_value?: string;
                    }>, z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    rangeRadius: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    numOfExtraDrops: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    viewRadius: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    notCountInTotal: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>, z.ZodUndefined]>;
                    talentBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }>, "many">, z.ZodNull]>;
                    skills: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        prefabKey: z.ZodString;
                        priority: z.ZodNumber;
                        cooldown: z.ZodNumber;
                        initCooldown: z.ZodNumber;
                        spCost: z.ZodNumber;
                        blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                            key: z.ZodString;
                            value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                            valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        }, "strict", z.ZodTypeAny, {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }, {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }>, "many">, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }, {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }>, "many">, z.ZodNull]>;
                    spData: z.ZodUnion<[z.ZodObject<{
                        spType: z.ZodString;
                        maxSp: z.ZodNumber;
                        initSp: z.ZodNumber;
                        increment: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    }, {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    }>, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                }, {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                }>, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }, {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }>, "many">;
            waves: z.ZodArray<z.ZodObject<{
                preDelay: z.ZodNumber;
                postDelay: z.ZodNumber;
                maxTimeWaitingForNextWave: z.ZodNumber;
                fragments: z.ZodArray<z.ZodObject<{
                    preDelay: z.ZodNumber;
                    actions: z.ZodArray<z.ZodObject<{
                        actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        managedByScheduler: z.ZodBoolean;
                        key: z.ZodString;
                        count: z.ZodNumber;
                        preDelay: z.ZodNumber;
                        interval: z.ZodNumber;
                        routeIndex: z.ZodNumber;
                        blockFragment: z.ZodBoolean;
                        autoPreviewRoute: z.ZodBoolean;
                        autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                        hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                        weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                        dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }, {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }>, "many">;
                    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                }, "strict", z.ZodTypeAny, {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }, {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }>, "many">;
                advancedWaveTag: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strict", z.ZodTypeAny, {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }, {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }>, "many">;
            branches: z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodObject<{
                phases: z.ZodArray<z.ZodObject<{
                    preDelay: z.ZodNumber;
                    actions: z.ZodArray<z.ZodObject<{
                        actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        managedByScheduler: z.ZodBoolean;
                        key: z.ZodString;
                        count: z.ZodNumber;
                        preDelay: z.ZodNumber;
                        interval: z.ZodNumber;
                        routeIndex: z.ZodNumber;
                        blockFragment: z.ZodBoolean;
                        autoPreviewRoute: z.ZodBoolean;
                        autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                        hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                        weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                        dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }, {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }>, "many">;
                    m_randomActionGroups: z.ZodOptional<z.ZodNull>;
                    m_actionWithRandomSpawn: z.ZodOptional<z.ZodNull>;
                    m_validActionPackKeys: z.ZodOptional<z.ZodNull>;
                }, "strict", z.ZodTypeAny, {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }, {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }>, "many">;
            }, "strict", z.ZodTypeAny, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }>>, z.ZodNull]>;
            predefines: z.ZodUnion<[z.ZodObject<{
                characterInsts: z.ZodArray<z.ZodAny, "many">;
                tokenInsts: z.ZodArray<z.ZodObject<{
                    position: z.ZodObject<{
                        row: z.ZodNumber;
                        col: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        row?: number;
                        col?: number;
                    }, {
                        row?: number;
                        col?: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    hidden: z.ZodBoolean;
                    alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        level: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        level?: number;
                    }, {
                        key?: string;
                        level?: number;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                    inst: z.ZodObject<{
                        characterKey: z.ZodString;
                        level: z.ZodNumber;
                        phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        favorPoint: z.ZodNumber;
                        potentialRank: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    }, {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    }>;
                    skillIndex: z.ZodNumber;
                    mainSkillLvl: z.ZodNumber;
                    skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }, {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }>, "many">;
                characterCards: z.ZodArray<z.ZodAny, "many">;
                tokenCards: z.ZodArray<z.ZodAny, "many">;
            }, "strict", z.ZodTypeAny, {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            }, {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            }>, z.ZodNull]>;
            hardPredefines: z.ZodUnion<[z.ZodObject<{
                characterInsts: z.ZodArray<z.ZodAny, "many">;
                tokenInsts: z.ZodArray<z.ZodObject<{
                    position: z.ZodObject<{
                        row: z.ZodNumber;
                        col: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        row?: number;
                        col?: number;
                    }, {
                        row?: number;
                        col?: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    hidden: z.ZodBoolean;
                    alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        level: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        level?: number;
                    }, {
                        key?: string;
                        level?: number;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                    inst: z.ZodObject<{
                        characterKey: z.ZodString;
                        level: z.ZodNumber;
                        phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        favorPoint: z.ZodNumber;
                        potentialRank: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    }, {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    }>;
                    skillIndex: z.ZodNumber;
                    mainSkillLvl: z.ZodNumber;
                    skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }, {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }>, "many">;
                characterCards: z.ZodArray<z.ZodAny, "many">;
                tokenCards: z.ZodArray<z.ZodAny, "many">;
            }, "strict", z.ZodTypeAny, {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            }, {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            }>, z.ZodNull, z.ZodUndefined]>;
            excludeCharIdList: z.ZodNull;
            randomSeed: z.ZodNumber;
            operaConfig: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            runtimeData: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            options?: {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            };
            levelId?: string;
            mapId?: string;
            bgmEvent?: string;
            environmentSe?: string;
            mapData?: {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            };
            tilesDisallowToLocate?: any[];
            runes?: {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            globalBuffs?: {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }[];
            routes?: {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }[];
            extraRoutes?: any[];
            enemies?: any[];
            enemyDbRefs?: {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }[];
            waves?: {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }[];
            branches?: Record<string, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }>;
            predefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            hardPredefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            excludeCharIdList?: null;
            randomSeed?: number;
            operaConfig?: string;
            runtimeData?: null;
        }, {
            options?: {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            };
            levelId?: string;
            mapId?: string;
            bgmEvent?: string;
            environmentSe?: string;
            mapData?: {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            };
            tilesDisallowToLocate?: any[];
            runes?: {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            globalBuffs?: {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }[];
            routes?: {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }[];
            extraRoutes?: any[];
            enemies?: any[];
            enemyDbRefs?: {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }[];
            waves?: {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }[];
            branches?: Record<string, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }>;
            predefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            hardPredefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            excludeCharIdList?: null;
            randomSeed?: number;
            operaConfig?: string;
            runtimeData?: null;
        }>;
    }, "strict", z.ZodTypeAny, {
        excel?: {
            id?: string;
            linkedStageId?: string;
            levelId?: string;
            code?: string;
            name?: string;
            loadingPicId?: string;
            description?: string;
            eliteDesc?: string;
            isBoss?: number;
            isElite?: number;
            difficulty?: string;
            capsulePool?: string;
            capsuleProb?: number;
            vutresProb?: number[];
            boxProb?: number[];
            specialNodeId?: string;
        };
        levels?: {
            options?: {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            };
            levelId?: string;
            mapId?: string;
            bgmEvent?: string;
            environmentSe?: string;
            mapData?: {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            };
            tilesDisallowToLocate?: any[];
            runes?: {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            globalBuffs?: {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }[];
            routes?: {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }[];
            extraRoutes?: any[];
            enemies?: any[];
            enemyDbRefs?: {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }[];
            waves?: {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }[];
            branches?: Record<string, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }>;
            predefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            hardPredefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            excludeCharIdList?: null;
            randomSeed?: number;
            operaConfig?: string;
            runtimeData?: null;
        };
    }, {
        excel?: {
            id?: string;
            linkedStageId?: string;
            levelId?: string;
            code?: string;
            name?: string;
            loadingPicId?: string;
            description?: string;
            eliteDesc?: string;
            isBoss?: number;
            isElite?: number;
            difficulty?: string;
            capsulePool?: string;
            capsuleProb?: number;
            vutresProb?: number[];
            boxProb?: number[];
            specialNodeId?: string;
        };
        levels?: {
            options?: {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            };
            levelId?: string;
            mapId?: string;
            bgmEvent?: string;
            environmentSe?: string;
            mapData?: {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            };
            tilesDisallowToLocate?: any[];
            runes?: {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            globalBuffs?: {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }[];
            routes?: {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }[];
            extraRoutes?: any[];
            enemies?: any[];
            enemyDbRefs?: {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }[];
            waves?: {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }[];
            branches?: Record<string, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }>;
            predefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            hardPredefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            excludeCharIdList?: null;
            randomSeed?: number;
            operaConfig?: string;
            runtimeData?: null;
        };
    }>>;
    relicDict: z.ZodRecord<z.ZodString, z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        description: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        usage: z.ZodString;
        obtainApproach: z.ZodString;
        iconId: z.ZodString;
        type: z.ZodString;
        subType: z.ZodString;
        rarity: z.ZodString;
        value: z.ZodNumber;
        sortId: z.ZodNumber;
        canSacrifice: z.ZodBoolean;
        unlockCondDesc: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        id?: string;
        name?: string;
        description?: string;
        usage?: string;
        obtainApproach?: string;
        iconId?: string;
        type?: string;
        subType?: string;
        rarity?: string;
        value?: number;
        sortId?: number;
        canSacrifice?: boolean;
        unlockCondDesc?: string;
    }, {
        id?: string;
        name?: string;
        description?: string;
        usage?: string;
        obtainApproach?: string;
        iconId?: string;
        type?: string;
        subType?: string;
        rarity?: string;
        value?: number;
        sortId?: number;
        canSacrifice?: boolean;
        unlockCondDesc?: string;
    }>>;
    variationDict: z.ZodRecord<z.ZodString, z.ZodObject<{
        id: z.ZodString;
        type: z.ZodString;
        outerName: z.ZodString;
        innerName: z.ZodString;
        functionDesc: z.ZodString;
        desc: z.ZodString;
        iconId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        sound: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        id?: string;
        type?: string;
        outerName?: string;
        innerName?: string;
        functionDesc?: string;
        desc?: string;
        iconId?: string;
        sound?: string;
    }, {
        id?: string;
        type?: string;
        outerName?: string;
        innerName?: string;
        functionDesc?: string;
        desc?: string;
        iconId?: string;
        sound?: string;
    }>>;
}, "strict", z.ZodTypeAny, {
    name?: string;
    stageDict?: Record<string, {
        excel?: {
            id?: string;
            linkedStageId?: string;
            levelId?: string;
            code?: string;
            name?: string;
            loadingPicId?: string;
            description?: string;
            eliteDesc?: string;
            isBoss?: number;
            isElite?: number;
            difficulty?: string;
            capsulePool?: string;
            capsuleProb?: number;
            vutresProb?: number[];
            boxProb?: number[];
            specialNodeId?: string;
        };
        levels?: {
            options?: {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            };
            levelId?: string;
            mapId?: string;
            bgmEvent?: string;
            environmentSe?: string;
            mapData?: {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            };
            tilesDisallowToLocate?: any[];
            runes?: {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            globalBuffs?: {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }[];
            routes?: {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }[];
            extraRoutes?: any[];
            enemies?: any[];
            enemyDbRefs?: {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }[];
            waves?: {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }[];
            branches?: Record<string, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }>;
            predefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            hardPredefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            excludeCharIdList?: null;
            randomSeed?: number;
            operaConfig?: string;
            runtimeData?: null;
        };
    }>;
    toughStageDict?: Record<string, {
        excel?: {
            id?: string;
            linkedStageId?: string;
            levelId?: string;
            code?: string;
            name?: string;
            loadingPicId?: string;
            description?: string;
            eliteDesc?: string;
            isBoss?: number;
            isElite?: number;
            difficulty?: string;
            capsulePool?: string;
            capsuleProb?: number;
            vutresProb?: number[];
            boxProb?: number[];
            specialNodeId?: string;
        };
        levels?: {
            options?: {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            };
            levelId?: string;
            mapId?: string;
            bgmEvent?: string;
            environmentSe?: string;
            mapData?: {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            };
            tilesDisallowToLocate?: any[];
            runes?: {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            globalBuffs?: {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }[];
            routes?: {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }[];
            extraRoutes?: any[];
            enemies?: any[];
            enemyDbRefs?: {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }[];
            waves?: {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }[];
            branches?: Record<string, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }>;
            predefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            hardPredefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            excludeCharIdList?: null;
            randomSeed?: number;
            operaConfig?: string;
            runtimeData?: null;
        };
    }>;
    relicDict?: Record<string, {
        id?: string;
        name?: string;
        description?: string;
        usage?: string;
        obtainApproach?: string;
        iconId?: string;
        type?: string;
        subType?: string;
        rarity?: string;
        value?: number;
        sortId?: number;
        canSacrifice?: boolean;
        unlockCondDesc?: string;
    }>;
    variationDict?: Record<string, {
        id?: string;
        type?: string;
        outerName?: string;
        innerName?: string;
        functionDesc?: string;
        desc?: string;
        iconId?: string;
        sound?: string;
    }>;
}, {
    name?: string;
    stageDict?: Record<string, {
        excel?: {
            id?: string;
            linkedStageId?: string;
            levelId?: string;
            code?: string;
            name?: string;
            loadingPicId?: string;
            description?: string;
            eliteDesc?: string;
            isBoss?: number;
            isElite?: number;
            difficulty?: string;
            capsulePool?: string;
            capsuleProb?: number;
            vutresProb?: number[];
            boxProb?: number[];
            specialNodeId?: string;
        };
        levels?: {
            options?: {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            };
            levelId?: string;
            mapId?: string;
            bgmEvent?: string;
            environmentSe?: string;
            mapData?: {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            };
            tilesDisallowToLocate?: any[];
            runes?: {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            globalBuffs?: {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }[];
            routes?: {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }[];
            extraRoutes?: any[];
            enemies?: any[];
            enemyDbRefs?: {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }[];
            waves?: {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }[];
            branches?: Record<string, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }>;
            predefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            hardPredefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            excludeCharIdList?: null;
            randomSeed?: number;
            operaConfig?: string;
            runtimeData?: null;
        };
    }>;
    toughStageDict?: Record<string, {
        excel?: {
            id?: string;
            linkedStageId?: string;
            levelId?: string;
            code?: string;
            name?: string;
            loadingPicId?: string;
            description?: string;
            eliteDesc?: string;
            isBoss?: number;
            isElite?: number;
            difficulty?: string;
            capsulePool?: string;
            capsuleProb?: number;
            vutresProb?: number[];
            boxProb?: number[];
            specialNodeId?: string;
        };
        levels?: {
            options?: {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            };
            levelId?: string;
            mapId?: string;
            bgmEvent?: string;
            environmentSe?: string;
            mapData?: {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            };
            tilesDisallowToLocate?: any[];
            runes?: {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            globalBuffs?: {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }[];
            routes?: {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }[];
            extraRoutes?: any[];
            enemies?: any[];
            enemyDbRefs?: {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }[];
            waves?: {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }[];
            branches?: Record<string, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }>;
            predefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            hardPredefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            excludeCharIdList?: null;
            randomSeed?: number;
            operaConfig?: string;
            runtimeData?: null;
        };
    }>;
    relicDict?: Record<string, {
        id?: string;
        name?: string;
        description?: string;
        usage?: string;
        obtainApproach?: string;
        iconId?: string;
        type?: string;
        subType?: string;
        rarity?: string;
        value?: number;
        sortId?: number;
        canSacrifice?: boolean;
        unlockCondDesc?: string;
    }>;
    variationDict?: Record<string, {
        id?: string;
        type?: string;
        outerName?: string;
        innerName?: string;
        functionDesc?: string;
        desc?: string;
        iconId?: string;
        sound?: string;
    }>;
}>;
export declare const SandboxActZod: z.ZodObject<{
    stageDict: z.ZodRecord<z.ZodString, z.ZodObject<{
        excel: z.ZodObject<{
            stageId: z.ZodString;
            levelId: z.ZodString;
            code: z.ZodString;
            name: z.ZodString;
            loadingPicId: z.ZodString;
            description: z.ZodString;
            actionCost: z.ZodNumber;
            powerCost: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            stageId?: string;
            levelId?: string;
            code?: string;
            name?: string;
            loadingPicId?: string;
            description?: string;
            actionCost?: number;
            powerCost?: number;
        }, {
            stageId?: string;
            levelId?: string;
            code?: string;
            name?: string;
            loadingPicId?: string;
            description?: string;
            actionCost?: number;
            powerCost?: number;
        }>;
        levels: z.ZodObject<{
            options: z.ZodObject<{
                characterLimit: z.ZodNumber;
                maxLifePoint: z.ZodNumber;
                initialCost: z.ZodNumber;
                maxCost: z.ZodNumber;
                costIncreaseTime: z.ZodNumber;
                moveMultiplier: z.ZodNumber;
                steeringEnabled: z.ZodBoolean;
                isTrainingLevel: z.ZodBoolean;
                isHardTrainingLevel: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                isPredefinedCardsSelectable: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                maxPlayTime: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                functionDisableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                configBlackBoard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }, {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }>;
            levelId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            mapId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            bgmEvent: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            environmentSe: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            mapData: z.ZodObject<{
                map: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
                tiles: z.ZodArray<z.ZodObject<{
                    tileKey: z.ZodString;
                    heightType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    buildableType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    passableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    playerSideMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                    blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }>, "many">, z.ZodNull]>;
                    effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        offset: z.ZodObject<{
                            x: z.ZodNumber;
                            y: z.ZodNumber;
                            z: z.ZodNumber;
                        }, "strict", z.ZodTypeAny, {
                            x?: number;
                            y?: number;
                            z?: number;
                        }, {
                            x?: number;
                            y?: number;
                            z?: number;
                        }>;
                        direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }, {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }>, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }, {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }>, "many">;
                blockEdges: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodNull]>;
                tags: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
                effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    offset: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                        z: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        x?: number;
                        y?: number;
                        z?: number;
                    }, {
                        x?: number;
                        y?: number;
                        z?: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }, {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }>, "many">, z.ZodNull]>;
                layerRects: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                width: z.ZodOptional<z.ZodNumber>;
                height: z.ZodOptional<z.ZodNumber>;
            }, "strict", z.ZodTypeAny, {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            }, {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            }>;
            tilesDisallowToLocate: z.ZodArray<z.ZodAny, "many">;
            runes: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                difficultyMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                key: z.ZodString;
                professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                buildableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                blackboard: z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">;
            }, "strict", z.ZodTypeAny, {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }, {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }>, "many">, z.ZodNull]>;
            globalBuffs: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                prefabKey: z.ZodString;
                blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull]>;
                overrideCameraEffect: z.ZodNull;
                passProfessionMaskFlag: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                useExtraData: z.ZodOptional<z.ZodBoolean>;
            }, "strict", z.ZodTypeAny, {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }, {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }>, "many">, z.ZodNull]>;
            routes: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                motionMode: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                startPosition: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    row?: number;
                    col?: number;
                }, {
                    row?: number;
                    col?: number;
                }>;
                endPosition: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    row?: number;
                    col?: number;
                }, {
                    row?: number;
                    col?: number;
                }>;
                spawnRandomRange: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x?: number;
                    y?: number;
                }, {
                    x?: number;
                    y?: number;
                }>;
                spawnOffset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x?: number;
                    y?: number;
                }, {
                    x?: number;
                    y?: number;
                }>;
                checkpoints: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    time: z.ZodNumber;
                    position: z.ZodObject<{
                        row: z.ZodNumber;
                        col: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        row?: number;
                        col?: number;
                    }, {
                        row?: number;
                        col?: number;
                    }>;
                    reachOffset: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        x?: number;
                        y?: number;
                    }, {
                        x?: number;
                        y?: number;
                    }>;
                    randomizeReachOffset: z.ZodBoolean;
                    reachDistance: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }, {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }>, "many">, z.ZodNull]>;
                allowDiagonalMove: z.ZodBoolean;
                visitEveryTileCenter: z.ZodBoolean;
                visitEveryNodeCenter: z.ZodBoolean;
                visitEveryCheckPoint: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }, {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }>, z.ZodNull]>, "many">;
            extraRoutes: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodUndefined]>;
            enemies: z.ZodArray<z.ZodAny, "many">;
            enemyDbRefs: z.ZodArray<z.ZodObject<{
                useDb: z.ZodBoolean;
                id: z.ZodString;
                level: z.ZodNumber;
                overwrittenData: z.ZodUnion<[z.ZodObject<{
                    name: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: string;
                    }, {
                        m_defined?: boolean;
                        m_value?: string;
                    }>;
                    description: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: string;
                    }, {
                        m_defined?: boolean;
                        m_value?: string;
                    }>;
                    prefabKey: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: string;
                    }, {
                        m_defined?: boolean;
                        m_value?: string;
                    }>;
                    attributes: z.ZodObject<{
                        maxHp: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        atk: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        def: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        magicResistance: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        cost: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        blockCnt: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        moveSpeed: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        attackSpeed: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        baseAttackTime: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        respawnTime: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        hpRecoveryPerSec: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        spRecoveryPerSec: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        maxDeployCount: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        massLevel: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        baseForceLevel: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        tauntLevel: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>, z.ZodUndefined]>;
                        epDamageResistance: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>, z.ZodUndefined]>;
                        epResistance: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>, z.ZodUndefined]>;
                        stunImmune: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }>;
                        silenceImmune: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }>;
                        sleepImmune: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }>, z.ZodUndefined]>;
                        frozenImmune: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }>, z.ZodUndefined]>;
                        levitateImmune: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }>, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    }, {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    }>;
                    applyWay: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: string;
                    }, {
                        m_defined?: boolean;
                        m_value?: string;
                    }>, z.ZodUndefined]>;
                    motion: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: string;
                    }, {
                        m_defined?: boolean;
                        m_value?: string;
                    }>, z.ZodUndefined]>;
                    enemyTags: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: string[];
                    }, {
                        m_defined?: boolean;
                        m_value?: string[];
                    }>, z.ZodUndefined]>;
                    lifePointReduce: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    levelType: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: string;
                    }, {
                        m_defined?: boolean;
                        m_value?: string;
                    }>, z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    rangeRadius: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    numOfExtraDrops: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    viewRadius: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    notCountInTotal: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>, z.ZodUndefined]>;
                    talentBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }>, "many">, z.ZodNull]>;
                    skills: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        prefabKey: z.ZodString;
                        priority: z.ZodNumber;
                        cooldown: z.ZodNumber;
                        initCooldown: z.ZodNumber;
                        spCost: z.ZodNumber;
                        blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                            key: z.ZodString;
                            value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                            valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        }, "strict", z.ZodTypeAny, {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }, {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }>, "many">, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }, {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }>, "many">, z.ZodNull]>;
                    spData: z.ZodUnion<[z.ZodObject<{
                        spType: z.ZodString;
                        maxSp: z.ZodNumber;
                        initSp: z.ZodNumber;
                        increment: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    }, {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    }>, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                }, {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                }>, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }, {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }>, "many">;
            waves: z.ZodArray<z.ZodObject<{
                preDelay: z.ZodNumber;
                postDelay: z.ZodNumber;
                maxTimeWaitingForNextWave: z.ZodNumber;
                fragments: z.ZodArray<z.ZodObject<{
                    preDelay: z.ZodNumber;
                    actions: z.ZodArray<z.ZodObject<{
                        actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        managedByScheduler: z.ZodBoolean;
                        key: z.ZodString;
                        count: z.ZodNumber;
                        preDelay: z.ZodNumber;
                        interval: z.ZodNumber;
                        routeIndex: z.ZodNumber;
                        blockFragment: z.ZodBoolean;
                        autoPreviewRoute: z.ZodBoolean;
                        autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                        hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                        weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                        dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }, {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }>, "many">;
                    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                }, "strict", z.ZodTypeAny, {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }, {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }>, "many">;
                advancedWaveTag: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strict", z.ZodTypeAny, {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }, {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }>, "many">;
            branches: z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodObject<{
                phases: z.ZodArray<z.ZodObject<{
                    preDelay: z.ZodNumber;
                    actions: z.ZodArray<z.ZodObject<{
                        actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        managedByScheduler: z.ZodBoolean;
                        key: z.ZodString;
                        count: z.ZodNumber;
                        preDelay: z.ZodNumber;
                        interval: z.ZodNumber;
                        routeIndex: z.ZodNumber;
                        blockFragment: z.ZodBoolean;
                        autoPreviewRoute: z.ZodBoolean;
                        autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                        hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                        weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                        dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }, {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }>, "many">;
                    m_randomActionGroups: z.ZodOptional<z.ZodNull>;
                    m_actionWithRandomSpawn: z.ZodOptional<z.ZodNull>;
                    m_validActionPackKeys: z.ZodOptional<z.ZodNull>;
                }, "strict", z.ZodTypeAny, {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }, {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }>, "many">;
            }, "strict", z.ZodTypeAny, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }>>, z.ZodNull]>;
            predefines: z.ZodUnion<[z.ZodObject<{
                characterInsts: z.ZodArray<z.ZodAny, "many">;
                tokenInsts: z.ZodArray<z.ZodObject<{
                    position: z.ZodObject<{
                        row: z.ZodNumber;
                        col: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        row?: number;
                        col?: number;
                    }, {
                        row?: number;
                        col?: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    hidden: z.ZodBoolean;
                    alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        level: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        level?: number;
                    }, {
                        key?: string;
                        level?: number;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                    inst: z.ZodObject<{
                        characterKey: z.ZodString;
                        level: z.ZodNumber;
                        phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        favorPoint: z.ZodNumber;
                        potentialRank: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    }, {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    }>;
                    skillIndex: z.ZodNumber;
                    mainSkillLvl: z.ZodNumber;
                    skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }, {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }>, "many">;
                characterCards: z.ZodArray<z.ZodAny, "many">;
                tokenCards: z.ZodArray<z.ZodAny, "many">;
            }, "strict", z.ZodTypeAny, {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            }, {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            }>, z.ZodNull]>;
            hardPredefines: z.ZodUnion<[z.ZodObject<{
                characterInsts: z.ZodArray<z.ZodAny, "many">;
                tokenInsts: z.ZodArray<z.ZodObject<{
                    position: z.ZodObject<{
                        row: z.ZodNumber;
                        col: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        row?: number;
                        col?: number;
                    }, {
                        row?: number;
                        col?: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    hidden: z.ZodBoolean;
                    alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        level: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        level?: number;
                    }, {
                        key?: string;
                        level?: number;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                    inst: z.ZodObject<{
                        characterKey: z.ZodString;
                        level: z.ZodNumber;
                        phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        favorPoint: z.ZodNumber;
                        potentialRank: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    }, {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    }>;
                    skillIndex: z.ZodNumber;
                    mainSkillLvl: z.ZodNumber;
                    skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }, {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }>, "many">;
                characterCards: z.ZodArray<z.ZodAny, "many">;
                tokenCards: z.ZodArray<z.ZodAny, "many">;
            }, "strict", z.ZodTypeAny, {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            }, {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            }>, z.ZodNull, z.ZodUndefined]>;
            excludeCharIdList: z.ZodNull;
            randomSeed: z.ZodNumber;
            operaConfig: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            runtimeData: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            options?: {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            };
            levelId?: string;
            mapId?: string;
            bgmEvent?: string;
            environmentSe?: string;
            mapData?: {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            };
            tilesDisallowToLocate?: any[];
            runes?: {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            globalBuffs?: {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }[];
            routes?: {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }[];
            extraRoutes?: any[];
            enemies?: any[];
            enemyDbRefs?: {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }[];
            waves?: {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }[];
            branches?: Record<string, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }>;
            predefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            hardPredefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            excludeCharIdList?: null;
            randomSeed?: number;
            operaConfig?: string;
            runtimeData?: null;
        }, {
            options?: {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            };
            levelId?: string;
            mapId?: string;
            bgmEvent?: string;
            environmentSe?: string;
            mapData?: {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            };
            tilesDisallowToLocate?: any[];
            runes?: {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            globalBuffs?: {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }[];
            routes?: {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }[];
            extraRoutes?: any[];
            enemies?: any[];
            enemyDbRefs?: {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }[];
            waves?: {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }[];
            branches?: Record<string, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }>;
            predefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            hardPredefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            excludeCharIdList?: null;
            randomSeed?: number;
            operaConfig?: string;
            runtimeData?: null;
        }>;
    }, "strict", z.ZodTypeAny, {
        excel?: {
            stageId?: string;
            levelId?: string;
            code?: string;
            name?: string;
            loadingPicId?: string;
            description?: string;
            actionCost?: number;
            powerCost?: number;
        };
        levels?: {
            options?: {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            };
            levelId?: string;
            mapId?: string;
            bgmEvent?: string;
            environmentSe?: string;
            mapData?: {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            };
            tilesDisallowToLocate?: any[];
            runes?: {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            globalBuffs?: {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }[];
            routes?: {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }[];
            extraRoutes?: any[];
            enemies?: any[];
            enemyDbRefs?: {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }[];
            waves?: {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }[];
            branches?: Record<string, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }>;
            predefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            hardPredefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            excludeCharIdList?: null;
            randomSeed?: number;
            operaConfig?: string;
            runtimeData?: null;
        };
    }, {
        excel?: {
            stageId?: string;
            levelId?: string;
            code?: string;
            name?: string;
            loadingPicId?: string;
            description?: string;
            actionCost?: number;
            powerCost?: number;
        };
        levels?: {
            options?: {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            };
            levelId?: string;
            mapId?: string;
            bgmEvent?: string;
            environmentSe?: string;
            mapData?: {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            };
            tilesDisallowToLocate?: any[];
            runes?: {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            globalBuffs?: {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }[];
            routes?: {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }[];
            extraRoutes?: any[];
            enemies?: any[];
            enemyDbRefs?: {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }[];
            waves?: {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }[];
            branches?: Record<string, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }>;
            predefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            hardPredefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            excludeCharIdList?: null;
            randomSeed?: number;
            operaConfig?: string;
            runtimeData?: null;
        };
    }>>;
}, "strict", z.ZodTypeAny, {
    stageDict?: Record<string, {
        excel?: {
            stageId?: string;
            levelId?: string;
            code?: string;
            name?: string;
            loadingPicId?: string;
            description?: string;
            actionCost?: number;
            powerCost?: number;
        };
        levels?: {
            options?: {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            };
            levelId?: string;
            mapId?: string;
            bgmEvent?: string;
            environmentSe?: string;
            mapData?: {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            };
            tilesDisallowToLocate?: any[];
            runes?: {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            globalBuffs?: {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }[];
            routes?: {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }[];
            extraRoutes?: any[];
            enemies?: any[];
            enemyDbRefs?: {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }[];
            waves?: {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }[];
            branches?: Record<string, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }>;
            predefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            hardPredefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            excludeCharIdList?: null;
            randomSeed?: number;
            operaConfig?: string;
            runtimeData?: null;
        };
    }>;
}, {
    stageDict?: Record<string, {
        excel?: {
            stageId?: string;
            levelId?: string;
            code?: string;
            name?: string;
            loadingPicId?: string;
            description?: string;
            actionCost?: number;
            powerCost?: number;
        };
        levels?: {
            options?: {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            };
            levelId?: string;
            mapId?: string;
            bgmEvent?: string;
            environmentSe?: string;
            mapData?: {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            };
            tilesDisallowToLocate?: any[];
            runes?: {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            globalBuffs?: {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }[];
            routes?: {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }[];
            extraRoutes?: any[];
            enemies?: any[];
            enemyDbRefs?: {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }[];
            waves?: {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }[];
            branches?: Record<string, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }>;
            predefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            hardPredefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            excludeCharIdList?: null;
            randomSeed?: number;
            operaConfig?: string;
            runtimeData?: null;
        };
    }>;
}>;
export declare const SkillZod: z.ZodObject<{
    skillId: z.ZodString;
    iconId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    hidden: z.ZodBoolean;
    levels: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        rangeId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        description: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        skillType: z.ZodString;
        durationType: z.ZodString;
        spData: z.ZodObject<{
            spType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            levelUpCost: z.ZodNull;
            maxChargeTime: z.ZodNumber;
            spCost: z.ZodNumber;
            initSp: z.ZodNumber;
            increment: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            spType?: string | number;
            levelUpCost?: null;
            maxChargeTime?: number;
            spCost?: number;
            initSp?: number;
            increment?: number;
        }, {
            spType?: string | number;
            levelUpCost?: null;
            maxChargeTime?: number;
            spCost?: number;
            initSp?: number;
            increment?: number;
        }>;
        prefabId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        duration: z.ZodNumber;
        blackboard: z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
            valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            key?: string;
            value?: number;
            valueStr?: string;
        }, {
            key?: string;
            value?: number;
            valueStr?: string;
        }>, "many">;
    }, "strict", z.ZodTypeAny, {
        name?: string;
        rangeId?: string;
        description?: string;
        skillType?: string;
        durationType?: string;
        spData?: {
            spType?: string | number;
            levelUpCost?: null;
            maxChargeTime?: number;
            spCost?: number;
            initSp?: number;
            increment?: number;
        };
        prefabId?: string;
        duration?: number;
        blackboard?: {
            key?: string;
            value?: number;
            valueStr?: string;
        }[];
    }, {
        name?: string;
        rangeId?: string;
        description?: string;
        skillType?: string;
        durationType?: string;
        spData?: {
            spType?: string | number;
            levelUpCost?: null;
            maxChargeTime?: number;
            spCost?: number;
            initSp?: number;
            increment?: number;
        };
        prefabId?: string;
        duration?: number;
        blackboard?: {
            key?: string;
            value?: number;
            valueStr?: string;
        }[];
    }>, "many">;
}, "strict", z.ZodTypeAny, {
    skillId?: string;
    iconId?: string;
    hidden?: boolean;
    levels?: {
        name?: string;
        rangeId?: string;
        description?: string;
        skillType?: string;
        durationType?: string;
        spData?: {
            spType?: string | number;
            levelUpCost?: null;
            maxChargeTime?: number;
            spCost?: number;
            initSp?: number;
            increment?: number;
        };
        prefabId?: string;
        duration?: number;
        blackboard?: {
            key?: string;
            value?: number;
            valueStr?: string;
        }[];
    }[];
}, {
    skillId?: string;
    iconId?: string;
    hidden?: boolean;
    levels?: {
        name?: string;
        rangeId?: string;
        description?: string;
        skillType?: string;
        durationType?: string;
        spData?: {
            spType?: string | number;
            levelUpCost?: null;
            maxChargeTime?: number;
            spCost?: number;
            initSp?: number;
            increment?: number;
        };
        prefabId?: string;
        duration?: number;
        blackboard?: {
            key?: string;
            value?: number;
            valueStr?: string;
        }[];
    }[];
}>;
export declare const SkinZod: z.ZodObject<{
    skinId: z.ZodString;
    charId: z.ZodString;
    tokenSkinMap: z.ZodUnion<[z.ZodArray<z.ZodObject<{
        tokenId: z.ZodString;
        tokenSkinId: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        tokenId?: string;
        tokenSkinId?: string;
    }, {
        tokenId?: string;
        tokenSkinId?: string;
    }>, "many">, z.ZodNull]>;
    illustId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    dynIllustId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    avatarId: z.ZodString;
    portraitId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    dynPortraitId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    dynEntranceId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    buildingId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    battleSkin: z.ZodObject<{
        overwritePrefab: z.ZodBoolean;
        skinOrPrefabId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        overwritePrefab?: boolean;
        skinOrPrefabId?: string;
    }, {
        overwritePrefab?: boolean;
        skinOrPrefabId?: string;
    }>;
    isBuySkin: z.ZodBoolean;
    tmplId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    voiceId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    voiceType: z.ZodString;
    displaySkin: z.ZodObject<{
        skinName: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        colorList: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
        titleList: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
        modelName: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        drawerList: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
        designerList: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
        skinGroupId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        skinGroupName: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        skinGroupSortIndex: z.ZodNumber;
        content: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        dialog: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        usage: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        description: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        obtainApproach: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        sortId: z.ZodNumber;
        displayTagId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        getTime: z.ZodNumber;
        onYear: z.ZodNumber;
        onPeriod: z.ZodNumber;
    }, "strict", z.ZodTypeAny, {
        skinName?: string;
        colorList?: string[];
        titleList?: string[];
        modelName?: string;
        drawerList?: string[];
        designerList?: string[];
        skinGroupId?: string;
        skinGroupName?: string;
        skinGroupSortIndex?: number;
        content?: string;
        dialog?: string;
        usage?: string;
        description?: string;
        obtainApproach?: string;
        sortId?: number;
        displayTagId?: string;
        getTime?: number;
        onYear?: number;
        onPeriod?: number;
    }, {
        skinName?: string;
        colorList?: string[];
        titleList?: string[];
        modelName?: string;
        drawerList?: string[];
        designerList?: string[];
        skinGroupId?: string;
        skinGroupName?: string;
        skinGroupSortIndex?: number;
        content?: string;
        dialog?: string;
        usage?: string;
        description?: string;
        obtainApproach?: string;
        sortId?: number;
        displayTagId?: string;
        getTime?: number;
        onYear?: number;
        onPeriod?: number;
    }>;
}, "strict", z.ZodTypeAny, {
    skinId?: string;
    charId?: string;
    tokenSkinMap?: {
        tokenId?: string;
        tokenSkinId?: string;
    }[];
    illustId?: string;
    dynIllustId?: string;
    avatarId?: string;
    portraitId?: string;
    dynPortraitId?: string;
    dynEntranceId?: string;
    buildingId?: string;
    battleSkin?: {
        overwritePrefab?: boolean;
        skinOrPrefabId?: string;
    };
    isBuySkin?: boolean;
    tmplId?: string;
    voiceId?: string;
    voiceType?: string;
    displaySkin?: {
        skinName?: string;
        colorList?: string[];
        titleList?: string[];
        modelName?: string;
        drawerList?: string[];
        designerList?: string[];
        skinGroupId?: string;
        skinGroupName?: string;
        skinGroupSortIndex?: number;
        content?: string;
        dialog?: string;
        usage?: string;
        description?: string;
        obtainApproach?: string;
        sortId?: number;
        displayTagId?: string;
        getTime?: number;
        onYear?: number;
        onPeriod?: number;
    };
}, {
    skinId?: string;
    charId?: string;
    tokenSkinMap?: {
        tokenId?: string;
        tokenSkinId?: string;
    }[];
    illustId?: string;
    dynIllustId?: string;
    avatarId?: string;
    portraitId?: string;
    dynPortraitId?: string;
    dynEntranceId?: string;
    buildingId?: string;
    battleSkin?: {
        overwritePrefab?: boolean;
        skinOrPrefabId?: string;
    };
    isBuySkin?: boolean;
    tmplId?: string;
    voiceId?: string;
    voiceType?: string;
    displaySkin?: {
        skinName?: string;
        colorList?: string[];
        titleList?: string[];
        modelName?: string;
        drawerList?: string[];
        designerList?: string[];
        skinGroupId?: string;
        skinGroupName?: string;
        skinGroupSortIndex?: number;
        content?: string;
        dialog?: string;
        usage?: string;
        description?: string;
        obtainApproach?: string;
        sortId?: number;
        displayTagId?: string;
        getTime?: number;
        onYear?: number;
        onPeriod?: number;
    };
}>;
export declare const StageZod: z.ZodObject<{
    excel: z.ZodObject<{
        stageType: z.ZodString;
        difficulty: z.ZodString;
        performanceStageFlag: z.ZodString;
        diffGroup: z.ZodString;
        unlockCondition: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            stageId: z.ZodString;
            completeState: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            stageId?: string;
            completeState?: string;
        }, {
            stageId?: string;
            completeState?: string;
        }>, z.ZodNull]>, "many">;
        stageId: z.ZodString;
        levelId: z.ZodString;
        zoneId: z.ZodString;
        code: z.ZodString;
        name: z.ZodString;
        description: z.ZodString;
        hardStagedId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        dangerLevel: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        dangerPoint: z.ZodNumber;
        loadingPicId: z.ZodString;
        canPractice: z.ZodBoolean;
        canBattleReplay: z.ZodBoolean;
        apCost: z.ZodNumber;
        apFailReturn: z.ZodNumber;
        etItemId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        etCost: z.ZodNumber;
        etFailReturn: z.ZodNumber;
        etButtonStyle: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        apProtectTimes: z.ZodNumber;
        diamondOnceDrop: z.ZodNumber;
        practiceTicketCost: z.ZodNumber;
        dailyStageDifficulty: z.ZodNumber;
        expGain: z.ZodNumber;
        goldGain: z.ZodNumber;
        loseExpGain: z.ZodNumber;
        loseGoldGain: z.ZodNumber;
        passFavor: z.ZodNumber;
        completeFavor: z.ZodNumber;
        slProgress: z.ZodNumber;
        displayMainItem: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        hilightMark: z.ZodBoolean;
        bossMark: z.ZodBoolean;
        isPredefined: z.ZodBoolean;
        isHardPredefined: z.ZodBoolean;
        isSkillSelectablePredefined: z.ZodBoolean;
        isStoryOnly: z.ZodBoolean;
        appearanceStyle: z.ZodString;
        stageDropInfo: z.ZodObject<{
            firstPassRewards: z.ZodNull;
            firstCompleteRewards: z.ZodNull;
            passRewards: z.ZodNull;
            completeRewards: z.ZodNull;
            displayRewards: z.ZodArray<z.ZodObject<{
                type: z.ZodString;
                id: z.ZodString;
                dropType: z.ZodString;
            }, "strict", z.ZodTypeAny, {
                type?: string;
                id?: string;
                dropType?: string;
            }, {
                type?: string;
                id?: string;
                dropType?: string;
            }>, "many">;
            displayDetailRewards: z.ZodArray<z.ZodObject<{
                occPercent: z.ZodString;
                type: z.ZodString;
                id: z.ZodString;
                dropType: z.ZodString;
            }, "strict", z.ZodTypeAny, {
                occPercent?: string;
                type?: string;
                id?: string;
                dropType?: string;
            }, {
                occPercent?: string;
                type?: string;
                id?: string;
                dropType?: string;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            firstPassRewards?: null;
            firstCompleteRewards?: null;
            passRewards?: null;
            completeRewards?: null;
            displayRewards?: {
                type?: string;
                id?: string;
                dropType?: string;
            }[];
            displayDetailRewards?: {
                occPercent?: string;
                type?: string;
                id?: string;
                dropType?: string;
            }[];
        }, {
            firstPassRewards?: null;
            firstCompleteRewards?: null;
            passRewards?: null;
            completeRewards?: null;
            displayRewards?: {
                type?: string;
                id?: string;
                dropType?: string;
            }[];
            displayDetailRewards?: {
                occPercent?: string;
                type?: string;
                id?: string;
                dropType?: string;
            }[];
        }>;
        canUseCharm: z.ZodBoolean;
        canUseTech: z.ZodBoolean;
        canUseTrapTool: z.ZodBoolean;
        canUseBattlePerformance: z.ZodBoolean;
        startButtonOverrideId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        isStagePatch: z.ZodBoolean;
        mainStageId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        extraCondition: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            index: z.ZodNumber;
            template: z.ZodString;
            unlockParam: z.ZodArray<z.ZodString, "many">;
        }, "strict", z.ZodTypeAny, {
            index?: number;
            template?: string;
            unlockParam?: string[];
        }, {
            index?: number;
            template?: string;
            unlockParam?: string[];
        }>, "many">, z.ZodNull]>;
        extraInfo: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            stageId: z.ZodString;
            rewards: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                count: z.ZodNumber;
                type: z.ZodString;
            }, "strict", z.ZodTypeAny, {
                id?: string;
                count?: number;
                type?: string;
            }, {
                id?: string;
                count?: number;
                type?: string;
            }>, "many">;
            progressInfo: z.ZodObject<{
                progressType: z.ZodString;
                descList: z.ZodRecord<z.ZodString, z.ZodString>;
            }, "strict", z.ZodTypeAny, {
                progressType?: string;
                descList?: Record<string, string>;
            }, {
                progressType?: string;
                descList?: Record<string, string>;
            }>;
        }, "strict", z.ZodTypeAny, {
            stageId?: string;
            rewards?: {
                id?: string;
                count?: number;
                type?: string;
            }[];
            progressInfo?: {
                progressType?: string;
                descList?: Record<string, string>;
            };
        }, {
            stageId?: string;
            rewards?: {
                id?: string;
                count?: number;
                type?: string;
            }[];
            progressInfo?: {
                progressType?: string;
                descList?: Record<string, string>;
            };
        }>, "many">, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        stageType?: string;
        difficulty?: string;
        performanceStageFlag?: string;
        diffGroup?: string;
        unlockCondition?: {
            stageId?: string;
            completeState?: string;
        }[];
        stageId?: string;
        levelId?: string;
        zoneId?: string;
        code?: string;
        name?: string;
        description?: string;
        hardStagedId?: string;
        dangerLevel?: string;
        dangerPoint?: number;
        loadingPicId?: string;
        canPractice?: boolean;
        canBattleReplay?: boolean;
        apCost?: number;
        apFailReturn?: number;
        etItemId?: string;
        etCost?: number;
        etFailReturn?: number;
        etButtonStyle?: string;
        apProtectTimes?: number;
        diamondOnceDrop?: number;
        practiceTicketCost?: number;
        dailyStageDifficulty?: number;
        expGain?: number;
        goldGain?: number;
        loseExpGain?: number;
        loseGoldGain?: number;
        passFavor?: number;
        completeFavor?: number;
        slProgress?: number;
        displayMainItem?: string;
        hilightMark?: boolean;
        bossMark?: boolean;
        isPredefined?: boolean;
        isHardPredefined?: boolean;
        isSkillSelectablePredefined?: boolean;
        isStoryOnly?: boolean;
        appearanceStyle?: string;
        stageDropInfo?: {
            firstPassRewards?: null;
            firstCompleteRewards?: null;
            passRewards?: null;
            completeRewards?: null;
            displayRewards?: {
                type?: string;
                id?: string;
                dropType?: string;
            }[];
            displayDetailRewards?: {
                occPercent?: string;
                type?: string;
                id?: string;
                dropType?: string;
            }[];
        };
        canUseCharm?: boolean;
        canUseTech?: boolean;
        canUseTrapTool?: boolean;
        canUseBattlePerformance?: boolean;
        startButtonOverrideId?: string;
        isStagePatch?: boolean;
        mainStageId?: string;
        extraCondition?: {
            index?: number;
            template?: string;
            unlockParam?: string[];
        }[];
        extraInfo?: {
            stageId?: string;
            rewards?: {
                id?: string;
                count?: number;
                type?: string;
            }[];
            progressInfo?: {
                progressType?: string;
                descList?: Record<string, string>;
            };
        }[];
    }, {
        stageType?: string;
        difficulty?: string;
        performanceStageFlag?: string;
        diffGroup?: string;
        unlockCondition?: {
            stageId?: string;
            completeState?: string;
        }[];
        stageId?: string;
        levelId?: string;
        zoneId?: string;
        code?: string;
        name?: string;
        description?: string;
        hardStagedId?: string;
        dangerLevel?: string;
        dangerPoint?: number;
        loadingPicId?: string;
        canPractice?: boolean;
        canBattleReplay?: boolean;
        apCost?: number;
        apFailReturn?: number;
        etItemId?: string;
        etCost?: number;
        etFailReturn?: number;
        etButtonStyle?: string;
        apProtectTimes?: number;
        diamondOnceDrop?: number;
        practiceTicketCost?: number;
        dailyStageDifficulty?: number;
        expGain?: number;
        goldGain?: number;
        loseExpGain?: number;
        loseGoldGain?: number;
        passFavor?: number;
        completeFavor?: number;
        slProgress?: number;
        displayMainItem?: string;
        hilightMark?: boolean;
        bossMark?: boolean;
        isPredefined?: boolean;
        isHardPredefined?: boolean;
        isSkillSelectablePredefined?: boolean;
        isStoryOnly?: boolean;
        appearanceStyle?: string;
        stageDropInfo?: {
            firstPassRewards?: null;
            firstCompleteRewards?: null;
            passRewards?: null;
            completeRewards?: null;
            displayRewards?: {
                type?: string;
                id?: string;
                dropType?: string;
            }[];
            displayDetailRewards?: {
                occPercent?: string;
                type?: string;
                id?: string;
                dropType?: string;
            }[];
        };
        canUseCharm?: boolean;
        canUseTech?: boolean;
        canUseTrapTool?: boolean;
        canUseBattlePerformance?: boolean;
        startButtonOverrideId?: string;
        isStagePatch?: boolean;
        mainStageId?: string;
        extraCondition?: {
            index?: number;
            template?: string;
            unlockParam?: string[];
        }[];
        extraInfo?: {
            stageId?: string;
            rewards?: {
                id?: string;
                count?: number;
                type?: string;
            }[];
            progressInfo?: {
                progressType?: string;
                descList?: Record<string, string>;
            };
        }[];
    }>;
    levels: z.ZodObject<{
        options: z.ZodObject<{
            characterLimit: z.ZodNumber;
            maxLifePoint: z.ZodNumber;
            initialCost: z.ZodNumber;
            maxCost: z.ZodNumber;
            costIncreaseTime: z.ZodNumber;
            moveMultiplier: z.ZodNumber;
            steeringEnabled: z.ZodBoolean;
            isTrainingLevel: z.ZodBoolean;
            isHardTrainingLevel: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            isPredefinedCardsSelectable: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            maxPlayTime: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
            functionDisableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            configBlackBoard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                value?: number;
                valueStr?: string;
            }, {
                key?: string;
                value?: number;
                valueStr?: string;
            }>, "many">, z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }, {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }>;
        levelId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        mapId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        bgmEvent: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        environmentSe: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        mapData: z.ZodObject<{
            map: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
            tiles: z.ZodArray<z.ZodObject<{
                tileKey: z.ZodString;
                heightType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                buildableType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                passableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                playerSideMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull]>;
                effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    offset: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                        z: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        x?: number;
                        y?: number;
                        z?: number;
                    }, {
                        x?: number;
                        y?: number;
                        z?: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }, {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }>, "many">, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }, {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }>, "many">;
            blockEdges: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodNull]>;
            tags: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
            effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                offset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                    z: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x?: number;
                    y?: number;
                    z?: number;
                }, {
                    x?: number;
                    y?: number;
                    z?: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }, {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }>, "many">, z.ZodNull]>;
            layerRects: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
            width: z.ZodOptional<z.ZodNumber>;
            height: z.ZodOptional<z.ZodNumber>;
        }, "strict", z.ZodTypeAny, {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        }, {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        }>;
        tilesDisallowToLocate: z.ZodArray<z.ZodAny, "many">;
        runes: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            difficultyMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            key: z.ZodString;
            professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
            buildableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            blackboard: z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                value?: number;
                valueStr?: string;
            }, {
                key?: string;
                value?: number;
                valueStr?: string;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }, {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }>, "many">, z.ZodNull]>;
        globalBuffs: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            prefabKey: z.ZodString;
            blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                value?: number;
                valueStr?: string;
            }, {
                key?: string;
                value?: number;
                valueStr?: string;
            }>, "many">, z.ZodNull]>;
            overrideCameraEffect: z.ZodNull;
            passProfessionMaskFlag: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
            useExtraData: z.ZodOptional<z.ZodBoolean>;
        }, "strict", z.ZodTypeAny, {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }, {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }>, "many">, z.ZodNull]>;
        routes: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            motionMode: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
            startPosition: z.ZodObject<{
                row: z.ZodNumber;
                col: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                row?: number;
                col?: number;
            }, {
                row?: number;
                col?: number;
            }>;
            endPosition: z.ZodObject<{
                row: z.ZodNumber;
                col: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                row?: number;
                col?: number;
            }, {
                row?: number;
                col?: number;
            }>;
            spawnRandomRange: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                x?: number;
                y?: number;
            }, {
                x?: number;
                y?: number;
            }>;
            spawnOffset: z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                x?: number;
                y?: number;
            }, {
                x?: number;
                y?: number;
            }>;
            checkpoints: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                type: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                time: z.ZodNumber;
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    row?: number;
                    col?: number;
                }, {
                    row?: number;
                    col?: number;
                }>;
                reachOffset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x?: number;
                    y?: number;
                }, {
                    x?: number;
                    y?: number;
                }>;
                randomizeReachOffset: z.ZodBoolean;
                reachDistance: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }, {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }>, "many">, z.ZodNull]>;
            allowDiagonalMove: z.ZodBoolean;
            visitEveryTileCenter: z.ZodBoolean;
            visitEveryNodeCenter: z.ZodBoolean;
            visitEveryCheckPoint: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }, {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }>, z.ZodNull]>, "many">;
        extraRoutes: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodUndefined]>;
        enemies: z.ZodArray<z.ZodAny, "many">;
        enemyDbRefs: z.ZodArray<z.ZodObject<{
            useDb: z.ZodBoolean;
            id: z.ZodString;
            level: z.ZodNumber;
            overwrittenData: z.ZodUnion<[z.ZodObject<{
                name: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>;
                description: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>;
                prefabKey: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>;
                attributes: z.ZodObject<{
                    maxHp: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    atk: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    def: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    magicResistance: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    cost: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    blockCnt: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    moveSpeed: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    attackSpeed: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    baseAttackTime: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    respawnTime: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    hpRecoveryPerSec: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    spRecoveryPerSec: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    maxDeployCount: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    massLevel: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    baseForceLevel: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    tauntLevel: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    epDamageResistance: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    epResistance: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    stunImmune: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>;
                    silenceImmune: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>;
                    sleepImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>, z.ZodUndefined]>;
                    frozenImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>, z.ZodUndefined]>;
                    levitateImmune: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                }, {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                }>;
                applyWay: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>, z.ZodUndefined]>;
                motion: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>, z.ZodUndefined]>;
                enemyTags: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string[];
                }, {
                    m_defined?: boolean;
                    m_value?: string[];
                }>, z.ZodUndefined]>;
                lifePointReduce: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>;
                levelType: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: string;
                }, {
                    m_defined?: boolean;
                    m_value?: string;
                }>, z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>, z.ZodUndefined]>;
                rangeRadius: z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>;
                numOfExtraDrops: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>, z.ZodUndefined]>;
                viewRadius: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: number;
                }, {
                    m_defined?: boolean;
                    m_value?: number;
                }>, z.ZodUndefined]>;
                notCountInTotal: z.ZodUnion<[z.ZodObject<{
                    m_defined: z.ZodBoolean;
                    m_value: z.ZodBoolean;
                }, "strict", z.ZodTypeAny, {
                    m_defined?: boolean;
                    m_value?: boolean;
                }, {
                    m_defined?: boolean;
                    m_value?: boolean;
                }>, z.ZodUndefined]>;
                talentBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull]>;
                skills: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    prefabKey: z.ZodString;
                    priority: z.ZodNumber;
                    cooldown: z.ZodNumber;
                    initCooldown: z.ZodNumber;
                    spCost: z.ZodNumber;
                    blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }>, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }, {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }>, "many">, z.ZodNull]>;
                spData: z.ZodUnion<[z.ZodObject<{
                    spType: z.ZodString;
                    maxSp: z.ZodNumber;
                    initSp: z.ZodNumber;
                    increment: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                }, {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                }>, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            }, {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            }>, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }, {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }>, "many">;
        waves: z.ZodArray<z.ZodObject<{
            preDelay: z.ZodNumber;
            postDelay: z.ZodNumber;
            maxTimeWaitingForNextWave: z.ZodNumber;
            fragments: z.ZodArray<z.ZodObject<{
                preDelay: z.ZodNumber;
                actions: z.ZodArray<z.ZodObject<{
                    actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    managedByScheduler: z.ZodBoolean;
                    key: z.ZodString;
                    count: z.ZodNumber;
                    preDelay: z.ZodNumber;
                    interval: z.ZodNumber;
                    routeIndex: z.ZodNumber;
                    blockFragment: z.ZodBoolean;
                    autoPreviewRoute: z.ZodBoolean;
                    autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                    hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                    weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                    dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }, {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }>, "many">;
                name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strict", z.ZodTypeAny, {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }, {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }>, "many">;
            advancedWaveTag: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strict", z.ZodTypeAny, {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }, {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }>, "many">;
        branches: z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodObject<{
            phases: z.ZodArray<z.ZodObject<{
                preDelay: z.ZodNumber;
                actions: z.ZodArray<z.ZodObject<{
                    actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    managedByScheduler: z.ZodBoolean;
                    key: z.ZodString;
                    count: z.ZodNumber;
                    preDelay: z.ZodNumber;
                    interval: z.ZodNumber;
                    routeIndex: z.ZodNumber;
                    blockFragment: z.ZodBoolean;
                    autoPreviewRoute: z.ZodBoolean;
                    autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                    hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                    weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                    dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                    extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }, {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }>, "many">;
                m_randomActionGroups: z.ZodOptional<z.ZodNull>;
                m_actionWithRandomSpawn: z.ZodOptional<z.ZodNull>;
                m_validActionPackKeys: z.ZodOptional<z.ZodNull>;
            }, "strict", z.ZodTypeAny, {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }, {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }>>, z.ZodNull]>;
        predefines: z.ZodUnion<[z.ZodObject<{
            characterInsts: z.ZodArray<z.ZodAny, "many">;
            tokenInsts: z.ZodArray<z.ZodObject<{
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    row?: number;
                    col?: number;
                }, {
                    row?: number;
                    col?: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                hidden: z.ZodBoolean;
                alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    level: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    level?: number;
                }, {
                    key?: string;
                    level?: number;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
                inst: z.ZodObject<{
                    characterKey: z.ZodString;
                    level: z.ZodNumber;
                    phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    favorPoint: z.ZodNumber;
                    potentialRank: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                }, {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                }>;
                skillIndex: z.ZodNumber;
                mainSkillLvl: z.ZodNumber;
                skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }, {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }>, "many">;
            characterCards: z.ZodArray<z.ZodAny, "many">;
            tokenCards: z.ZodArray<z.ZodAny, "many">;
        }, "strict", z.ZodTypeAny, {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        }, {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        }>, z.ZodNull]>;
        hardPredefines: z.ZodUnion<[z.ZodObject<{
            characterInsts: z.ZodArray<z.ZodAny, "many">;
            tokenInsts: z.ZodArray<z.ZodObject<{
                position: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    row?: number;
                    col?: number;
                }, {
                    row?: number;
                    col?: number;
                }>;
                direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                hidden: z.ZodBoolean;
                alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    level: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    level?: number;
                }, {
                    key?: string;
                    level?: number;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
                inst: z.ZodObject<{
                    characterKey: z.ZodString;
                    level: z.ZodNumber;
                    phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    favorPoint: z.ZodNumber;
                    potentialRank: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                }, {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                }>;
                skillIndex: z.ZodNumber;
                mainSkillLvl: z.ZodNumber;
                skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }, {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }>, "many">;
            characterCards: z.ZodArray<z.ZodAny, "many">;
            tokenCards: z.ZodArray<z.ZodAny, "many">;
        }, "strict", z.ZodTypeAny, {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        }, {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        }>, z.ZodNull, z.ZodUndefined]>;
        excludeCharIdList: z.ZodNull;
        randomSeed: z.ZodNumber;
        operaConfig: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
        runtimeData: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
    }, "strict", z.ZodTypeAny, {
        options?: {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        };
        levelId?: string;
        mapId?: string;
        bgmEvent?: string;
        environmentSe?: string;
        mapData?: {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        };
        tilesDisallowToLocate?: any[];
        runes?: {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
        globalBuffs?: {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }[];
        routes?: {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }[];
        extraRoutes?: any[];
        enemies?: any[];
        enemyDbRefs?: {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }[];
        waves?: {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }[];
        branches?: Record<string, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }>;
        predefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        hardPredefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        excludeCharIdList?: null;
        randomSeed?: number;
        operaConfig?: string;
        runtimeData?: null;
    }, {
        options?: {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        };
        levelId?: string;
        mapId?: string;
        bgmEvent?: string;
        environmentSe?: string;
        mapData?: {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        };
        tilesDisallowToLocate?: any[];
        runes?: {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
        globalBuffs?: {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }[];
        routes?: {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }[];
        extraRoutes?: any[];
        enemies?: any[];
        enemyDbRefs?: {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }[];
        waves?: {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }[];
        branches?: Record<string, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }>;
        predefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        hardPredefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        excludeCharIdList?: null;
        randomSeed?: number;
        operaConfig?: string;
        runtimeData?: null;
    }>;
}, "strict", z.ZodTypeAny, {
    excel?: {
        stageType?: string;
        difficulty?: string;
        performanceStageFlag?: string;
        diffGroup?: string;
        unlockCondition?: {
            stageId?: string;
            completeState?: string;
        }[];
        stageId?: string;
        levelId?: string;
        zoneId?: string;
        code?: string;
        name?: string;
        description?: string;
        hardStagedId?: string;
        dangerLevel?: string;
        dangerPoint?: number;
        loadingPicId?: string;
        canPractice?: boolean;
        canBattleReplay?: boolean;
        apCost?: number;
        apFailReturn?: number;
        etItemId?: string;
        etCost?: number;
        etFailReturn?: number;
        etButtonStyle?: string;
        apProtectTimes?: number;
        diamondOnceDrop?: number;
        practiceTicketCost?: number;
        dailyStageDifficulty?: number;
        expGain?: number;
        goldGain?: number;
        loseExpGain?: number;
        loseGoldGain?: number;
        passFavor?: number;
        completeFavor?: number;
        slProgress?: number;
        displayMainItem?: string;
        hilightMark?: boolean;
        bossMark?: boolean;
        isPredefined?: boolean;
        isHardPredefined?: boolean;
        isSkillSelectablePredefined?: boolean;
        isStoryOnly?: boolean;
        appearanceStyle?: string;
        stageDropInfo?: {
            firstPassRewards?: null;
            firstCompleteRewards?: null;
            passRewards?: null;
            completeRewards?: null;
            displayRewards?: {
                type?: string;
                id?: string;
                dropType?: string;
            }[];
            displayDetailRewards?: {
                occPercent?: string;
                type?: string;
                id?: string;
                dropType?: string;
            }[];
        };
        canUseCharm?: boolean;
        canUseTech?: boolean;
        canUseTrapTool?: boolean;
        canUseBattlePerformance?: boolean;
        startButtonOverrideId?: string;
        isStagePatch?: boolean;
        mainStageId?: string;
        extraCondition?: {
            index?: number;
            template?: string;
            unlockParam?: string[];
        }[];
        extraInfo?: {
            stageId?: string;
            rewards?: {
                id?: string;
                count?: number;
                type?: string;
            }[];
            progressInfo?: {
                progressType?: string;
                descList?: Record<string, string>;
            };
        }[];
    };
    levels?: {
        options?: {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        };
        levelId?: string;
        mapId?: string;
        bgmEvent?: string;
        environmentSe?: string;
        mapData?: {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        };
        tilesDisallowToLocate?: any[];
        runes?: {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
        globalBuffs?: {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }[];
        routes?: {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }[];
        extraRoutes?: any[];
        enemies?: any[];
        enemyDbRefs?: {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }[];
        waves?: {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }[];
        branches?: Record<string, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }>;
        predefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        hardPredefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        excludeCharIdList?: null;
        randomSeed?: number;
        operaConfig?: string;
        runtimeData?: null;
    };
}, {
    excel?: {
        stageType?: string;
        difficulty?: string;
        performanceStageFlag?: string;
        diffGroup?: string;
        unlockCondition?: {
            stageId?: string;
            completeState?: string;
        }[];
        stageId?: string;
        levelId?: string;
        zoneId?: string;
        code?: string;
        name?: string;
        description?: string;
        hardStagedId?: string;
        dangerLevel?: string;
        dangerPoint?: number;
        loadingPicId?: string;
        canPractice?: boolean;
        canBattleReplay?: boolean;
        apCost?: number;
        apFailReturn?: number;
        etItemId?: string;
        etCost?: number;
        etFailReturn?: number;
        etButtonStyle?: string;
        apProtectTimes?: number;
        diamondOnceDrop?: number;
        practiceTicketCost?: number;
        dailyStageDifficulty?: number;
        expGain?: number;
        goldGain?: number;
        loseExpGain?: number;
        loseGoldGain?: number;
        passFavor?: number;
        completeFavor?: number;
        slProgress?: number;
        displayMainItem?: string;
        hilightMark?: boolean;
        bossMark?: boolean;
        isPredefined?: boolean;
        isHardPredefined?: boolean;
        isSkillSelectablePredefined?: boolean;
        isStoryOnly?: boolean;
        appearanceStyle?: string;
        stageDropInfo?: {
            firstPassRewards?: null;
            firstCompleteRewards?: null;
            passRewards?: null;
            completeRewards?: null;
            displayRewards?: {
                type?: string;
                id?: string;
                dropType?: string;
            }[];
            displayDetailRewards?: {
                occPercent?: string;
                type?: string;
                id?: string;
                dropType?: string;
            }[];
        };
        canUseCharm?: boolean;
        canUseTech?: boolean;
        canUseTrapTool?: boolean;
        canUseBattlePerformance?: boolean;
        startButtonOverrideId?: string;
        isStagePatch?: boolean;
        mainStageId?: string;
        extraCondition?: {
            index?: number;
            template?: string;
            unlockParam?: string[];
        }[];
        extraInfo?: {
            stageId?: string;
            rewards?: {
                id?: string;
                count?: number;
                type?: string;
            }[];
            progressInfo?: {
                progressType?: string;
                descList?: Record<string, string>;
            };
        }[];
    };
    levels?: {
        options?: {
            characterLimit?: number;
            maxLifePoint?: number;
            initialCost?: number;
            maxCost?: number;
            costIncreaseTime?: number;
            moveMultiplier?: number;
            steeringEnabled?: boolean;
            isTrainingLevel?: boolean;
            isHardTrainingLevel?: boolean;
            isPredefinedCardsSelectable?: boolean;
            maxPlayTime?: number;
            functionDisableMask?: string | number;
            configBlackBoard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        };
        levelId?: string;
        mapId?: string;
        bgmEvent?: string;
        environmentSe?: string;
        mapData?: {
            map?: number[][];
            tiles?: {
                tileKey?: string;
                heightType?: string | number;
                buildableType?: string | number;
                passableMask?: string | number;
                playerSideMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
            }[];
            blockEdges?: any[];
            tags?: string[];
            effects?: {
                key?: string;
                offset?: {
                    x?: number;
                    y?: number;
                    z?: number;
                };
                direction?: string | number;
            }[];
            layerRects?: null;
            width?: number;
            height?: number;
        };
        tilesDisallowToLocate?: any[];
        runes?: {
            difficultyMask?: string | number;
            key?: string;
            professionMask?: string | number;
            buildableMask?: string | number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
        globalBuffs?: {
            prefabKey?: string;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
            overrideCameraEffect?: null;
            passProfessionMaskFlag?: boolean;
            professionMask?: string | number;
            useExtraData?: boolean;
        }[];
        routes?: {
            motionMode?: string | number;
            startPosition?: {
                row?: number;
                col?: number;
            };
            endPosition?: {
                row?: number;
                col?: number;
            };
            spawnRandomRange?: {
                x?: number;
                y?: number;
            };
            spawnOffset?: {
                x?: number;
                y?: number;
            };
            checkpoints?: {
                type?: string | number;
                time?: number;
                position?: {
                    row?: number;
                    col?: number;
                };
                reachOffset?: {
                    x?: number;
                    y?: number;
                };
                randomizeReachOffset?: boolean;
                reachDistance?: number;
            }[];
            allowDiagonalMove?: boolean;
            visitEveryTileCenter?: boolean;
            visitEveryNodeCenter?: boolean;
            visitEveryCheckPoint?: boolean;
        }[];
        extraRoutes?: any[];
        enemies?: any[];
        enemyDbRefs?: {
            useDb?: boolean;
            id?: string;
            level?: number;
            overwrittenData?: {
                name?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                description?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                prefabKey?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                attributes?: {
                    maxHp?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    atk?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    def?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    magicResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    cost?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    blockCnt?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    moveSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    attackSpeed?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseAttackTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    respawnTime?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    hpRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    spRecoveryPerSec?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    maxDeployCount?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    massLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    baseForceLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    tauntLevel?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epDamageResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    epResistance?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    stunImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    silenceImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    sleepImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    frozenImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    levitateImmune?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                };
                applyWay?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                motion?: {
                    m_defined?: boolean;
                    m_value?: string;
                };
                enemyTags?: {
                    m_defined?: boolean;
                    m_value?: string[];
                };
                lifePointReduce?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                levelType?: {
                    m_defined?: boolean;
                    m_value?: string;
                } | {
                    m_defined?: boolean;
                    m_value?: number;
                };
                rangeRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                numOfExtraDrops?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                viewRadius?: {
                    m_defined?: boolean;
                    m_value?: number;
                };
                notCountInTotal?: {
                    m_defined?: boolean;
                    m_value?: boolean;
                };
                talentBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                skills?: {
                    prefabKey?: string;
                    priority?: number;
                    cooldown?: number;
                    initCooldown?: number;
                    spCost?: number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                spData?: {
                    spType?: string;
                    maxSp?: number;
                    initSp?: number;
                    increment?: number;
                };
            };
        }[];
        waves?: {
            preDelay?: number;
            postDelay?: number;
            maxTimeWaitingForNextWave?: number;
            fragments?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                name?: string;
            }[];
            advancedWaveTag?: string;
            name?: string;
        }[];
        branches?: Record<string, {
            phases?: {
                preDelay?: number;
                actions?: {
                    actionType?: string | number;
                    managedByScheduler?: boolean;
                    key?: string;
                    count?: number;
                    preDelay?: number;
                    interval?: number;
                    routeIndex?: number;
                    blockFragment?: boolean;
                    autoPreviewRoute?: boolean;
                    autoDisplayEnemyInfo?: boolean;
                    isUnharmfulAndAlwaysCountAsKilled?: boolean;
                    hiddenGroup?: string;
                    randomSpawnGroupKey?: string;
                    randomSpawnGroupPackKey?: string;
                    randomType?: string | number;
                    weight?: number;
                    dontBlockWave?: boolean;
                    isValid?: boolean;
                    extraMeta?: null;
                }[];
                m_randomActionGroups?: null;
                m_actionWithRandomSpawn?: null;
                m_validActionPackKeys?: null;
            }[];
        }>;
        predefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        hardPredefines?: {
            characterInsts?: any[];
            tokenInsts?: {
                position?: {
                    row?: number;
                    col?: number;
                };
                direction?: string | number;
                hidden?: boolean;
                alias?: string;
                uniEquipIds?: {
                    key?: string;
                    level?: number;
                }[];
                inst?: {
                    characterKey?: string;
                    level?: number;
                    phase?: string | number;
                    favorPoint?: number;
                    potentialRank?: number;
                };
                skillIndex?: number;
                mainSkillLvl?: number;
                skinId?: string;
                tmplId?: string;
                overrideSkillBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            characterCards?: any[];
            tokenCards?: any[];
        };
        excludeCharIdList?: null;
        randomSeed?: number;
        operaConfig?: string;
        runtimeData?: null;
    };
}>;
export declare const OperatorZod: z.ZodObject<{
    id: z.ZodString;
    recruit: z.ZodNumber;
    archetype: z.ZodString;
    range: z.ZodObject<{
        id: z.ZodString;
        direction: z.ZodNumber;
        grids: z.ZodArray<z.ZodObject<{
            row: z.ZodNumber;
            col: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            row?: number;
            col?: number;
        }, {
            row?: number;
            col?: number;
        }>, "many">;
    }, "strict", z.ZodTypeAny, {
        id?: string;
        direction?: number;
        grids?: {
            row?: number;
            col?: number;
        }[];
    }, {
        id?: string;
        direction?: number;
        grids?: {
            row?: number;
            col?: number;
        }[];
    }>;
    skills: z.ZodArray<z.ZodObject<{
        skillId: z.ZodString;
        iconId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        hidden: z.ZodBoolean;
        levels: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            rangeId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            description: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            skillType: z.ZodString;
            durationType: z.ZodString;
            spData: z.ZodObject<{
                spType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                levelUpCost: z.ZodNull;
                maxChargeTime: z.ZodNumber;
                spCost: z.ZodNumber;
                initSp: z.ZodNumber;
                increment: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                spType?: string | number;
                levelUpCost?: null;
                maxChargeTime?: number;
                spCost?: number;
                initSp?: number;
                increment?: number;
            }, {
                spType?: string | number;
                levelUpCost?: null;
                maxChargeTime?: number;
                spCost?: number;
                initSp?: number;
                increment?: number;
            }>;
            prefabId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            duration: z.ZodNumber;
            blackboard: z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                key?: string;
                value?: number;
                valueStr?: string;
            }, {
                key?: string;
                value?: number;
                valueStr?: string;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            name?: string;
            rangeId?: string;
            description?: string;
            skillType?: string;
            durationType?: string;
            spData?: {
                spType?: string | number;
                levelUpCost?: null;
                maxChargeTime?: number;
                spCost?: number;
                initSp?: number;
                increment?: number;
            };
            prefabId?: string;
            duration?: number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }, {
            name?: string;
            rangeId?: string;
            description?: string;
            skillType?: string;
            durationType?: string;
            spData?: {
                spType?: string | number;
                levelUpCost?: null;
                maxChargeTime?: number;
                spCost?: number;
                initSp?: number;
                increment?: number;
            };
            prefabId?: string;
            duration?: number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }>, "many">;
    }, "strict", z.ZodTypeAny, {
        skillId?: string;
        iconId?: string;
        hidden?: boolean;
        levels?: {
            name?: string;
            rangeId?: string;
            description?: string;
            skillType?: string;
            durationType?: string;
            spData?: {
                spType?: string | number;
                levelUpCost?: null;
                maxChargeTime?: number;
                spCost?: number;
                initSp?: number;
                increment?: number;
            };
            prefabId?: string;
            duration?: number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
    }, {
        skillId?: string;
        iconId?: string;
        hidden?: boolean;
        levels?: {
            name?: string;
            rangeId?: string;
            description?: string;
            skillType?: string;
            durationType?: string;
            spData?: {
                spType?: string | number;
                levelUpCost?: null;
                maxChargeTime?: number;
                spCost?: number;
                initSp?: number;
                increment?: number;
            };
            prefabId?: string;
            duration?: number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
    }>, "many">;
    modules: z.ZodArray<z.ZodObject<{
        info: z.ZodObject<{
            uniEquipId: z.ZodString;
            uniEquipName: z.ZodString;
            uniEquipIcon: z.ZodString;
            uniEquipDesc: z.ZodString;
            typeIcon: z.ZodString;
            typeName1: z.ZodString;
            typeName2: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            equipShiningColor: z.ZodString;
            showEvolvePhase: z.ZodString;
            unlockEvolvePhase: z.ZodString;
            charId: z.ZodString;
            tmplId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            showLevel: z.ZodNumber;
            unlockLevel: z.ZodNumber;
            unlockFavorPoint: z.ZodNumber;
            missionList: z.ZodArray<z.ZodString, "many">;
            itemCost: z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                count: z.ZodNumber;
                type: z.ZodString;
            }, "strict", z.ZodTypeAny, {
                id?: string;
                count?: number;
                type?: string;
            }, {
                id?: string;
                count?: number;
                type?: string;
            }>, "many">>, z.ZodNull]>;
            type: z.ZodString;
            uniEquipGetTime: z.ZodNumber;
            charEquipOrder: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            uniEquipId?: string;
            uniEquipName?: string;
            uniEquipIcon?: string;
            uniEquipDesc?: string;
            typeIcon?: string;
            typeName1?: string;
            typeName2?: string;
            equipShiningColor?: string;
            showEvolvePhase?: string;
            unlockEvolvePhase?: string;
            charId?: string;
            tmplId?: string;
            showLevel?: number;
            unlockLevel?: number;
            unlockFavorPoint?: number;
            missionList?: string[];
            itemCost?: Record<string, {
                id?: string;
                count?: number;
                type?: string;
            }[]>;
            type?: string;
            uniEquipGetTime?: number;
            charEquipOrder?: number;
        }, {
            uniEquipId?: string;
            uniEquipName?: string;
            uniEquipIcon?: string;
            uniEquipDesc?: string;
            typeIcon?: string;
            typeName1?: string;
            typeName2?: string;
            equipShiningColor?: string;
            showEvolvePhase?: string;
            unlockEvolvePhase?: string;
            charId?: string;
            tmplId?: string;
            showLevel?: number;
            unlockLevel?: number;
            unlockFavorPoint?: number;
            missionList?: string[];
            itemCost?: Record<string, {
                id?: string;
                count?: number;
                type?: string;
            }[]>;
            type?: string;
            uniEquipGetTime?: number;
            charEquipOrder?: number;
        }>;
        data: z.ZodUnion<[z.ZodObject<{
            phases: z.ZodArray<z.ZodObject<{
                equipLevel: z.ZodNumber;
                parts: z.ZodArray<z.ZodObject<{
                    resKey: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    target: z.ZodString;
                    isToken: z.ZodBoolean;
                    addOrOverrideTalentDataBundle: z.ZodObject<{
                        candidates: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                            displayRangeId: z.ZodBoolean;
                            upgradeDescription: z.ZodString;
                            talentIndex: z.ZodNumber;
                            unlockCondition: z.ZodObject<{
                                phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                                level: z.ZodNumber;
                            }, "strict", z.ZodTypeAny, {
                                phase?: string | number;
                                level?: number;
                            }, {
                                phase?: string | number;
                                level?: number;
                            }>;
                            requiredPotentialRank: z.ZodNumber;
                            prefabKey: z.ZodString;
                            name: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                            description: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                            rangeId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                            blackboard: z.ZodArray<z.ZodObject<{
                                key: z.ZodString;
                                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                            }, "strict", z.ZodTypeAny, {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }, {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }>, "many">;
                            tokenKey: z.ZodOptional<z.ZodString>;
                        }, "strict", z.ZodTypeAny, {
                            displayRangeId?: boolean;
                            upgradeDescription?: string;
                            talentIndex?: number;
                            unlockCondition?: {
                                phase?: string | number;
                                level?: number;
                            };
                            requiredPotentialRank?: number;
                            prefabKey?: string;
                            name?: string;
                            description?: string;
                            rangeId?: string;
                            blackboard?: {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }[];
                            tokenKey?: string;
                        }, {
                            displayRangeId?: boolean;
                            upgradeDescription?: string;
                            talentIndex?: number;
                            unlockCondition?: {
                                phase?: string | number;
                                level?: number;
                            };
                            requiredPotentialRank?: number;
                            prefabKey?: string;
                            name?: string;
                            description?: string;
                            rangeId?: string;
                            blackboard?: {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }[];
                            tokenKey?: string;
                        }>, "many">, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        candidates?: {
                            displayRangeId?: boolean;
                            upgradeDescription?: string;
                            talentIndex?: number;
                            unlockCondition?: {
                                phase?: string | number;
                                level?: number;
                            };
                            requiredPotentialRank?: number;
                            prefabKey?: string;
                            name?: string;
                            description?: string;
                            rangeId?: string;
                            blackboard?: {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }[];
                            tokenKey?: string;
                        }[];
                    }, {
                        candidates?: {
                            displayRangeId?: boolean;
                            upgradeDescription?: string;
                            talentIndex?: number;
                            unlockCondition?: {
                                phase?: string | number;
                                level?: number;
                            };
                            requiredPotentialRank?: number;
                            prefabKey?: string;
                            name?: string;
                            description?: string;
                            rangeId?: string;
                            blackboard?: {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }[];
                            tokenKey?: string;
                        }[];
                    }>;
                    overrideTraitDataBundle: z.ZodObject<{
                        candidates: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                            additionalDescription: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                            unlockCondition: z.ZodObject<{
                                phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                                level: z.ZodNumber;
                            }, "strict", z.ZodTypeAny, {
                                phase?: string | number;
                                level?: number;
                            }, {
                                phase?: string | number;
                                level?: number;
                            }>;
                            requiredPotentialRank: z.ZodNumber;
                            blackboard: z.ZodArray<z.ZodObject<{
                                key: z.ZodString;
                                value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                                valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                            }, "strict", z.ZodTypeAny, {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }, {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }>, "many">;
                            overrideDescripton: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                            prefabKey: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                            rangeId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            additionalDescription?: string;
                            unlockCondition?: {
                                phase?: string | number;
                                level?: number;
                            };
                            requiredPotentialRank?: number;
                            blackboard?: {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }[];
                            overrideDescripton?: string;
                            prefabKey?: string;
                            rangeId?: string;
                        }, {
                            additionalDescription?: string;
                            unlockCondition?: {
                                phase?: string | number;
                                level?: number;
                            };
                            requiredPotentialRank?: number;
                            blackboard?: {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }[];
                            overrideDescripton?: string;
                            prefabKey?: string;
                            rangeId?: string;
                        }>, "many">, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        candidates?: {
                            additionalDescription?: string;
                            unlockCondition?: {
                                phase?: string | number;
                                level?: number;
                            };
                            requiredPotentialRank?: number;
                            blackboard?: {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }[];
                            overrideDescripton?: string;
                            prefabKey?: string;
                            rangeId?: string;
                        }[];
                    }, {
                        candidates?: {
                            additionalDescription?: string;
                            unlockCondition?: {
                                phase?: string | number;
                                level?: number;
                            };
                            requiredPotentialRank?: number;
                            blackboard?: {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }[];
                            overrideDescripton?: string;
                            prefabKey?: string;
                            rangeId?: string;
                        }[];
                    }>;
                }, "strict", z.ZodTypeAny, {
                    resKey?: string;
                    target?: string;
                    isToken?: boolean;
                    addOrOverrideTalentDataBundle?: {
                        candidates?: {
                            displayRangeId?: boolean;
                            upgradeDescription?: string;
                            talentIndex?: number;
                            unlockCondition?: {
                                phase?: string | number;
                                level?: number;
                            };
                            requiredPotentialRank?: number;
                            prefabKey?: string;
                            name?: string;
                            description?: string;
                            rangeId?: string;
                            blackboard?: {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }[];
                            tokenKey?: string;
                        }[];
                    };
                    overrideTraitDataBundle?: {
                        candidates?: {
                            additionalDescription?: string;
                            unlockCondition?: {
                                phase?: string | number;
                                level?: number;
                            };
                            requiredPotentialRank?: number;
                            blackboard?: {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }[];
                            overrideDescripton?: string;
                            prefabKey?: string;
                            rangeId?: string;
                        }[];
                    };
                }, {
                    resKey?: string;
                    target?: string;
                    isToken?: boolean;
                    addOrOverrideTalentDataBundle?: {
                        candidates?: {
                            displayRangeId?: boolean;
                            upgradeDescription?: string;
                            talentIndex?: number;
                            unlockCondition?: {
                                phase?: string | number;
                                level?: number;
                            };
                            requiredPotentialRank?: number;
                            prefabKey?: string;
                            name?: string;
                            description?: string;
                            rangeId?: string;
                            blackboard?: {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }[];
                            tokenKey?: string;
                        }[];
                    };
                    overrideTraitDataBundle?: {
                        candidates?: {
                            additionalDescription?: string;
                            unlockCondition?: {
                                phase?: string | number;
                                level?: number;
                            };
                            requiredPotentialRank?: number;
                            blackboard?: {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }[];
                            overrideDescripton?: string;
                            prefabKey?: string;
                            rangeId?: string;
                        }[];
                    };
                }>, "many">;
                attributeBlackboard: z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">;
                tokenAttributeBlackboard: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">>;
            }, "strict", z.ZodTypeAny, {
                equipLevel?: number;
                parts?: {
                    resKey?: string;
                    target?: string;
                    isToken?: boolean;
                    addOrOverrideTalentDataBundle?: {
                        candidates?: {
                            displayRangeId?: boolean;
                            upgradeDescription?: string;
                            talentIndex?: number;
                            unlockCondition?: {
                                phase?: string | number;
                                level?: number;
                            };
                            requiredPotentialRank?: number;
                            prefabKey?: string;
                            name?: string;
                            description?: string;
                            rangeId?: string;
                            blackboard?: {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }[];
                            tokenKey?: string;
                        }[];
                    };
                    overrideTraitDataBundle?: {
                        candidates?: {
                            additionalDescription?: string;
                            unlockCondition?: {
                                phase?: string | number;
                                level?: number;
                            };
                            requiredPotentialRank?: number;
                            blackboard?: {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }[];
                            overrideDescripton?: string;
                            prefabKey?: string;
                            rangeId?: string;
                        }[];
                    };
                }[];
                attributeBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                tokenAttributeBlackboard?: Record<string, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[]>;
            }, {
                equipLevel?: number;
                parts?: {
                    resKey?: string;
                    target?: string;
                    isToken?: boolean;
                    addOrOverrideTalentDataBundle?: {
                        candidates?: {
                            displayRangeId?: boolean;
                            upgradeDescription?: string;
                            talentIndex?: number;
                            unlockCondition?: {
                                phase?: string | number;
                                level?: number;
                            };
                            requiredPotentialRank?: number;
                            prefabKey?: string;
                            name?: string;
                            description?: string;
                            rangeId?: string;
                            blackboard?: {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }[];
                            tokenKey?: string;
                        }[];
                    };
                    overrideTraitDataBundle?: {
                        candidates?: {
                            additionalDescription?: string;
                            unlockCondition?: {
                                phase?: string | number;
                                level?: number;
                            };
                            requiredPotentialRank?: number;
                            blackboard?: {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }[];
                            overrideDescripton?: string;
                            prefabKey?: string;
                            rangeId?: string;
                        }[];
                    };
                }[];
                attributeBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                tokenAttributeBlackboard?: Record<string, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[]>;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            phases?: {
                equipLevel?: number;
                parts?: {
                    resKey?: string;
                    target?: string;
                    isToken?: boolean;
                    addOrOverrideTalentDataBundle?: {
                        candidates?: {
                            displayRangeId?: boolean;
                            upgradeDescription?: string;
                            talentIndex?: number;
                            unlockCondition?: {
                                phase?: string | number;
                                level?: number;
                            };
                            requiredPotentialRank?: number;
                            prefabKey?: string;
                            name?: string;
                            description?: string;
                            rangeId?: string;
                            blackboard?: {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }[];
                            tokenKey?: string;
                        }[];
                    };
                    overrideTraitDataBundle?: {
                        candidates?: {
                            additionalDescription?: string;
                            unlockCondition?: {
                                phase?: string | number;
                                level?: number;
                            };
                            requiredPotentialRank?: number;
                            blackboard?: {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }[];
                            overrideDescripton?: string;
                            prefabKey?: string;
                            rangeId?: string;
                        }[];
                    };
                }[];
                attributeBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                tokenAttributeBlackboard?: Record<string, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[]>;
            }[];
        }, {
            phases?: {
                equipLevel?: number;
                parts?: {
                    resKey?: string;
                    target?: string;
                    isToken?: boolean;
                    addOrOverrideTalentDataBundle?: {
                        candidates?: {
                            displayRangeId?: boolean;
                            upgradeDescription?: string;
                            talentIndex?: number;
                            unlockCondition?: {
                                phase?: string | number;
                                level?: number;
                            };
                            requiredPotentialRank?: number;
                            prefabKey?: string;
                            name?: string;
                            description?: string;
                            rangeId?: string;
                            blackboard?: {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }[];
                            tokenKey?: string;
                        }[];
                    };
                    overrideTraitDataBundle?: {
                        candidates?: {
                            additionalDescription?: string;
                            unlockCondition?: {
                                phase?: string | number;
                                level?: number;
                            };
                            requiredPotentialRank?: number;
                            blackboard?: {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }[];
                            overrideDescripton?: string;
                            prefabKey?: string;
                            rangeId?: string;
                        }[];
                    };
                }[];
                attributeBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                tokenAttributeBlackboard?: Record<string, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[]>;
            }[];
        }>, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        info?: {
            uniEquipId?: string;
            uniEquipName?: string;
            uniEquipIcon?: string;
            uniEquipDesc?: string;
            typeIcon?: string;
            typeName1?: string;
            typeName2?: string;
            equipShiningColor?: string;
            showEvolvePhase?: string;
            unlockEvolvePhase?: string;
            charId?: string;
            tmplId?: string;
            showLevel?: number;
            unlockLevel?: number;
            unlockFavorPoint?: number;
            missionList?: string[];
            itemCost?: Record<string, {
                id?: string;
                count?: number;
                type?: string;
            }[]>;
            type?: string;
            uniEquipGetTime?: number;
            charEquipOrder?: number;
        };
        data?: {
            phases?: {
                equipLevel?: number;
                parts?: {
                    resKey?: string;
                    target?: string;
                    isToken?: boolean;
                    addOrOverrideTalentDataBundle?: {
                        candidates?: {
                            displayRangeId?: boolean;
                            upgradeDescription?: string;
                            talentIndex?: number;
                            unlockCondition?: {
                                phase?: string | number;
                                level?: number;
                            };
                            requiredPotentialRank?: number;
                            prefabKey?: string;
                            name?: string;
                            description?: string;
                            rangeId?: string;
                            blackboard?: {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }[];
                            tokenKey?: string;
                        }[];
                    };
                    overrideTraitDataBundle?: {
                        candidates?: {
                            additionalDescription?: string;
                            unlockCondition?: {
                                phase?: string | number;
                                level?: number;
                            };
                            requiredPotentialRank?: number;
                            blackboard?: {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }[];
                            overrideDescripton?: string;
                            prefabKey?: string;
                            rangeId?: string;
                        }[];
                    };
                }[];
                attributeBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                tokenAttributeBlackboard?: Record<string, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[]>;
            }[];
        };
    }, {
        info?: {
            uniEquipId?: string;
            uniEquipName?: string;
            uniEquipIcon?: string;
            uniEquipDesc?: string;
            typeIcon?: string;
            typeName1?: string;
            typeName2?: string;
            equipShiningColor?: string;
            showEvolvePhase?: string;
            unlockEvolvePhase?: string;
            charId?: string;
            tmplId?: string;
            showLevel?: number;
            unlockLevel?: number;
            unlockFavorPoint?: number;
            missionList?: string[];
            itemCost?: Record<string, {
                id?: string;
                count?: number;
                type?: string;
            }[]>;
            type?: string;
            uniEquipGetTime?: number;
            charEquipOrder?: number;
        };
        data?: {
            phases?: {
                equipLevel?: number;
                parts?: {
                    resKey?: string;
                    target?: string;
                    isToken?: boolean;
                    addOrOverrideTalentDataBundle?: {
                        candidates?: {
                            displayRangeId?: boolean;
                            upgradeDescription?: string;
                            talentIndex?: number;
                            unlockCondition?: {
                                phase?: string | number;
                                level?: number;
                            };
                            requiredPotentialRank?: number;
                            prefabKey?: string;
                            name?: string;
                            description?: string;
                            rangeId?: string;
                            blackboard?: {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }[];
                            tokenKey?: string;
                        }[];
                    };
                    overrideTraitDataBundle?: {
                        candidates?: {
                            additionalDescription?: string;
                            unlockCondition?: {
                                phase?: string | number;
                                level?: number;
                            };
                            requiredPotentialRank?: number;
                            blackboard?: {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }[];
                            overrideDescripton?: string;
                            prefabKey?: string;
                            rangeId?: string;
                        }[];
                    };
                }[];
                attributeBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                tokenAttributeBlackboard?: Record<string, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[]>;
            }[];
        };
    }>, "many">;
    skins: z.ZodArray<z.ZodObject<{
        skinId: z.ZodString;
        charId: z.ZodString;
        tokenSkinMap: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            tokenId: z.ZodString;
            tokenSkinId: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            tokenId?: string;
            tokenSkinId?: string;
        }, {
            tokenId?: string;
            tokenSkinId?: string;
        }>, "many">, z.ZodNull]>;
        illustId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        dynIllustId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        avatarId: z.ZodString;
        portraitId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        dynPortraitId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        dynEntranceId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        buildingId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        battleSkin: z.ZodObject<{
            overwritePrefab: z.ZodBoolean;
            skinOrPrefabId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            overwritePrefab?: boolean;
            skinOrPrefabId?: string;
        }, {
            overwritePrefab?: boolean;
            skinOrPrefabId?: string;
        }>;
        isBuySkin: z.ZodBoolean;
        tmplId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        voiceId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        voiceType: z.ZodString;
        displaySkin: z.ZodObject<{
            skinName: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            colorList: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
            titleList: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
            modelName: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            drawerList: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
            designerList: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
            skinGroupId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            skinGroupName: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            skinGroupSortIndex: z.ZodNumber;
            content: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            dialog: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            usage: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            description: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            obtainApproach: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            sortId: z.ZodNumber;
            displayTagId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            getTime: z.ZodNumber;
            onYear: z.ZodNumber;
            onPeriod: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            skinName?: string;
            colorList?: string[];
            titleList?: string[];
            modelName?: string;
            drawerList?: string[];
            designerList?: string[];
            skinGroupId?: string;
            skinGroupName?: string;
            skinGroupSortIndex?: number;
            content?: string;
            dialog?: string;
            usage?: string;
            description?: string;
            obtainApproach?: string;
            sortId?: number;
            displayTagId?: string;
            getTime?: number;
            onYear?: number;
            onPeriod?: number;
        }, {
            skinName?: string;
            colorList?: string[];
            titleList?: string[];
            modelName?: string;
            drawerList?: string[];
            designerList?: string[];
            skinGroupId?: string;
            skinGroupName?: string;
            skinGroupSortIndex?: number;
            content?: string;
            dialog?: string;
            usage?: string;
            description?: string;
            obtainApproach?: string;
            sortId?: number;
            displayTagId?: string;
            getTime?: number;
            onYear?: number;
            onPeriod?: number;
        }>;
    }, "strict", z.ZodTypeAny, {
        skinId?: string;
        charId?: string;
        tokenSkinMap?: {
            tokenId?: string;
            tokenSkinId?: string;
        }[];
        illustId?: string;
        dynIllustId?: string;
        avatarId?: string;
        portraitId?: string;
        dynPortraitId?: string;
        dynEntranceId?: string;
        buildingId?: string;
        battleSkin?: {
            overwritePrefab?: boolean;
            skinOrPrefabId?: string;
        };
        isBuySkin?: boolean;
        tmplId?: string;
        voiceId?: string;
        voiceType?: string;
        displaySkin?: {
            skinName?: string;
            colorList?: string[];
            titleList?: string[];
            modelName?: string;
            drawerList?: string[];
            designerList?: string[];
            skinGroupId?: string;
            skinGroupName?: string;
            skinGroupSortIndex?: number;
            content?: string;
            dialog?: string;
            usage?: string;
            description?: string;
            obtainApproach?: string;
            sortId?: number;
            displayTagId?: string;
            getTime?: number;
            onYear?: number;
            onPeriod?: number;
        };
    }, {
        skinId?: string;
        charId?: string;
        tokenSkinMap?: {
            tokenId?: string;
            tokenSkinId?: string;
        }[];
        illustId?: string;
        dynIllustId?: string;
        avatarId?: string;
        portraitId?: string;
        dynPortraitId?: string;
        dynEntranceId?: string;
        buildingId?: string;
        battleSkin?: {
            overwritePrefab?: boolean;
            skinOrPrefabId?: string;
        };
        isBuySkin?: boolean;
        tmplId?: string;
        voiceId?: string;
        voiceType?: string;
        displaySkin?: {
            skinName?: string;
            colorList?: string[];
            titleList?: string[];
            modelName?: string;
            drawerList?: string[];
            designerList?: string[];
            skinGroupId?: string;
            skinGroupName?: string;
            skinGroupSortIndex?: number;
            content?: string;
            dialog?: string;
            usage?: string;
            description?: string;
            obtainApproach?: string;
            sortId?: number;
            displayTagId?: string;
            getTime?: number;
            onYear?: number;
            onPeriod?: number;
        };
    }>, "many">;
    bases: z.ZodArray<z.ZodObject<{
        condition: z.ZodObject<{
            buffId: z.ZodString;
            cond: z.ZodObject<{
                phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                level: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                phase?: string | number;
                level?: number;
            }, {
                phase?: string | number;
                level?: number;
            }>;
        }, "strict", z.ZodTypeAny, {
            buffId?: string;
            cond?: {
                phase?: string | number;
                level?: number;
            };
        }, {
            buffId?: string;
            cond?: {
                phase?: string | number;
                level?: number;
            };
        }>;
        skill: z.ZodObject<{
            buffId: z.ZodString;
            buffName: z.ZodString;
            buffIcon: z.ZodString;
            skillIcon: z.ZodString;
            sortId: z.ZodNumber;
            buffColor: z.ZodString;
            textColor: z.ZodString;
            buffCategory: z.ZodString;
            roomType: z.ZodString;
            description: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            buffId?: string;
            buffName?: string;
            buffIcon?: string;
            skillIcon?: string;
            sortId?: number;
            buffColor?: string;
            textColor?: string;
            buffCategory?: string;
            roomType?: string;
            description?: string;
        }, {
            buffId?: string;
            buffName?: string;
            buffIcon?: string;
            skillIcon?: string;
            sortId?: number;
            buffColor?: string;
            textColor?: string;
            buffCategory?: string;
            roomType?: string;
            description?: string;
        }>;
    }, "strict", z.ZodTypeAny, {
        condition?: {
            buffId?: string;
            cond?: {
                phase?: string | number;
                level?: number;
            };
        };
        skill?: {
            buffId?: string;
            buffName?: string;
            buffIcon?: string;
            skillIcon?: string;
            sortId?: number;
            buffColor?: string;
            textColor?: string;
            buffCategory?: string;
            roomType?: string;
            description?: string;
        };
    }, {
        condition?: {
            buffId?: string;
            cond?: {
                phase?: string | number;
                level?: number;
            };
        };
        skill?: {
            buffId?: string;
            buffName?: string;
            buffIcon?: string;
            skillIcon?: string;
            sortId?: number;
            buffColor?: string;
            textColor?: string;
            buffCategory?: string;
            roomType?: string;
            description?: string;
        };
    }>, "many">;
    paradox: z.ZodUnion<[z.ZodObject<{
        excel: z.ZodObject<{
            charId: z.ZodString;
            stageId: z.ZodString;
            levelId: z.ZodString;
            zoneId: z.ZodString;
            code: z.ZodString;
            name: z.ZodString;
            loadingPicId: z.ZodString;
            description: z.ZodString;
            unlockParam: z.ZodArray<z.ZodObject<{
                unlockType: z.ZodString;
                unlockParam1: z.ZodString;
                unlockParam2: z.ZodString;
                unlockParam3: z.ZodNull;
            }, "strict", z.ZodTypeAny, {
                unlockType?: string;
                unlockParam1?: string;
                unlockParam2?: string;
                unlockParam3?: null;
            }, {
                unlockType?: string;
                unlockParam1?: string;
                unlockParam2?: string;
                unlockParam3?: null;
            }>, "many">;
            rewardItem: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                count: z.ZodNumber;
                type: z.ZodString;
            }, "strict", z.ZodTypeAny, {
                id?: string;
                count?: number;
                type?: string;
            }, {
                id?: string;
                count?: number;
                type?: string;
            }>, "many">;
            stageNameForShow: z.ZodString;
            zoneNameForShow: z.ZodString;
            picId: z.ZodString;
            stageGetTime: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            charId?: string;
            stageId?: string;
            levelId?: string;
            zoneId?: string;
            code?: string;
            name?: string;
            loadingPicId?: string;
            description?: string;
            unlockParam?: {
                unlockType?: string;
                unlockParam1?: string;
                unlockParam2?: string;
                unlockParam3?: null;
            }[];
            rewardItem?: {
                id?: string;
                count?: number;
                type?: string;
            }[];
            stageNameForShow?: string;
            zoneNameForShow?: string;
            picId?: string;
            stageGetTime?: number;
        }, {
            charId?: string;
            stageId?: string;
            levelId?: string;
            zoneId?: string;
            code?: string;
            name?: string;
            loadingPicId?: string;
            description?: string;
            unlockParam?: {
                unlockType?: string;
                unlockParam1?: string;
                unlockParam2?: string;
                unlockParam3?: null;
            }[];
            rewardItem?: {
                id?: string;
                count?: number;
                type?: string;
            }[];
            stageNameForShow?: string;
            zoneNameForShow?: string;
            picId?: string;
            stageGetTime?: number;
        }>;
        levels: z.ZodObject<{
            options: z.ZodObject<{
                characterLimit: z.ZodNumber;
                maxLifePoint: z.ZodNumber;
                initialCost: z.ZodNumber;
                maxCost: z.ZodNumber;
                costIncreaseTime: z.ZodNumber;
                moveMultiplier: z.ZodNumber;
                steeringEnabled: z.ZodBoolean;
                isTrainingLevel: z.ZodBoolean;
                isHardTrainingLevel: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                isPredefinedCardsSelectable: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                maxPlayTime: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                functionDisableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                configBlackBoard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }, {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }>;
            levelId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            mapId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            bgmEvent: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            environmentSe: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            mapData: z.ZodObject<{
                map: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
                tiles: z.ZodArray<z.ZodObject<{
                    tileKey: z.ZodString;
                    heightType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    buildableType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    passableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    playerSideMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                    blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }>, "many">, z.ZodNull]>;
                    effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        offset: z.ZodObject<{
                            x: z.ZodNumber;
                            y: z.ZodNumber;
                            z: z.ZodNumber;
                        }, "strict", z.ZodTypeAny, {
                            x?: number;
                            y?: number;
                            z?: number;
                        }, {
                            x?: number;
                            y?: number;
                            z?: number;
                        }>;
                        direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }, {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }>, "many">, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }, {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }>, "many">;
                blockEdges: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodNull]>;
                tags: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
                effects: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    offset: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                        z: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        x?: number;
                        y?: number;
                        z?: number;
                    }, {
                        x?: number;
                        y?: number;
                        z?: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }, {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }>, "many">, z.ZodNull]>;
                layerRects: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                width: z.ZodOptional<z.ZodNumber>;
                height: z.ZodOptional<z.ZodNumber>;
            }, "strict", z.ZodTypeAny, {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            }, {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            }>;
            tilesDisallowToLocate: z.ZodArray<z.ZodAny, "many">;
            runes: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                difficultyMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                key: z.ZodString;
                professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                buildableMask: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                blackboard: z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">;
            }, "strict", z.ZodTypeAny, {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }, {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }>, "many">, z.ZodNull]>;
            globalBuffs: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                prefabKey: z.ZodString;
                blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">, z.ZodNull]>;
                overrideCameraEffect: z.ZodNull;
                passProfessionMaskFlag: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                professionMask: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                useExtraData: z.ZodOptional<z.ZodBoolean>;
            }, "strict", z.ZodTypeAny, {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }, {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }>, "many">, z.ZodNull]>;
            routes: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                motionMode: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                startPosition: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    row?: number;
                    col?: number;
                }, {
                    row?: number;
                    col?: number;
                }>;
                endPosition: z.ZodObject<{
                    row: z.ZodNumber;
                    col: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    row?: number;
                    col?: number;
                }, {
                    row?: number;
                    col?: number;
                }>;
                spawnRandomRange: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x?: number;
                    y?: number;
                }, {
                    x?: number;
                    y?: number;
                }>;
                spawnOffset: z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    x?: number;
                    y?: number;
                }, {
                    x?: number;
                    y?: number;
                }>;
                checkpoints: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    type: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    time: z.ZodNumber;
                    position: z.ZodObject<{
                        row: z.ZodNumber;
                        col: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        row?: number;
                        col?: number;
                    }, {
                        row?: number;
                        col?: number;
                    }>;
                    reachOffset: z.ZodObject<{
                        x: z.ZodNumber;
                        y: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        x?: number;
                        y?: number;
                    }, {
                        x?: number;
                        y?: number;
                    }>;
                    randomizeReachOffset: z.ZodBoolean;
                    reachDistance: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }, {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }>, "many">, z.ZodNull]>;
                allowDiagonalMove: z.ZodBoolean;
                visitEveryTileCenter: z.ZodBoolean;
                visitEveryNodeCenter: z.ZodBoolean;
                visitEveryCheckPoint: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
            }, "strict", z.ZodTypeAny, {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }, {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }>, z.ZodNull]>, "many">;
            extraRoutes: z.ZodUnion<[z.ZodArray<z.ZodAny, "many">, z.ZodUndefined]>;
            enemies: z.ZodArray<z.ZodAny, "many">;
            enemyDbRefs: z.ZodArray<z.ZodObject<{
                useDb: z.ZodBoolean;
                id: z.ZodString;
                level: z.ZodNumber;
                overwrittenData: z.ZodUnion<[z.ZodObject<{
                    name: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: string;
                    }, {
                        m_defined?: boolean;
                        m_value?: string;
                    }>;
                    description: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: string;
                    }, {
                        m_defined?: boolean;
                        m_value?: string;
                    }>;
                    prefabKey: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: string;
                    }, {
                        m_defined?: boolean;
                        m_value?: string;
                    }>;
                    attributes: z.ZodObject<{
                        maxHp: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        atk: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        def: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        magicResistance: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        cost: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        blockCnt: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        moveSpeed: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        attackSpeed: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        baseAttackTime: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        respawnTime: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        hpRecoveryPerSec: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        spRecoveryPerSec: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        maxDeployCount: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        massLevel: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        baseForceLevel: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>;
                        tauntLevel: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>, z.ZodUndefined]>;
                        epDamageResistance: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>, z.ZodUndefined]>;
                        epResistance: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: number;
                        }, {
                            m_defined?: boolean;
                            m_value?: number;
                        }>, z.ZodUndefined]>;
                        stunImmune: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }>;
                        silenceImmune: z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }>;
                        sleepImmune: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }>, z.ZodUndefined]>;
                        frozenImmune: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }>, z.ZodUndefined]>;
                        levitateImmune: z.ZodUnion<[z.ZodObject<{
                            m_defined: z.ZodBoolean;
                            m_value: z.ZodBoolean;
                        }, "strict", z.ZodTypeAny, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }, {
                            m_defined?: boolean;
                            m_value?: boolean;
                        }>, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    }, {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    }>;
                    applyWay: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: string;
                    }, {
                        m_defined?: boolean;
                        m_value?: string;
                    }>, z.ZodUndefined]>;
                    motion: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: string;
                    }, {
                        m_defined?: boolean;
                        m_value?: string;
                    }>, z.ZodUndefined]>;
                    enemyTags: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: string[];
                    }, {
                        m_defined?: boolean;
                        m_value?: string[];
                    }>, z.ZodUndefined]>;
                    lifePointReduce: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    levelType: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: string;
                    }, {
                        m_defined?: boolean;
                        m_value?: string;
                    }>, z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    rangeRadius: z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>;
                    numOfExtraDrops: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    viewRadius: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: number;
                    }, {
                        m_defined?: boolean;
                        m_value?: number;
                    }>, z.ZodUndefined]>;
                    notCountInTotal: z.ZodUnion<[z.ZodObject<{
                        m_defined: z.ZodBoolean;
                        m_value: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }, {
                        m_defined?: boolean;
                        m_value?: boolean;
                    }>, z.ZodUndefined]>;
                    talentBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }>, "many">, z.ZodNull]>;
                    skills: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        prefabKey: z.ZodString;
                        priority: z.ZodNumber;
                        cooldown: z.ZodNumber;
                        initCooldown: z.ZodNumber;
                        spCost: z.ZodNumber;
                        blackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                            key: z.ZodString;
                            value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                            valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        }, "strict", z.ZodTypeAny, {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }, {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }>, "many">, z.ZodNull]>;
                    }, "strict", z.ZodTypeAny, {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }, {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }>, "many">, z.ZodNull]>;
                    spData: z.ZodUnion<[z.ZodObject<{
                        spType: z.ZodString;
                        maxSp: z.ZodNumber;
                        initSp: z.ZodNumber;
                        increment: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    }, {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    }>, z.ZodNull]>;
                }, "strict", z.ZodTypeAny, {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                }, {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                }>, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }, {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }>, "many">;
            waves: z.ZodArray<z.ZodObject<{
                preDelay: z.ZodNumber;
                postDelay: z.ZodNumber;
                maxTimeWaitingForNextWave: z.ZodNumber;
                fragments: z.ZodArray<z.ZodObject<{
                    preDelay: z.ZodNumber;
                    actions: z.ZodArray<z.ZodObject<{
                        actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        managedByScheduler: z.ZodBoolean;
                        key: z.ZodString;
                        count: z.ZodNumber;
                        preDelay: z.ZodNumber;
                        interval: z.ZodNumber;
                        routeIndex: z.ZodNumber;
                        blockFragment: z.ZodBoolean;
                        autoPreviewRoute: z.ZodBoolean;
                        autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                        hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                        weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                        dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }, {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }>, "many">;
                    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                }, "strict", z.ZodTypeAny, {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }, {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }>, "many">;
                advancedWaveTag: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strict", z.ZodTypeAny, {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }, {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }>, "many">;
            branches: z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodObject<{
                phases: z.ZodArray<z.ZodObject<{
                    preDelay: z.ZodNumber;
                    actions: z.ZodArray<z.ZodObject<{
                        actionType: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        managedByScheduler: z.ZodBoolean;
                        key: z.ZodString;
                        count: z.ZodNumber;
                        preDelay: z.ZodNumber;
                        interval: z.ZodNumber;
                        routeIndex: z.ZodNumber;
                        blockFragment: z.ZodBoolean;
                        autoPreviewRoute: z.ZodBoolean;
                        autoDisplayEnemyInfo: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isUnharmfulAndAlwaysCountAsKilled: z.ZodBoolean;
                        hiddenGroup: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                        randomSpawnGroupKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomSpawnGroupPackKey: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                        randomType: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodUndefined]>;
                        weight: z.ZodUnion<[z.ZodNumber, z.ZodUndefined]>;
                        dontBlockWave: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        isValid: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
                        extraMeta: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }, {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }>, "many">;
                    m_randomActionGroups: z.ZodOptional<z.ZodNull>;
                    m_actionWithRandomSpawn: z.ZodOptional<z.ZodNull>;
                    m_validActionPackKeys: z.ZodOptional<z.ZodNull>;
                }, "strict", z.ZodTypeAny, {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }, {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }>, "many">;
            }, "strict", z.ZodTypeAny, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }>>, z.ZodNull]>;
            predefines: z.ZodUnion<[z.ZodObject<{
                characterInsts: z.ZodArray<z.ZodAny, "many">;
                tokenInsts: z.ZodArray<z.ZodObject<{
                    position: z.ZodObject<{
                        row: z.ZodNumber;
                        col: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        row?: number;
                        col?: number;
                    }, {
                        row?: number;
                        col?: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    hidden: z.ZodBoolean;
                    alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        level: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        level?: number;
                    }, {
                        key?: string;
                        level?: number;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                    inst: z.ZodObject<{
                        characterKey: z.ZodString;
                        level: z.ZodNumber;
                        phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        favorPoint: z.ZodNumber;
                        potentialRank: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    }, {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    }>;
                    skillIndex: z.ZodNumber;
                    mainSkillLvl: z.ZodNumber;
                    skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }, {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }>, "many">;
                characterCards: z.ZodArray<z.ZodAny, "many">;
                tokenCards: z.ZodArray<z.ZodAny, "many">;
            }, "strict", z.ZodTypeAny, {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            }, {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            }>, z.ZodNull]>;
            hardPredefines: z.ZodUnion<[z.ZodObject<{
                characterInsts: z.ZodArray<z.ZodAny, "many">;
                tokenInsts: z.ZodArray<z.ZodObject<{
                    position: z.ZodObject<{
                        row: z.ZodNumber;
                        col: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        row?: number;
                        col?: number;
                    }, {
                        row?: number;
                        col?: number;
                    }>;
                    direction: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    hidden: z.ZodBoolean;
                    alias: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    uniEquipIds: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        level: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        level?: number;
                    }, {
                        key?: string;
                        level?: number;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                    inst: z.ZodObject<{
                        characterKey: z.ZodString;
                        level: z.ZodNumber;
                        phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                        favorPoint: z.ZodNumber;
                        potentialRank: z.ZodNumber;
                    }, "strict", z.ZodTypeAny, {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    }, {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    }>;
                    skillIndex: z.ZodNumber;
                    mainSkillLvl: z.ZodNumber;
                    skinId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    tmplId: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    overrideSkillBlackboard: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                        key: z.ZodString;
                        value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                        valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                    }, "strict", z.ZodTypeAny, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }, {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }>, "many">, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }, {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }>, "many">;
                characterCards: z.ZodArray<z.ZodAny, "many">;
                tokenCards: z.ZodArray<z.ZodAny, "many">;
            }, "strict", z.ZodTypeAny, {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            }, {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            }>, z.ZodNull, z.ZodUndefined]>;
            excludeCharIdList: z.ZodNull;
            randomSeed: z.ZodNumber;
            operaConfig: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
            runtimeData: z.ZodUnion<[z.ZodNull, z.ZodUndefined]>;
        }, "strict", z.ZodTypeAny, {
            options?: {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            };
            levelId?: string;
            mapId?: string;
            bgmEvent?: string;
            environmentSe?: string;
            mapData?: {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            };
            tilesDisallowToLocate?: any[];
            runes?: {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            globalBuffs?: {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }[];
            routes?: {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }[];
            extraRoutes?: any[];
            enemies?: any[];
            enemyDbRefs?: {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }[];
            waves?: {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }[];
            branches?: Record<string, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }>;
            predefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            hardPredefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            excludeCharIdList?: null;
            randomSeed?: number;
            operaConfig?: string;
            runtimeData?: null;
        }, {
            options?: {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            };
            levelId?: string;
            mapId?: string;
            bgmEvent?: string;
            environmentSe?: string;
            mapData?: {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            };
            tilesDisallowToLocate?: any[];
            runes?: {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            globalBuffs?: {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }[];
            routes?: {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }[];
            extraRoutes?: any[];
            enemies?: any[];
            enemyDbRefs?: {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }[];
            waves?: {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }[];
            branches?: Record<string, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }>;
            predefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            hardPredefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            excludeCharIdList?: null;
            randomSeed?: number;
            operaConfig?: string;
            runtimeData?: null;
        }>;
    }, "strict", z.ZodTypeAny, {
        excel?: {
            charId?: string;
            stageId?: string;
            levelId?: string;
            zoneId?: string;
            code?: string;
            name?: string;
            loadingPicId?: string;
            description?: string;
            unlockParam?: {
                unlockType?: string;
                unlockParam1?: string;
                unlockParam2?: string;
                unlockParam3?: null;
            }[];
            rewardItem?: {
                id?: string;
                count?: number;
                type?: string;
            }[];
            stageNameForShow?: string;
            zoneNameForShow?: string;
            picId?: string;
            stageGetTime?: number;
        };
        levels?: {
            options?: {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            };
            levelId?: string;
            mapId?: string;
            bgmEvent?: string;
            environmentSe?: string;
            mapData?: {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            };
            tilesDisallowToLocate?: any[];
            runes?: {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            globalBuffs?: {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }[];
            routes?: {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }[];
            extraRoutes?: any[];
            enemies?: any[];
            enemyDbRefs?: {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }[];
            waves?: {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }[];
            branches?: Record<string, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }>;
            predefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            hardPredefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            excludeCharIdList?: null;
            randomSeed?: number;
            operaConfig?: string;
            runtimeData?: null;
        };
    }, {
        excel?: {
            charId?: string;
            stageId?: string;
            levelId?: string;
            zoneId?: string;
            code?: string;
            name?: string;
            loadingPicId?: string;
            description?: string;
            unlockParam?: {
                unlockType?: string;
                unlockParam1?: string;
                unlockParam2?: string;
                unlockParam3?: null;
            }[];
            rewardItem?: {
                id?: string;
                count?: number;
                type?: string;
            }[];
            stageNameForShow?: string;
            zoneNameForShow?: string;
            picId?: string;
            stageGetTime?: number;
        };
        levels?: {
            options?: {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            };
            levelId?: string;
            mapId?: string;
            bgmEvent?: string;
            environmentSe?: string;
            mapData?: {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            };
            tilesDisallowToLocate?: any[];
            runes?: {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            globalBuffs?: {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }[];
            routes?: {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }[];
            extraRoutes?: any[];
            enemies?: any[];
            enemyDbRefs?: {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }[];
            waves?: {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }[];
            branches?: Record<string, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }>;
            predefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            hardPredefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            excludeCharIdList?: null;
            randomSeed?: number;
            operaConfig?: string;
            runtimeData?: null;
        };
    }>, z.ZodNull]>;
    data: z.ZodObject<{
        name: z.ZodString;
        description: z.ZodString;
        canUseGeneralPotentialItem: z.ZodBoolean;
        canUseActivityPotentialItem: z.ZodBoolean;
        potentialItemId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        activityPotentialItemId: z.ZodNullable<z.ZodString>;
        classicPotentialItemId: z.ZodNullable<z.ZodString>;
        nationId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        groupId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        teamId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        displayNumber: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        appellation: z.ZodString;
        position: z.ZodString;
        tagList: z.ZodArray<z.ZodString, "many">;
        itemUsage: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        itemDesc: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        itemObtainApproach: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        isNotObtainable: z.ZodBoolean;
        isSpChar: z.ZodBoolean;
        maxPotentialLevel: z.ZodNumber;
        rarity: z.ZodString;
        profession: z.ZodString;
        subProfessionId: z.ZodString;
        trait: z.ZodUnion<[z.ZodObject<{
            candidates: z.ZodArray<z.ZodObject<{
                unlockCondition: z.ZodObject<{
                    phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    level: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    phase?: string | number;
                    level?: number;
                }, {
                    phase?: string | number;
                    level?: number;
                }>;
                requiredPotentialRank: z.ZodNumber;
                blackboard: z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">;
                overrideDescripton: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                prefabKey: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                rangeId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                unlockCondition?: {
                    phase?: string | number;
                    level?: number;
                };
                requiredPotentialRank?: number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideDescripton?: string;
                prefabKey?: string;
                rangeId?: string;
            }, {
                unlockCondition?: {
                    phase?: string | number;
                    level?: number;
                };
                requiredPotentialRank?: number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideDescripton?: string;
                prefabKey?: string;
                rangeId?: string;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            candidates?: {
                unlockCondition?: {
                    phase?: string | number;
                    level?: number;
                };
                requiredPotentialRank?: number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideDescripton?: string;
                prefabKey?: string;
                rangeId?: string;
            }[];
        }, {
            candidates?: {
                unlockCondition?: {
                    phase?: string | number;
                    level?: number;
                };
                requiredPotentialRank?: number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideDescripton?: string;
                prefabKey?: string;
                rangeId?: string;
            }[];
        }>, z.ZodNull]>;
        phases: z.ZodArray<z.ZodObject<{
            characterPrefabKey: z.ZodString;
            rangeId: z.ZodString;
            maxLevel: z.ZodNumber;
            attributesKeyFrames: z.ZodArray<z.ZodObject<{
                level: z.ZodNumber;
                data: z.ZodObject<{
                    maxHp: z.ZodNumber;
                    atk: z.ZodNumber;
                    def: z.ZodNumber;
                    magicResistance: z.ZodNumber;
                    cost: z.ZodNumber;
                    blockCnt: z.ZodNumber;
                    moveSpeed: z.ZodNumber;
                    attackSpeed: z.ZodNumber;
                    baseAttackTime: z.ZodNumber;
                    respawnTime: z.ZodNumber;
                    hpRecoveryPerSec: z.ZodNumber;
                    spRecoveryPerSec: z.ZodNumber;
                    maxDeployCount: z.ZodNumber;
                    maxDeckStackCnt: z.ZodNumber;
                    tauntLevel: z.ZodNumber;
                    massLevel: z.ZodNumber;
                    baseForceLevel: z.ZodNumber;
                    stunImmune: z.ZodBoolean;
                    silenceImmune: z.ZodBoolean;
                    sleepImmune: z.ZodBoolean;
                    frozenImmune: z.ZodBoolean;
                    levitateImmune: z.ZodBoolean;
                }, "strict", z.ZodTypeAny, {
                    maxHp?: number;
                    atk?: number;
                    def?: number;
                    magicResistance?: number;
                    cost?: number;
                    blockCnt?: number;
                    moveSpeed?: number;
                    attackSpeed?: number;
                    baseAttackTime?: number;
                    respawnTime?: number;
                    hpRecoveryPerSec?: number;
                    spRecoveryPerSec?: number;
                    maxDeployCount?: number;
                    maxDeckStackCnt?: number;
                    tauntLevel?: number;
                    massLevel?: number;
                    baseForceLevel?: number;
                    stunImmune?: boolean;
                    silenceImmune?: boolean;
                    sleepImmune?: boolean;
                    frozenImmune?: boolean;
                    levitateImmune?: boolean;
                }, {
                    maxHp?: number;
                    atk?: number;
                    def?: number;
                    magicResistance?: number;
                    cost?: number;
                    blockCnt?: number;
                    moveSpeed?: number;
                    attackSpeed?: number;
                    baseAttackTime?: number;
                    respawnTime?: number;
                    hpRecoveryPerSec?: number;
                    spRecoveryPerSec?: number;
                    maxDeployCount?: number;
                    maxDeckStackCnt?: number;
                    tauntLevel?: number;
                    massLevel?: number;
                    baseForceLevel?: number;
                    stunImmune?: boolean;
                    silenceImmune?: boolean;
                    sleepImmune?: boolean;
                    frozenImmune?: boolean;
                    levitateImmune?: boolean;
                }>;
            }, "strict", z.ZodTypeAny, {
                level?: number;
                data?: {
                    maxHp?: number;
                    atk?: number;
                    def?: number;
                    magicResistance?: number;
                    cost?: number;
                    blockCnt?: number;
                    moveSpeed?: number;
                    attackSpeed?: number;
                    baseAttackTime?: number;
                    respawnTime?: number;
                    hpRecoveryPerSec?: number;
                    spRecoveryPerSec?: number;
                    maxDeployCount?: number;
                    maxDeckStackCnt?: number;
                    tauntLevel?: number;
                    massLevel?: number;
                    baseForceLevel?: number;
                    stunImmune?: boolean;
                    silenceImmune?: boolean;
                    sleepImmune?: boolean;
                    frozenImmune?: boolean;
                    levitateImmune?: boolean;
                };
            }, {
                level?: number;
                data?: {
                    maxHp?: number;
                    atk?: number;
                    def?: number;
                    magicResistance?: number;
                    cost?: number;
                    blockCnt?: number;
                    moveSpeed?: number;
                    attackSpeed?: number;
                    baseAttackTime?: number;
                    respawnTime?: number;
                    hpRecoveryPerSec?: number;
                    spRecoveryPerSec?: number;
                    maxDeployCount?: number;
                    maxDeckStackCnt?: number;
                    tauntLevel?: number;
                    massLevel?: number;
                    baseForceLevel?: number;
                    stunImmune?: boolean;
                    silenceImmune?: boolean;
                    sleepImmune?: boolean;
                    frozenImmune?: boolean;
                    levitateImmune?: boolean;
                };
            }>, "many">;
            evolveCost: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                count: z.ZodNumber;
                type: z.ZodString;
            }, "strict", z.ZodTypeAny, {
                id?: string;
                count?: number;
                type?: string;
            }, {
                id?: string;
                count?: number;
                type?: string;
            }>, "many">, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            characterPrefabKey?: string;
            rangeId?: string;
            maxLevel?: number;
            attributesKeyFrames?: {
                level?: number;
                data?: {
                    maxHp?: number;
                    atk?: number;
                    def?: number;
                    magicResistance?: number;
                    cost?: number;
                    blockCnt?: number;
                    moveSpeed?: number;
                    attackSpeed?: number;
                    baseAttackTime?: number;
                    respawnTime?: number;
                    hpRecoveryPerSec?: number;
                    spRecoveryPerSec?: number;
                    maxDeployCount?: number;
                    maxDeckStackCnt?: number;
                    tauntLevel?: number;
                    massLevel?: number;
                    baseForceLevel?: number;
                    stunImmune?: boolean;
                    silenceImmune?: boolean;
                    sleepImmune?: boolean;
                    frozenImmune?: boolean;
                    levitateImmune?: boolean;
                };
            }[];
            evolveCost?: {
                id?: string;
                count?: number;
                type?: string;
            }[];
        }, {
            characterPrefabKey?: string;
            rangeId?: string;
            maxLevel?: number;
            attributesKeyFrames?: {
                level?: number;
                data?: {
                    maxHp?: number;
                    atk?: number;
                    def?: number;
                    magicResistance?: number;
                    cost?: number;
                    blockCnt?: number;
                    moveSpeed?: number;
                    attackSpeed?: number;
                    baseAttackTime?: number;
                    respawnTime?: number;
                    hpRecoveryPerSec?: number;
                    spRecoveryPerSec?: number;
                    maxDeployCount?: number;
                    maxDeckStackCnt?: number;
                    tauntLevel?: number;
                    massLevel?: number;
                    baseForceLevel?: number;
                    stunImmune?: boolean;
                    silenceImmune?: boolean;
                    sleepImmune?: boolean;
                    frozenImmune?: boolean;
                    levitateImmune?: boolean;
                };
            }[];
            evolveCost?: {
                id?: string;
                count?: number;
                type?: string;
            }[];
        }>, "many">;
        skills: z.ZodArray<z.ZodObject<{
            skillId: z.ZodString;
            overridePrefabKey: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            overrideTokenKey: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            levelUpCostCond: z.ZodArray<z.ZodObject<{
                unlockCond: z.ZodObject<{
                    phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    level: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    phase?: string | number;
                    level?: number;
                }, {
                    phase?: string | number;
                    level?: number;
                }>;
                lvlUpTime: z.ZodNumber;
                levelUpCost: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    count: z.ZodNumber;
                    type: z.ZodString;
                }, "strict", z.ZodTypeAny, {
                    id?: string;
                    count?: number;
                    type?: string;
                }, {
                    id?: string;
                    count?: number;
                    type?: string;
                }>, "many">, z.ZodNull]>;
            }, "strict", z.ZodTypeAny, {
                unlockCond?: {
                    phase?: string | number;
                    level?: number;
                };
                lvlUpTime?: number;
                levelUpCost?: {
                    id?: string;
                    count?: number;
                    type?: string;
                }[];
            }, {
                unlockCond?: {
                    phase?: string | number;
                    level?: number;
                };
                lvlUpTime?: number;
                levelUpCost?: {
                    id?: string;
                    count?: number;
                    type?: string;
                }[];
            }>, "many">;
            unlockCond: z.ZodObject<{
                phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                level: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                phase?: string | number;
                level?: number;
            }, {
                phase?: string | number;
                level?: number;
            }>;
        }, "strict", z.ZodTypeAny, {
            skillId?: string;
            overridePrefabKey?: string;
            overrideTokenKey?: string;
            levelUpCostCond?: {
                unlockCond?: {
                    phase?: string | number;
                    level?: number;
                };
                lvlUpTime?: number;
                levelUpCost?: {
                    id?: string;
                    count?: number;
                    type?: string;
                }[];
            }[];
            unlockCond?: {
                phase?: string | number;
                level?: number;
            };
        }, {
            skillId?: string;
            overridePrefabKey?: string;
            overrideTokenKey?: string;
            levelUpCostCond?: {
                unlockCond?: {
                    phase?: string | number;
                    level?: number;
                };
                lvlUpTime?: number;
                levelUpCost?: {
                    id?: string;
                    count?: number;
                    type?: string;
                }[];
            }[];
            unlockCond?: {
                phase?: string | number;
                level?: number;
            };
        }>, "many">;
        displayTokenDict: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodBoolean>>;
        talents: z.ZodUnion<[z.ZodArray<z.ZodObject<{
            candidates: z.ZodArray<z.ZodObject<{
                unlockCondition: z.ZodObject<{
                    phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                    level: z.ZodNumber;
                }, "strict", z.ZodTypeAny, {
                    phase?: string | number;
                    level?: number;
                }, {
                    phase?: string | number;
                    level?: number;
                }>;
                requiredPotentialRank: z.ZodNumber;
                prefabKey: z.ZodString;
                name: z.ZodString;
                description: z.ZodString;
                rangeId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                blackboard: z.ZodArray<z.ZodObject<{
                    key: z.ZodString;
                    value: z.ZodUnion<[z.ZodNumber, z.ZodNull]>;
                    valueStr: z.ZodUnion<[z.ZodString, z.ZodNull, z.ZodUndefined]>;
                }, "strict", z.ZodTypeAny, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }>, "many">;
                tokenKey: z.ZodNullable<z.ZodString>;
            }, "strict", z.ZodTypeAny, {
                unlockCondition?: {
                    phase?: string | number;
                    level?: number;
                };
                requiredPotentialRank?: number;
                prefabKey?: string;
                name?: string;
                description?: string;
                rangeId?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                tokenKey?: string;
            }, {
                unlockCondition?: {
                    phase?: string | number;
                    level?: number;
                };
                requiredPotentialRank?: number;
                prefabKey?: string;
                name?: string;
                description?: string;
                rangeId?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                tokenKey?: string;
            }>, "many">;
        }, "strict", z.ZodTypeAny, {
            candidates?: {
                unlockCondition?: {
                    phase?: string | number;
                    level?: number;
                };
                requiredPotentialRank?: number;
                prefabKey?: string;
                name?: string;
                description?: string;
                rangeId?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                tokenKey?: string;
            }[];
        }, {
            candidates?: {
                unlockCondition?: {
                    phase?: string | number;
                    level?: number;
                };
                requiredPotentialRank?: number;
                prefabKey?: string;
                name?: string;
                description?: string;
                rangeId?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                tokenKey?: string;
            }[];
        }>, "many">, z.ZodNull]>;
        potentialRanks: z.ZodArray<z.ZodObject<{
            type: z.ZodString;
            description: z.ZodString;
            buff: z.ZodUnion<[z.ZodObject<{
                attributes: z.ZodObject<{
                    abnormalFlags: z.ZodNull;
                    abnormalImmunes: z.ZodNull;
                    abnormalAntis: z.ZodNull;
                    abnormalCombos: z.ZodNull;
                    abnormalComboImmunes: z.ZodNull;
                    attributeModifiers: z.ZodArray<z.ZodObject<{
                        attributeType: z.ZodString;
                        formulaItem: z.ZodString;
                        value: z.ZodNumber;
                        loadFromBlackboard: z.ZodBoolean;
                        fetchBaseValueFromSourceEntity: z.ZodBoolean;
                    }, "strict", z.ZodTypeAny, {
                        attributeType?: string;
                        formulaItem?: string;
                        value?: number;
                        loadFromBlackboard?: boolean;
                        fetchBaseValueFromSourceEntity?: boolean;
                    }, {
                        attributeType?: string;
                        formulaItem?: string;
                        value?: number;
                        loadFromBlackboard?: boolean;
                        fetchBaseValueFromSourceEntity?: boolean;
                    }>, "many">;
                }, "strict", z.ZodTypeAny, {
                    abnormalFlags?: null;
                    abnormalImmunes?: null;
                    abnormalAntis?: null;
                    abnormalCombos?: null;
                    abnormalComboImmunes?: null;
                    attributeModifiers?: {
                        attributeType?: string;
                        formulaItem?: string;
                        value?: number;
                        loadFromBlackboard?: boolean;
                        fetchBaseValueFromSourceEntity?: boolean;
                    }[];
                }, {
                    abnormalFlags?: null;
                    abnormalImmunes?: null;
                    abnormalAntis?: null;
                    abnormalCombos?: null;
                    abnormalComboImmunes?: null;
                    attributeModifiers?: {
                        attributeType?: string;
                        formulaItem?: string;
                        value?: number;
                        loadFromBlackboard?: boolean;
                        fetchBaseValueFromSourceEntity?: boolean;
                    }[];
                }>;
            }, "strict", z.ZodTypeAny, {
                attributes?: {
                    abnormalFlags?: null;
                    abnormalImmunes?: null;
                    abnormalAntis?: null;
                    abnormalCombos?: null;
                    abnormalComboImmunes?: null;
                    attributeModifiers?: {
                        attributeType?: string;
                        formulaItem?: string;
                        value?: number;
                        loadFromBlackboard?: boolean;
                        fetchBaseValueFromSourceEntity?: boolean;
                    }[];
                };
            }, {
                attributes?: {
                    abnormalFlags?: null;
                    abnormalImmunes?: null;
                    abnormalAntis?: null;
                    abnormalCombos?: null;
                    abnormalComboImmunes?: null;
                    attributeModifiers?: {
                        attributeType?: string;
                        formulaItem?: string;
                        value?: number;
                        loadFromBlackboard?: boolean;
                        fetchBaseValueFromSourceEntity?: boolean;
                    }[];
                };
            }>, z.ZodNull]>;
            equivalentCost: z.ZodNull;
        }, "strict", z.ZodTypeAny, {
            type?: string;
            description?: string;
            buff?: {
                attributes?: {
                    abnormalFlags?: null;
                    abnormalImmunes?: null;
                    abnormalAntis?: null;
                    abnormalCombos?: null;
                    abnormalComboImmunes?: null;
                    attributeModifiers?: {
                        attributeType?: string;
                        formulaItem?: string;
                        value?: number;
                        loadFromBlackboard?: boolean;
                        fetchBaseValueFromSourceEntity?: boolean;
                    }[];
                };
            };
            equivalentCost?: null;
        }, {
            type?: string;
            description?: string;
            buff?: {
                attributes?: {
                    abnormalFlags?: null;
                    abnormalImmunes?: null;
                    abnormalAntis?: null;
                    abnormalCombos?: null;
                    abnormalComboImmunes?: null;
                    attributeModifiers?: {
                        attributeType?: string;
                        formulaItem?: string;
                        value?: number;
                        loadFromBlackboard?: boolean;
                        fetchBaseValueFromSourceEntity?: boolean;
                    }[];
                };
            };
            equivalentCost?: null;
        }>, "many">;
        favorKeyFrames: z.ZodArray<z.ZodObject<{
            level: z.ZodNumber;
            data: z.ZodObject<{
                maxHp: z.ZodNumber;
                atk: z.ZodNumber;
                def: z.ZodNumber;
                magicResistance: z.ZodNumber;
                cost: z.ZodNumber;
                blockCnt: z.ZodNumber;
                moveSpeed: z.ZodNumber;
                attackSpeed: z.ZodNumber;
                baseAttackTime: z.ZodNumber;
                respawnTime: z.ZodNumber;
                hpRecoveryPerSec: z.ZodNumber;
                spRecoveryPerSec: z.ZodNumber;
                maxDeployCount: z.ZodNumber;
                maxDeckStackCnt: z.ZodNumber;
                tauntLevel: z.ZodNumber;
                massLevel: z.ZodNumber;
                baseForceLevel: z.ZodNumber;
                stunImmune: z.ZodBoolean;
                silenceImmune: z.ZodBoolean;
                sleepImmune: z.ZodBoolean;
                frozenImmune: z.ZodBoolean;
                levitateImmune: z.ZodBoolean;
            }, "strict", z.ZodTypeAny, {
                maxHp?: number;
                atk?: number;
                def?: number;
                magicResistance?: number;
                cost?: number;
                blockCnt?: number;
                moveSpeed?: number;
                attackSpeed?: number;
                baseAttackTime?: number;
                respawnTime?: number;
                hpRecoveryPerSec?: number;
                spRecoveryPerSec?: number;
                maxDeployCount?: number;
                maxDeckStackCnt?: number;
                tauntLevel?: number;
                massLevel?: number;
                baseForceLevel?: number;
                stunImmune?: boolean;
                silenceImmune?: boolean;
                sleepImmune?: boolean;
                frozenImmune?: boolean;
                levitateImmune?: boolean;
            }, {
                maxHp?: number;
                atk?: number;
                def?: number;
                magicResistance?: number;
                cost?: number;
                blockCnt?: number;
                moveSpeed?: number;
                attackSpeed?: number;
                baseAttackTime?: number;
                respawnTime?: number;
                hpRecoveryPerSec?: number;
                spRecoveryPerSec?: number;
                maxDeployCount?: number;
                maxDeckStackCnt?: number;
                tauntLevel?: number;
                massLevel?: number;
                baseForceLevel?: number;
                stunImmune?: boolean;
                silenceImmune?: boolean;
                sleepImmune?: boolean;
                frozenImmune?: boolean;
                levitateImmune?: boolean;
            }>;
        }, "strict", z.ZodTypeAny, {
            level?: number;
            data?: {
                maxHp?: number;
                atk?: number;
                def?: number;
                magicResistance?: number;
                cost?: number;
                blockCnt?: number;
                moveSpeed?: number;
                attackSpeed?: number;
                baseAttackTime?: number;
                respawnTime?: number;
                hpRecoveryPerSec?: number;
                spRecoveryPerSec?: number;
                maxDeployCount?: number;
                maxDeckStackCnt?: number;
                tauntLevel?: number;
                massLevel?: number;
                baseForceLevel?: number;
                stunImmune?: boolean;
                silenceImmune?: boolean;
                sleepImmune?: boolean;
                frozenImmune?: boolean;
                levitateImmune?: boolean;
            };
        }, {
            level?: number;
            data?: {
                maxHp?: number;
                atk?: number;
                def?: number;
                magicResistance?: number;
                cost?: number;
                blockCnt?: number;
                moveSpeed?: number;
                attackSpeed?: number;
                baseAttackTime?: number;
                respawnTime?: number;
                hpRecoveryPerSec?: number;
                spRecoveryPerSec?: number;
                maxDeployCount?: number;
                maxDeckStackCnt?: number;
                tauntLevel?: number;
                massLevel?: number;
                baseForceLevel?: number;
                stunImmune?: boolean;
                silenceImmune?: boolean;
                sleepImmune?: boolean;
                frozenImmune?: boolean;
                levitateImmune?: boolean;
            };
        }>, "many">;
        allSkillLvlup: z.ZodArray<z.ZodObject<{
            unlockCond: z.ZodObject<{
                phase: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
                level: z.ZodNumber;
            }, "strict", z.ZodTypeAny, {
                phase?: string | number;
                level?: number;
            }, {
                phase?: string | number;
                level?: number;
            }>;
            lvlUpCost: z.ZodUnion<[z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                count: z.ZodNumber;
                type: z.ZodString;
            }, "strict", z.ZodTypeAny, {
                id?: string;
                count?: number;
                type?: string;
            }, {
                id?: string;
                count?: number;
                type?: string;
            }>, "many">, z.ZodNull]>;
        }, "strict", z.ZodTypeAny, {
            unlockCond?: {
                phase?: string | number;
                level?: number;
            };
            lvlUpCost?: {
                id?: string;
                count?: number;
                type?: string;
            }[];
        }, {
            unlockCond?: {
                phase?: string | number;
                level?: number;
            };
            lvlUpCost?: {
                id?: string;
                count?: number;
                type?: string;
            }[];
        }>, "many">;
    }, "strict", z.ZodTypeAny, {
        name?: string;
        description?: string;
        canUseGeneralPotentialItem?: boolean;
        canUseActivityPotentialItem?: boolean;
        potentialItemId?: string;
        activityPotentialItemId?: string;
        classicPotentialItemId?: string;
        nationId?: string;
        groupId?: string;
        teamId?: string;
        displayNumber?: string;
        appellation?: string;
        position?: string;
        tagList?: string[];
        itemUsage?: string;
        itemDesc?: string;
        itemObtainApproach?: string;
        isNotObtainable?: boolean;
        isSpChar?: boolean;
        maxPotentialLevel?: number;
        rarity?: string;
        profession?: string;
        subProfessionId?: string;
        trait?: {
            candidates?: {
                unlockCondition?: {
                    phase?: string | number;
                    level?: number;
                };
                requiredPotentialRank?: number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideDescripton?: string;
                prefabKey?: string;
                rangeId?: string;
            }[];
        };
        phases?: {
            characterPrefabKey?: string;
            rangeId?: string;
            maxLevel?: number;
            attributesKeyFrames?: {
                level?: number;
                data?: {
                    maxHp?: number;
                    atk?: number;
                    def?: number;
                    magicResistance?: number;
                    cost?: number;
                    blockCnt?: number;
                    moveSpeed?: number;
                    attackSpeed?: number;
                    baseAttackTime?: number;
                    respawnTime?: number;
                    hpRecoveryPerSec?: number;
                    spRecoveryPerSec?: number;
                    maxDeployCount?: number;
                    maxDeckStackCnt?: number;
                    tauntLevel?: number;
                    massLevel?: number;
                    baseForceLevel?: number;
                    stunImmune?: boolean;
                    silenceImmune?: boolean;
                    sleepImmune?: boolean;
                    frozenImmune?: boolean;
                    levitateImmune?: boolean;
                };
            }[];
            evolveCost?: {
                id?: string;
                count?: number;
                type?: string;
            }[];
        }[];
        skills?: {
            skillId?: string;
            overridePrefabKey?: string;
            overrideTokenKey?: string;
            levelUpCostCond?: {
                unlockCond?: {
                    phase?: string | number;
                    level?: number;
                };
                lvlUpTime?: number;
                levelUpCost?: {
                    id?: string;
                    count?: number;
                    type?: string;
                }[];
            }[];
            unlockCond?: {
                phase?: string | number;
                level?: number;
            };
        }[];
        displayTokenDict?: Record<string, boolean>;
        talents?: {
            candidates?: {
                unlockCondition?: {
                    phase?: string | number;
                    level?: number;
                };
                requiredPotentialRank?: number;
                prefabKey?: string;
                name?: string;
                description?: string;
                rangeId?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                tokenKey?: string;
            }[];
        }[];
        potentialRanks?: {
            type?: string;
            description?: string;
            buff?: {
                attributes?: {
                    abnormalFlags?: null;
                    abnormalImmunes?: null;
                    abnormalAntis?: null;
                    abnormalCombos?: null;
                    abnormalComboImmunes?: null;
                    attributeModifiers?: {
                        attributeType?: string;
                        formulaItem?: string;
                        value?: number;
                        loadFromBlackboard?: boolean;
                        fetchBaseValueFromSourceEntity?: boolean;
                    }[];
                };
            };
            equivalentCost?: null;
        }[];
        favorKeyFrames?: {
            level?: number;
            data?: {
                maxHp?: number;
                atk?: number;
                def?: number;
                magicResistance?: number;
                cost?: number;
                blockCnt?: number;
                moveSpeed?: number;
                attackSpeed?: number;
                baseAttackTime?: number;
                respawnTime?: number;
                hpRecoveryPerSec?: number;
                spRecoveryPerSec?: number;
                maxDeployCount?: number;
                maxDeckStackCnt?: number;
                tauntLevel?: number;
                massLevel?: number;
                baseForceLevel?: number;
                stunImmune?: boolean;
                silenceImmune?: boolean;
                sleepImmune?: boolean;
                frozenImmune?: boolean;
                levitateImmune?: boolean;
            };
        }[];
        allSkillLvlup?: {
            unlockCond?: {
                phase?: string | number;
                level?: number;
            };
            lvlUpCost?: {
                id?: string;
                count?: number;
                type?: string;
            }[];
        }[];
    }, {
        name?: string;
        description?: string;
        canUseGeneralPotentialItem?: boolean;
        canUseActivityPotentialItem?: boolean;
        potentialItemId?: string;
        activityPotentialItemId?: string;
        classicPotentialItemId?: string;
        nationId?: string;
        groupId?: string;
        teamId?: string;
        displayNumber?: string;
        appellation?: string;
        position?: string;
        tagList?: string[];
        itemUsage?: string;
        itemDesc?: string;
        itemObtainApproach?: string;
        isNotObtainable?: boolean;
        isSpChar?: boolean;
        maxPotentialLevel?: number;
        rarity?: string;
        profession?: string;
        subProfessionId?: string;
        trait?: {
            candidates?: {
                unlockCondition?: {
                    phase?: string | number;
                    level?: number;
                };
                requiredPotentialRank?: number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideDescripton?: string;
                prefabKey?: string;
                rangeId?: string;
            }[];
        };
        phases?: {
            characterPrefabKey?: string;
            rangeId?: string;
            maxLevel?: number;
            attributesKeyFrames?: {
                level?: number;
                data?: {
                    maxHp?: number;
                    atk?: number;
                    def?: number;
                    magicResistance?: number;
                    cost?: number;
                    blockCnt?: number;
                    moveSpeed?: number;
                    attackSpeed?: number;
                    baseAttackTime?: number;
                    respawnTime?: number;
                    hpRecoveryPerSec?: number;
                    spRecoveryPerSec?: number;
                    maxDeployCount?: number;
                    maxDeckStackCnt?: number;
                    tauntLevel?: number;
                    massLevel?: number;
                    baseForceLevel?: number;
                    stunImmune?: boolean;
                    silenceImmune?: boolean;
                    sleepImmune?: boolean;
                    frozenImmune?: boolean;
                    levitateImmune?: boolean;
                };
            }[];
            evolveCost?: {
                id?: string;
                count?: number;
                type?: string;
            }[];
        }[];
        skills?: {
            skillId?: string;
            overridePrefabKey?: string;
            overrideTokenKey?: string;
            levelUpCostCond?: {
                unlockCond?: {
                    phase?: string | number;
                    level?: number;
                };
                lvlUpTime?: number;
                levelUpCost?: {
                    id?: string;
                    count?: number;
                    type?: string;
                }[];
            }[];
            unlockCond?: {
                phase?: string | number;
                level?: number;
            };
        }[];
        displayTokenDict?: Record<string, boolean>;
        talents?: {
            candidates?: {
                unlockCondition?: {
                    phase?: string | number;
                    level?: number;
                };
                requiredPotentialRank?: number;
                prefabKey?: string;
                name?: string;
                description?: string;
                rangeId?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                tokenKey?: string;
            }[];
        }[];
        potentialRanks?: {
            type?: string;
            description?: string;
            buff?: {
                attributes?: {
                    abnormalFlags?: null;
                    abnormalImmunes?: null;
                    abnormalAntis?: null;
                    abnormalCombos?: null;
                    abnormalComboImmunes?: null;
                    attributeModifiers?: {
                        attributeType?: string;
                        formulaItem?: string;
                        value?: number;
                        loadFromBlackboard?: boolean;
                        fetchBaseValueFromSourceEntity?: boolean;
                    }[];
                };
            };
            equivalentCost?: null;
        }[];
        favorKeyFrames?: {
            level?: number;
            data?: {
                maxHp?: number;
                atk?: number;
                def?: number;
                magicResistance?: number;
                cost?: number;
                blockCnt?: number;
                moveSpeed?: number;
                attackSpeed?: number;
                baseAttackTime?: number;
                respawnTime?: number;
                hpRecoveryPerSec?: number;
                spRecoveryPerSec?: number;
                maxDeployCount?: number;
                maxDeckStackCnt?: number;
                tauntLevel?: number;
                massLevel?: number;
                baseForceLevel?: number;
                stunImmune?: boolean;
                silenceImmune?: boolean;
                sleepImmune?: boolean;
                frozenImmune?: boolean;
                levitateImmune?: boolean;
            };
        }[];
        allSkillLvlup?: {
            unlockCond?: {
                phase?: string | number;
                level?: number;
            };
            lvlUpCost?: {
                id?: string;
                count?: number;
                type?: string;
            }[];
        }[];
    }>;
}, "strict", z.ZodTypeAny, {
    id?: string;
    recruit?: number;
    archetype?: string;
    range?: {
        id?: string;
        direction?: number;
        grids?: {
            row?: number;
            col?: number;
        }[];
    };
    skills?: {
        skillId?: string;
        iconId?: string;
        hidden?: boolean;
        levels?: {
            name?: string;
            rangeId?: string;
            description?: string;
            skillType?: string;
            durationType?: string;
            spData?: {
                spType?: string | number;
                levelUpCost?: null;
                maxChargeTime?: number;
                spCost?: number;
                initSp?: number;
                increment?: number;
            };
            prefabId?: string;
            duration?: number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
    }[];
    modules?: {
        info?: {
            uniEquipId?: string;
            uniEquipName?: string;
            uniEquipIcon?: string;
            uniEquipDesc?: string;
            typeIcon?: string;
            typeName1?: string;
            typeName2?: string;
            equipShiningColor?: string;
            showEvolvePhase?: string;
            unlockEvolvePhase?: string;
            charId?: string;
            tmplId?: string;
            showLevel?: number;
            unlockLevel?: number;
            unlockFavorPoint?: number;
            missionList?: string[];
            itemCost?: Record<string, {
                id?: string;
                count?: number;
                type?: string;
            }[]>;
            type?: string;
            uniEquipGetTime?: number;
            charEquipOrder?: number;
        };
        data?: {
            phases?: {
                equipLevel?: number;
                parts?: {
                    resKey?: string;
                    target?: string;
                    isToken?: boolean;
                    addOrOverrideTalentDataBundle?: {
                        candidates?: {
                            displayRangeId?: boolean;
                            upgradeDescription?: string;
                            talentIndex?: number;
                            unlockCondition?: {
                                phase?: string | number;
                                level?: number;
                            };
                            requiredPotentialRank?: number;
                            prefabKey?: string;
                            name?: string;
                            description?: string;
                            rangeId?: string;
                            blackboard?: {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }[];
                            tokenKey?: string;
                        }[];
                    };
                    overrideTraitDataBundle?: {
                        candidates?: {
                            additionalDescription?: string;
                            unlockCondition?: {
                                phase?: string | number;
                                level?: number;
                            };
                            requiredPotentialRank?: number;
                            blackboard?: {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }[];
                            overrideDescripton?: string;
                            prefabKey?: string;
                            rangeId?: string;
                        }[];
                    };
                }[];
                attributeBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                tokenAttributeBlackboard?: Record<string, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[]>;
            }[];
        };
    }[];
    skins?: {
        skinId?: string;
        charId?: string;
        tokenSkinMap?: {
            tokenId?: string;
            tokenSkinId?: string;
        }[];
        illustId?: string;
        dynIllustId?: string;
        avatarId?: string;
        portraitId?: string;
        dynPortraitId?: string;
        dynEntranceId?: string;
        buildingId?: string;
        battleSkin?: {
            overwritePrefab?: boolean;
            skinOrPrefabId?: string;
        };
        isBuySkin?: boolean;
        tmplId?: string;
        voiceId?: string;
        voiceType?: string;
        displaySkin?: {
            skinName?: string;
            colorList?: string[];
            titleList?: string[];
            modelName?: string;
            drawerList?: string[];
            designerList?: string[];
            skinGroupId?: string;
            skinGroupName?: string;
            skinGroupSortIndex?: number;
            content?: string;
            dialog?: string;
            usage?: string;
            description?: string;
            obtainApproach?: string;
            sortId?: number;
            displayTagId?: string;
            getTime?: number;
            onYear?: number;
            onPeriod?: number;
        };
    }[];
    bases?: {
        condition?: {
            buffId?: string;
            cond?: {
                phase?: string | number;
                level?: number;
            };
        };
        skill?: {
            buffId?: string;
            buffName?: string;
            buffIcon?: string;
            skillIcon?: string;
            sortId?: number;
            buffColor?: string;
            textColor?: string;
            buffCategory?: string;
            roomType?: string;
            description?: string;
        };
    }[];
    paradox?: {
        excel?: {
            charId?: string;
            stageId?: string;
            levelId?: string;
            zoneId?: string;
            code?: string;
            name?: string;
            loadingPicId?: string;
            description?: string;
            unlockParam?: {
                unlockType?: string;
                unlockParam1?: string;
                unlockParam2?: string;
                unlockParam3?: null;
            }[];
            rewardItem?: {
                id?: string;
                count?: number;
                type?: string;
            }[];
            stageNameForShow?: string;
            zoneNameForShow?: string;
            picId?: string;
            stageGetTime?: number;
        };
        levels?: {
            options?: {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            };
            levelId?: string;
            mapId?: string;
            bgmEvent?: string;
            environmentSe?: string;
            mapData?: {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            };
            tilesDisallowToLocate?: any[];
            runes?: {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            globalBuffs?: {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }[];
            routes?: {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }[];
            extraRoutes?: any[];
            enemies?: any[];
            enemyDbRefs?: {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }[];
            waves?: {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }[];
            branches?: Record<string, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }>;
            predefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            hardPredefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            excludeCharIdList?: null;
            randomSeed?: number;
            operaConfig?: string;
            runtimeData?: null;
        };
    };
    data?: {
        name?: string;
        description?: string;
        canUseGeneralPotentialItem?: boolean;
        canUseActivityPotentialItem?: boolean;
        potentialItemId?: string;
        activityPotentialItemId?: string;
        classicPotentialItemId?: string;
        nationId?: string;
        groupId?: string;
        teamId?: string;
        displayNumber?: string;
        appellation?: string;
        position?: string;
        tagList?: string[];
        itemUsage?: string;
        itemDesc?: string;
        itemObtainApproach?: string;
        isNotObtainable?: boolean;
        isSpChar?: boolean;
        maxPotentialLevel?: number;
        rarity?: string;
        profession?: string;
        subProfessionId?: string;
        trait?: {
            candidates?: {
                unlockCondition?: {
                    phase?: string | number;
                    level?: number;
                };
                requiredPotentialRank?: number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideDescripton?: string;
                prefabKey?: string;
                rangeId?: string;
            }[];
        };
        phases?: {
            characterPrefabKey?: string;
            rangeId?: string;
            maxLevel?: number;
            attributesKeyFrames?: {
                level?: number;
                data?: {
                    maxHp?: number;
                    atk?: number;
                    def?: number;
                    magicResistance?: number;
                    cost?: number;
                    blockCnt?: number;
                    moveSpeed?: number;
                    attackSpeed?: number;
                    baseAttackTime?: number;
                    respawnTime?: number;
                    hpRecoveryPerSec?: number;
                    spRecoveryPerSec?: number;
                    maxDeployCount?: number;
                    maxDeckStackCnt?: number;
                    tauntLevel?: number;
                    massLevel?: number;
                    baseForceLevel?: number;
                    stunImmune?: boolean;
                    silenceImmune?: boolean;
                    sleepImmune?: boolean;
                    frozenImmune?: boolean;
                    levitateImmune?: boolean;
                };
            }[];
            evolveCost?: {
                id?: string;
                count?: number;
                type?: string;
            }[];
        }[];
        skills?: {
            skillId?: string;
            overridePrefabKey?: string;
            overrideTokenKey?: string;
            levelUpCostCond?: {
                unlockCond?: {
                    phase?: string | number;
                    level?: number;
                };
                lvlUpTime?: number;
                levelUpCost?: {
                    id?: string;
                    count?: number;
                    type?: string;
                }[];
            }[];
            unlockCond?: {
                phase?: string | number;
                level?: number;
            };
        }[];
        displayTokenDict?: Record<string, boolean>;
        talents?: {
            candidates?: {
                unlockCondition?: {
                    phase?: string | number;
                    level?: number;
                };
                requiredPotentialRank?: number;
                prefabKey?: string;
                name?: string;
                description?: string;
                rangeId?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                tokenKey?: string;
            }[];
        }[];
        potentialRanks?: {
            type?: string;
            description?: string;
            buff?: {
                attributes?: {
                    abnormalFlags?: null;
                    abnormalImmunes?: null;
                    abnormalAntis?: null;
                    abnormalCombos?: null;
                    abnormalComboImmunes?: null;
                    attributeModifiers?: {
                        attributeType?: string;
                        formulaItem?: string;
                        value?: number;
                        loadFromBlackboard?: boolean;
                        fetchBaseValueFromSourceEntity?: boolean;
                    }[];
                };
            };
            equivalentCost?: null;
        }[];
        favorKeyFrames?: {
            level?: number;
            data?: {
                maxHp?: number;
                atk?: number;
                def?: number;
                magicResistance?: number;
                cost?: number;
                blockCnt?: number;
                moveSpeed?: number;
                attackSpeed?: number;
                baseAttackTime?: number;
                respawnTime?: number;
                hpRecoveryPerSec?: number;
                spRecoveryPerSec?: number;
                maxDeployCount?: number;
                maxDeckStackCnt?: number;
                tauntLevel?: number;
                massLevel?: number;
                baseForceLevel?: number;
                stunImmune?: boolean;
                silenceImmune?: boolean;
                sleepImmune?: boolean;
                frozenImmune?: boolean;
                levitateImmune?: boolean;
            };
        }[];
        allSkillLvlup?: {
            unlockCond?: {
                phase?: string | number;
                level?: number;
            };
            lvlUpCost?: {
                id?: string;
                count?: number;
                type?: string;
            }[];
        }[];
    };
}, {
    id?: string;
    recruit?: number;
    archetype?: string;
    range?: {
        id?: string;
        direction?: number;
        grids?: {
            row?: number;
            col?: number;
        }[];
    };
    skills?: {
        skillId?: string;
        iconId?: string;
        hidden?: boolean;
        levels?: {
            name?: string;
            rangeId?: string;
            description?: string;
            skillType?: string;
            durationType?: string;
            spData?: {
                spType?: string | number;
                levelUpCost?: null;
                maxChargeTime?: number;
                spCost?: number;
                initSp?: number;
                increment?: number;
            };
            prefabId?: string;
            duration?: number;
            blackboard?: {
                key?: string;
                value?: number;
                valueStr?: string;
            }[];
        }[];
    }[];
    modules?: {
        info?: {
            uniEquipId?: string;
            uniEquipName?: string;
            uniEquipIcon?: string;
            uniEquipDesc?: string;
            typeIcon?: string;
            typeName1?: string;
            typeName2?: string;
            equipShiningColor?: string;
            showEvolvePhase?: string;
            unlockEvolvePhase?: string;
            charId?: string;
            tmplId?: string;
            showLevel?: number;
            unlockLevel?: number;
            unlockFavorPoint?: number;
            missionList?: string[];
            itemCost?: Record<string, {
                id?: string;
                count?: number;
                type?: string;
            }[]>;
            type?: string;
            uniEquipGetTime?: number;
            charEquipOrder?: number;
        };
        data?: {
            phases?: {
                equipLevel?: number;
                parts?: {
                    resKey?: string;
                    target?: string;
                    isToken?: boolean;
                    addOrOverrideTalentDataBundle?: {
                        candidates?: {
                            displayRangeId?: boolean;
                            upgradeDescription?: string;
                            talentIndex?: number;
                            unlockCondition?: {
                                phase?: string | number;
                                level?: number;
                            };
                            requiredPotentialRank?: number;
                            prefabKey?: string;
                            name?: string;
                            description?: string;
                            rangeId?: string;
                            blackboard?: {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }[];
                            tokenKey?: string;
                        }[];
                    };
                    overrideTraitDataBundle?: {
                        candidates?: {
                            additionalDescription?: string;
                            unlockCondition?: {
                                phase?: string | number;
                                level?: number;
                            };
                            requiredPotentialRank?: number;
                            blackboard?: {
                                key?: string;
                                value?: number;
                                valueStr?: string;
                            }[];
                            overrideDescripton?: string;
                            prefabKey?: string;
                            rangeId?: string;
                        }[];
                    };
                }[];
                attributeBlackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                tokenAttributeBlackboard?: Record<string, {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[]>;
            }[];
        };
    }[];
    skins?: {
        skinId?: string;
        charId?: string;
        tokenSkinMap?: {
            tokenId?: string;
            tokenSkinId?: string;
        }[];
        illustId?: string;
        dynIllustId?: string;
        avatarId?: string;
        portraitId?: string;
        dynPortraitId?: string;
        dynEntranceId?: string;
        buildingId?: string;
        battleSkin?: {
            overwritePrefab?: boolean;
            skinOrPrefabId?: string;
        };
        isBuySkin?: boolean;
        tmplId?: string;
        voiceId?: string;
        voiceType?: string;
        displaySkin?: {
            skinName?: string;
            colorList?: string[];
            titleList?: string[];
            modelName?: string;
            drawerList?: string[];
            designerList?: string[];
            skinGroupId?: string;
            skinGroupName?: string;
            skinGroupSortIndex?: number;
            content?: string;
            dialog?: string;
            usage?: string;
            description?: string;
            obtainApproach?: string;
            sortId?: number;
            displayTagId?: string;
            getTime?: number;
            onYear?: number;
            onPeriod?: number;
        };
    }[];
    bases?: {
        condition?: {
            buffId?: string;
            cond?: {
                phase?: string | number;
                level?: number;
            };
        };
        skill?: {
            buffId?: string;
            buffName?: string;
            buffIcon?: string;
            skillIcon?: string;
            sortId?: number;
            buffColor?: string;
            textColor?: string;
            buffCategory?: string;
            roomType?: string;
            description?: string;
        };
    }[];
    paradox?: {
        excel?: {
            charId?: string;
            stageId?: string;
            levelId?: string;
            zoneId?: string;
            code?: string;
            name?: string;
            loadingPicId?: string;
            description?: string;
            unlockParam?: {
                unlockType?: string;
                unlockParam1?: string;
                unlockParam2?: string;
                unlockParam3?: null;
            }[];
            rewardItem?: {
                id?: string;
                count?: number;
                type?: string;
            }[];
            stageNameForShow?: string;
            zoneNameForShow?: string;
            picId?: string;
            stageGetTime?: number;
        };
        levels?: {
            options?: {
                characterLimit?: number;
                maxLifePoint?: number;
                initialCost?: number;
                maxCost?: number;
                costIncreaseTime?: number;
                moveMultiplier?: number;
                steeringEnabled?: boolean;
                isTrainingLevel?: boolean;
                isHardTrainingLevel?: boolean;
                isPredefinedCardsSelectable?: boolean;
                maxPlayTime?: number;
                functionDisableMask?: string | number;
                configBlackBoard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            };
            levelId?: string;
            mapId?: string;
            bgmEvent?: string;
            environmentSe?: string;
            mapData?: {
                map?: number[][];
                tiles?: {
                    tileKey?: string;
                    heightType?: string | number;
                    buildableType?: string | number;
                    passableMask?: string | number;
                    playerSideMask?: string | number;
                    blackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    effects?: {
                        key?: string;
                        offset?: {
                            x?: number;
                            y?: number;
                            z?: number;
                        };
                        direction?: string | number;
                    }[];
                }[];
                blockEdges?: any[];
                tags?: string[];
                effects?: {
                    key?: string;
                    offset?: {
                        x?: number;
                        y?: number;
                        z?: number;
                    };
                    direction?: string | number;
                }[];
                layerRects?: null;
                width?: number;
                height?: number;
            };
            tilesDisallowToLocate?: any[];
            runes?: {
                difficultyMask?: string | number;
                key?: string;
                professionMask?: string | number;
                buildableMask?: string | number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
            }[];
            globalBuffs?: {
                prefabKey?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideCameraEffect?: null;
                passProfessionMaskFlag?: boolean;
                professionMask?: string | number;
                useExtraData?: boolean;
            }[];
            routes?: {
                motionMode?: string | number;
                startPosition?: {
                    row?: number;
                    col?: number;
                };
                endPosition?: {
                    row?: number;
                    col?: number;
                };
                spawnRandomRange?: {
                    x?: number;
                    y?: number;
                };
                spawnOffset?: {
                    x?: number;
                    y?: number;
                };
                checkpoints?: {
                    type?: string | number;
                    time?: number;
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    reachOffset?: {
                        x?: number;
                        y?: number;
                    };
                    randomizeReachOffset?: boolean;
                    reachDistance?: number;
                }[];
                allowDiagonalMove?: boolean;
                visitEveryTileCenter?: boolean;
                visitEveryNodeCenter?: boolean;
                visitEveryCheckPoint?: boolean;
            }[];
            extraRoutes?: any[];
            enemies?: any[];
            enemyDbRefs?: {
                useDb?: boolean;
                id?: string;
                level?: number;
                overwrittenData?: {
                    name?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    description?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    prefabKey?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    attributes?: {
                        maxHp?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        atk?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        def?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        magicResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        cost?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        blockCnt?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        moveSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        attackSpeed?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseAttackTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        respawnTime?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        hpRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        spRecoveryPerSec?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        maxDeployCount?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        massLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        baseForceLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        tauntLevel?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epDamageResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        epResistance?: {
                            m_defined?: boolean;
                            m_value?: number;
                        };
                        stunImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        silenceImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        sleepImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        frozenImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                        levitateImmune?: {
                            m_defined?: boolean;
                            m_value?: boolean;
                        };
                    };
                    applyWay?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    motion?: {
                        m_defined?: boolean;
                        m_value?: string;
                    };
                    enemyTags?: {
                        m_defined?: boolean;
                        m_value?: string[];
                    };
                    lifePointReduce?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    levelType?: {
                        m_defined?: boolean;
                        m_value?: string;
                    } | {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    rangeRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    numOfExtraDrops?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    viewRadius?: {
                        m_defined?: boolean;
                        m_value?: number;
                    };
                    notCountInTotal?: {
                        m_defined?: boolean;
                        m_value?: boolean;
                    };
                    talentBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                    skills?: {
                        prefabKey?: string;
                        priority?: number;
                        cooldown?: number;
                        initCooldown?: number;
                        spCost?: number;
                        blackboard?: {
                            key?: string;
                            value?: number;
                            valueStr?: string;
                        }[];
                    }[];
                    spData?: {
                        spType?: string;
                        maxSp?: number;
                        initSp?: number;
                        increment?: number;
                    };
                };
            }[];
            waves?: {
                preDelay?: number;
                postDelay?: number;
                maxTimeWaitingForNextWave?: number;
                fragments?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    name?: string;
                }[];
                advancedWaveTag?: string;
                name?: string;
            }[];
            branches?: Record<string, {
                phases?: {
                    preDelay?: number;
                    actions?: {
                        actionType?: string | number;
                        managedByScheduler?: boolean;
                        key?: string;
                        count?: number;
                        preDelay?: number;
                        interval?: number;
                        routeIndex?: number;
                        blockFragment?: boolean;
                        autoPreviewRoute?: boolean;
                        autoDisplayEnemyInfo?: boolean;
                        isUnharmfulAndAlwaysCountAsKilled?: boolean;
                        hiddenGroup?: string;
                        randomSpawnGroupKey?: string;
                        randomSpawnGroupPackKey?: string;
                        randomType?: string | number;
                        weight?: number;
                        dontBlockWave?: boolean;
                        isValid?: boolean;
                        extraMeta?: null;
                    }[];
                    m_randomActionGroups?: null;
                    m_actionWithRandomSpawn?: null;
                    m_validActionPackKeys?: null;
                }[];
            }>;
            predefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            hardPredefines?: {
                characterInsts?: any[];
                tokenInsts?: {
                    position?: {
                        row?: number;
                        col?: number;
                    };
                    direction?: string | number;
                    hidden?: boolean;
                    alias?: string;
                    uniEquipIds?: {
                        key?: string;
                        level?: number;
                    }[];
                    inst?: {
                        characterKey?: string;
                        level?: number;
                        phase?: string | number;
                        favorPoint?: number;
                        potentialRank?: number;
                    };
                    skillIndex?: number;
                    mainSkillLvl?: number;
                    skinId?: string;
                    tmplId?: string;
                    overrideSkillBlackboard?: {
                        key?: string;
                        value?: number;
                        valueStr?: string;
                    }[];
                }[];
                characterCards?: any[];
                tokenCards?: any[];
            };
            excludeCharIdList?: null;
            randomSeed?: number;
            operaConfig?: string;
            runtimeData?: null;
        };
    };
    data?: {
        name?: string;
        description?: string;
        canUseGeneralPotentialItem?: boolean;
        canUseActivityPotentialItem?: boolean;
        potentialItemId?: string;
        activityPotentialItemId?: string;
        classicPotentialItemId?: string;
        nationId?: string;
        groupId?: string;
        teamId?: string;
        displayNumber?: string;
        appellation?: string;
        position?: string;
        tagList?: string[];
        itemUsage?: string;
        itemDesc?: string;
        itemObtainApproach?: string;
        isNotObtainable?: boolean;
        isSpChar?: boolean;
        maxPotentialLevel?: number;
        rarity?: string;
        profession?: string;
        subProfessionId?: string;
        trait?: {
            candidates?: {
                unlockCondition?: {
                    phase?: string | number;
                    level?: number;
                };
                requiredPotentialRank?: number;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                overrideDescripton?: string;
                prefabKey?: string;
                rangeId?: string;
            }[];
        };
        phases?: {
            characterPrefabKey?: string;
            rangeId?: string;
            maxLevel?: number;
            attributesKeyFrames?: {
                level?: number;
                data?: {
                    maxHp?: number;
                    atk?: number;
                    def?: number;
                    magicResistance?: number;
                    cost?: number;
                    blockCnt?: number;
                    moveSpeed?: number;
                    attackSpeed?: number;
                    baseAttackTime?: number;
                    respawnTime?: number;
                    hpRecoveryPerSec?: number;
                    spRecoveryPerSec?: number;
                    maxDeployCount?: number;
                    maxDeckStackCnt?: number;
                    tauntLevel?: number;
                    massLevel?: number;
                    baseForceLevel?: number;
                    stunImmune?: boolean;
                    silenceImmune?: boolean;
                    sleepImmune?: boolean;
                    frozenImmune?: boolean;
                    levitateImmune?: boolean;
                };
            }[];
            evolveCost?: {
                id?: string;
                count?: number;
                type?: string;
            }[];
        }[];
        skills?: {
            skillId?: string;
            overridePrefabKey?: string;
            overrideTokenKey?: string;
            levelUpCostCond?: {
                unlockCond?: {
                    phase?: string | number;
                    level?: number;
                };
                lvlUpTime?: number;
                levelUpCost?: {
                    id?: string;
                    count?: number;
                    type?: string;
                }[];
            }[];
            unlockCond?: {
                phase?: string | number;
                level?: number;
            };
        }[];
        displayTokenDict?: Record<string, boolean>;
        talents?: {
            candidates?: {
                unlockCondition?: {
                    phase?: string | number;
                    level?: number;
                };
                requiredPotentialRank?: number;
                prefabKey?: string;
                name?: string;
                description?: string;
                rangeId?: string;
                blackboard?: {
                    key?: string;
                    value?: number;
                    valueStr?: string;
                }[];
                tokenKey?: string;
            }[];
        }[];
        potentialRanks?: {
            type?: string;
            description?: string;
            buff?: {
                attributes?: {
                    abnormalFlags?: null;
                    abnormalImmunes?: null;
                    abnormalAntis?: null;
                    abnormalCombos?: null;
                    abnormalComboImmunes?: null;
                    attributeModifiers?: {
                        attributeType?: string;
                        formulaItem?: string;
                        value?: number;
                        loadFromBlackboard?: boolean;
                        fetchBaseValueFromSourceEntity?: boolean;
                    }[];
                };
            };
            equivalentCost?: null;
        }[];
        favorKeyFrames?: {
            level?: number;
            data?: {
                maxHp?: number;
                atk?: number;
                def?: number;
                magicResistance?: number;
                cost?: number;
                blockCnt?: number;
                moveSpeed?: number;
                attackSpeed?: number;
                baseAttackTime?: number;
                respawnTime?: number;
                hpRecoveryPerSec?: number;
                spRecoveryPerSec?: number;
                maxDeployCount?: number;
                maxDeckStackCnt?: number;
                tauntLevel?: number;
                massLevel?: number;
                baseForceLevel?: number;
                stunImmune?: boolean;
                silenceImmune?: boolean;
                sleepImmune?: boolean;
                frozenImmune?: boolean;
                levitateImmune?: boolean;
            };
        }[];
        allSkillLvlup?: {
            unlockCond?: {
                phase?: string | number;
                level?: number;
            };
            lvlUpCost?: {
                id?: string;
                count?: number;
                type?: string;
            }[];
        }[];
    };
}>;
export type AttributesKeyFrame = z.infer<typeof AttributesKeyFrameZod>;
export type Blackboard = z.infer<typeof BlackboardZod>;
export type Base = z.infer<typeof BaseZod>;
export type CCStage = z.infer<typeof CCStageZod>;
export type Definition = z.infer<typeof DefinitionZod>;
export type Enemy = z.infer<typeof EnemyZod>;
export type EnemyAttributes = z.infer<typeof EnemyAttributesZod>;
export type EnemyData = z.infer<typeof EnemyDataZod>;
export type EnemySkills = z.infer<typeof EnemySkillsZod>;
export type EnemySpData = z.infer<typeof EnemySpDataZod>;
export type GameEvent = z.infer<typeof GameEventZod>;
export type GridRange = z.infer<typeof GridRangeZod>;
export type ManufactFormula = z.infer<typeof ManufactFormulaZod>;
export type WorkshopFormula = z.infer<typeof WorkshopFormulaZod>;
export type Item = z.infer<typeof ItemZod>;
export type LevelUpCost = z.infer<typeof LevelUpCostZod>;
export type LevelUpCostCond = z.infer<typeof LevelUpCostCondZod>;
export type Module = z.infer<typeof ModuleZod>;
export type Operator = z.infer<typeof OperatorZod>;
export type OperatorUnlockCond = z.infer<typeof OperatorUnlockCondZod>;
export type Paradox = z.infer<typeof ParadoxZod>;
export type RogueTheme = z.infer<typeof RogueThemeZod>;
export type RogueRelic = z.infer<typeof RogueRelicZod>;
export type RogueStage = z.infer<typeof RogueStageZod>;
export type RogueVariation = z.infer<typeof RogueVariationZod>;
export type SandboxAct = z.infer<typeof SandboxActZod>;
export type SandboxStage = z.infer<typeof SandboxStageZod>;
export type Skill = z.infer<typeof SkillZod>;
export type Skin = z.infer<typeof SkinZod>;
export type Stage = z.infer<typeof StageZod>;
export type StageData = z.infer<typeof StageDataZod>;
export type StageEffect = z.infer<typeof StageEffectZod>;
export type StageDefines = z.infer<typeof StageDefinesZod>;
export {};
